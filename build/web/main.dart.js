// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk', 'flutter_sdk'], (function load__zapp_user_main(dart_sdk, flutter_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const _internal = dart_sdk._internal;
  const collection = dart_sdk.collection;
  const typed_data = dart_sdk.typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const binding = flutter_sdk.src__widgets__binding;
  const app = flutter_sdk.src__material__app;
  const container = flutter_sdk.src__widgets__container;
  const material = flutter_sdk.src__material__material;
  const basic = flutter_sdk.src__widgets__basic;
  const framework = flutter_sdk.src__widgets__framework;
  const card = flutter_sdk.src__material__card;
  const list_tile = flutter_sdk.src__material__list_tile;
  const text = flutter_sdk.src__widgets__text;
  const platform_channel = flutter_sdk.src__services__platform_channel;
  const message_codecs = flutter_sdk.src__services__message_codecs;
  const path$ = flutter_sdk.path;
  const message_codec = flutter_sdk.src__services__message_codec;
  const unmodifiable_wrappers = flutter_sdk.src__unmodifiable_wrappers;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var CardTest = Object.create(dart.library);
  var DBTest = Object.create(dart.library);
  var sqflite = Object.create(dart.library);
  var sqflite_ffi = Object.create(dart.library);
  var compat = Object.create(dart.library);
  var constant = Object.create(dart.library);
  var sqflite_android = Object.create(dart.library);
  var sqflite_impl = Object.create(dart.library);
  var utils = Object.create(dart.library);
  var utils$ = Object.create(dart.library);
  var sqlite_api = Object.create(dart.library);
  var sql = Object.create(dart.library);
  var sqflite$ = Object.create(dart.library);
  var factory_impl = Object.create(dart.library);
  var sqflite_plugin = Object.create(dart.library);
  var sqflite_ffi$ = Object.create(dart.library);
  var compat$ = Object.create(dart.library);
  var constant$ = Object.create(dart.library);
  var sqflite_import = Object.create(dart.library);
  var sqlite_api$ = Object.create(dart.library);
  var services_impl = Object.create(dart.library);
  var utils$0 = Object.create(dart.library);
  var utils$1 = Object.create(dart.library);
  var sql_builder = Object.create(dart.library);
  var sqflite_database_factory = Object.create(dart.library);
  var exception_impl = Object.create(dart.library);
  var dev_utils = Object.create(dart.library);
  var sqflite_ffi_web = Object.create(dart.library);
  var factory_mixin = Object.create(dart.library);
  var database$ = Object.create(dart.library);
  var database_mixin = Object.create(dart.library);
  var exception = Object.create(dart.library);
  var factory$ = Object.create(dart.library);
  var constant$0 = Object.create(dart.library);
  var factory = Object.create(dart.library);
  var sql$ = Object.create(dart.library);
  var open_options = Object.create(dart.library);
  var transaction = Object.create(dart.library);
  var sqflite_debug = Object.create(dart.library);
  var sql_builder$ = Object.create(dart.library);
  var dev_utils$ = Object.create(dart.library);
  var database_factory_ffi_web = Object.create(dart.library);
  var synchronized = Object.create(dart.library);
  var path_utils = Object.create(dart.library);
  var batch = Object.create(dart.library);
  var cursor = Object.create(dart.library);
  var collection_utils = Object.create(dart.library);
  var value_utils = Object.create(dart.library);
  var arg_utils = Object.create(dart.library);
  var import_mixin = Object.create(dart.library);
  var sqflite_logger = Object.create(dart.library);
  var method_call = Object.create(dart.library);
  var basic_lock = Object.create(dart.library);
  var reentrant_lock = Object.create(dart.library);
  var sql_command = Object.create(dart.library);
  var env_utils = Object.create(dart.library);
  var sqflite_logger$ = Object.create(dart.library);
  var constant$1 = Object.create(dart.library);
  var env_utils$ = Object.create(dart.library);
  var handler_mixin = Object.create(dart.library);
  var utils$2 = Object.create(dart.library);
  var database_factory_ffi = Object.create(dart.library);
  var sqflite_ffi_exception = Object.create(dart.library);
  var sqflite_ffi_impl = Object.create(dart.library);
  var sqflite_import$ = Object.create(dart.library);
  var common = Object.create(dart.library);
  var database_tracker_web = Object.create(dart.library);
  var $import = Object.create(dart.library);
  var sqflite_ffi_impl_web = Object.create(dart.library);
  var constants = Object.create(dart.library);
  var database = Object.create(dart.library);
  var exception$ = Object.create(dart.library);
  var functions = Object.create(dart.library);
  var result_set = Object.create(dart.library);
  var sqlite3 = Object.create(dart.library);
  var statement = Object.create(dart.library);
  var $toString = dartx.toString;
  var $remove = dartx.remove;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $map = dartx.map;
  var $trim = dartx.trim;
  var $toLowerCase = dartx.toLowerCase;
  var $startsWith = dartx.startsWith;
  var $length = dartx.length;
  var $sublist = dartx.sublist;
  var $add = dartx.add;
  var $isNotEmpty = dartx.isNotEmpty;
  var $first = dartx.first;
  var $values = dartx.values;
  var $toRadixString = dartx.toRadixString;
  var $toUpperCase = dartx.toUpperCase;
  var $addAll = dartx.addAll;
  var $isEmpty = dartx.isEmpty;
  var $runtimeType = dartx.runtimeType;
  var $contains = dartx.contains;
  var $indexOf = dartx.indexOf;
  var $substring = dartx.substring;
  var $split = dartx.split;
  var $forEach = dartx.forEach;
  var $keys = dartx.keys;
  var $codeUnits = dartx.codeUnits;
  var $last = dartx.last;
  var $toList = dartx.toList;
  var $cast = dartx.cast;
  var $toSet = dartx.toSet;
  var $clear = dartx.clear;
  var $join = dartx.join;
  var $removeLast = dartx.removeLast;
  var $removeAt = dartx.removeAt;
  var $containsKey = dartx.containsKey;
  var $lastIndexOf = dartx.lastIndexOf;
  var $putIfAbsent = dartx.putIfAbsent;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T$ = {
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T$.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T$.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$.ListOfString()])))(),
    JSArrayOfString: () => (T$.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T$.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T$.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T$.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    JSArrayOfWidget: () => (T$.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    FutureOfvoid: () => (T$.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    StringToFutureOfvoid: () => (T$.StringToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [core.String])))(),
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    IdentityMapOfString$ObjectN: () => (T$.IdentityMapOfString$ObjectN = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ObjectN())))(),
    IdentityMapOfString$SqfliteDatabaseOpenHelper: () => (T$.IdentityMapOfString$SqfliteDatabaseOpenHelper = dart.constFn(_js_helper.IdentityMap$(core.String, database$.SqfliteDatabaseOpenHelper)))(),
    VoidToFutureOfvoid: () => (T$.VoidToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [])))(),
    SqfliteDatabaseOpenHelperN: () => (T$.SqfliteDatabaseOpenHelperN = dart.constFn(dart.nullable(database$.SqfliteDatabaseOpenHelper)))(),
    StringToSqfliteDatabaseOpenHelperN: () => (T$.StringToSqfliteDatabaseOpenHelperN = dart.constFn(dart.fnType(T$.SqfliteDatabaseOpenHelperN(), [core.String])))(),
    SqfliteDatabaseOpenHelperNTovoid: () => (T$.SqfliteDatabaseOpenHelperNTovoid = dart.constFn(dart.fnType(dart.void, [T$.SqfliteDatabaseOpenHelperN()])))(),
    FutureOfSqfliteDatabase: () => (T$.FutureOfSqfliteDatabase = dart.constFn(async.Future$(database$.SqfliteDatabase)))(),
    VoidToFutureOfSqfliteDatabase: () => (T$.VoidToFutureOfSqfliteDatabase = dart.constFn(dart.fnType(T$.FutureOfSqfliteDatabase(), [])))(),
    StringN: () => (T$.StringN = dart.constFn(dart.nullable(core.String)))(),
    MapEntryOfString$SqfliteDatabaseDebugInfo: () => (T$.MapEntryOfString$SqfliteDatabaseDebugInfo = dart.constFn(core.MapEntry$(core.String, factory_mixin.SqfliteDatabaseDebugInfo)))(),
    dynamicAnddynamicToMapEntryOfString$SqfliteDatabaseDebugInfo: () => (T$.dynamicAnddynamicToMapEntryOfString$SqfliteDatabaseDebugInfo = dart.constFn(dart.fnType(T$.MapEntryOfString$SqfliteDatabaseDebugInfo(), [dart.dynamic, dart.dynamic])))(),
    intN: () => (T$.intN = dart.constFn(dart.nullable(core.int)))(),
    intToFutureOfvoid: () => (T$.intToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [core.int])))(),
    FutureOfint: () => (T$.FutureOfint = dart.constFn(async.Future$(core.int)))(),
    VoidToFutureOfint: () => (T$.VoidToFutureOfint = dart.constFn(dart.fnType(T$.FutureOfint(), [])))(),
    DatabaseAndintAndintToFutureOfvoid: () => (T$.DatabaseAndintAndintToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [sqlite_api$.Database, core.int, core.int])))(),
    VoidToNever: () => (T$.VoidToNever = dart.constFn(dart.fnType(dart.Never, [])))(),
    IdentityMapOfString$_NamedLock: () => (T$.IdentityMapOfString$_NamedLock = dart.constFn(_js_helper.IdentityMap$(core.String, factory_mixin._NamedLock)))(),
    boolN: () => (T$.boolN = dart.constFn(dart.nullable(core.bool)))(),
    MapOfString$ObjectN: () => (T$.MapOfString$ObjectN = dart.constFn(core.Map$(core.String, T$.ObjectN())))(),
    MapEntryOfString$MapOfString$ObjectN: () => (T$.MapEntryOfString$MapOfString$ObjectN = dart.constFn(core.MapEntry$(core.String, T$.MapOfString$ObjectN())))(),
    StringAndSqfliteDatabaseDebugInfoToMapEntryOfString$MapOfString$ObjectN: () => (T$.StringAndSqfliteDatabaseDebugInfoToMapEntryOfString$MapOfString$ObjectN = dart.constFn(dart.fnType(T$.MapEntryOfString$MapOfString$ObjectN(), [core.String, factory_mixin.SqfliteDatabaseDebugInfo])))(),
    TransactionN: () => (T$.TransactionN = dart.constFn(dart.nullable(sqlite_api$.Transaction)))(),
    TransactionNToFutureOfint: () => (T$.TransactionNToFutureOfint = dart.constFn(dart.fnType(T$.FutureOfint(), [T$.TransactionN()])))(),
    ListOfMapOfString$ObjectN: () => (T$.ListOfMapOfString$ObjectN = dart.constFn(core.List$(T$.MapOfString$ObjectN())))(),
    FutureOfListOfMapOfString$ObjectN: () => (T$.FutureOfListOfMapOfString$ObjectN = dart.constFn(async.Future$(T$.ListOfMapOfString$ObjectN())))(),
    TransactionNToFutureOfListOfMapOfString$ObjectN: () => (T$.TransactionNToFutureOfListOfMapOfString$ObjectN = dart.constFn(dart.fnType(T$.FutureOfListOfMapOfString$ObjectN(), [T$.TransactionN()])))(),
    FutureOfSqfliteQueryCursor: () => (T$.FutureOfSqfliteQueryCursor = dart.constFn(async.Future$(cursor.SqfliteQueryCursor)))(),
    TransactionNToFutureOfSqfliteQueryCursor: () => (T$.TransactionNToFutureOfSqfliteQueryCursor = dart.constFn(dart.fnType(T$.FutureOfSqfliteQueryCursor(), [T$.TransactionN()])))(),
    FutureOfbool: () => (T$.FutureOfbool = dart.constFn(async.Future$(core.bool)))(),
    TransactionNToFutureOfbool: () => (T$.TransactionNToFutureOfbool = dart.constFn(dart.fnType(T$.FutureOfbool(), [T$.TransactionN()])))(),
    TransactionNToFutureOfvoid: () => (T$.TransactionNToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [T$.TransactionN()])))(),
    ListOfObjectN: () => (T$.ListOfObjectN = dart.constFn(core.List$(T$.ObjectN())))(),
    ListN: () => (T$.ListN = dart.constFn(dart.nullable(core.List)))(),
    FutureOfList: () => (T$.FutureOfList = dart.constFn(async.Future$(core.List)))(),
    TransactionNToFutureOfList: () => (T$.TransactionNToFutureOfList = dart.constFn(dart.fnType(T$.FutureOfList(), [T$.TransactionN()])))(),
    SqfliteTransactionN: () => (T$.SqfliteTransactionN = dart.constFn(dart.nullable(transaction.SqfliteTransaction)))(),
    FutureOfNull: () => (T$.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    TransactionNToFutureOfNull: () => (T$.TransactionNToFutureOfNull = dart.constFn(dart.fnType(T$.FutureOfNull(), [T$.TransactionN()])))(),
    VoidToFutureOfNull: () => (T$.VoidToFutureOfNull = dart.constFn(dart.fnType(T$.FutureOfNull(), [])))(),
    TransactionToFutureOfNull: () => (T$.TransactionToFutureOfNull = dart.constFn(dart.fnType(T$.FutureOfNull(), [sqlite_api$.Transaction])))(),
    SqfliteTransactionNToFutureOfint: () => (T$.SqfliteTransactionNToFutureOfint = dart.constFn(dart.fnType(T$.FutureOfint(), [T$.SqfliteTransactionN()])))(),
    SqfliteTransactionNAndintToFutureOfvoid: () => (T$.SqfliteTransactionNAndintToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [T$.SqfliteTransactionN(), core.int])))(),
    SqfliteTransactionNToMapOfString$ObjectN: () => (T$.SqfliteTransactionNToMapOfString$ObjectN = dart.constFn(dart.fnType(T$.MapOfString$ObjectN(), [T$.SqfliteTransactionN()])))(),
    SqfliteTransactionNAndboolNToMapOfString$ObjectN: () => (T$.SqfliteTransactionNAndboolNToMapOfString$ObjectN = dart.constFn(dart.fnType(T$.MapOfString$ObjectN(), [T$.SqfliteTransactionN(), T$.boolN()])))(),
    MapOfString$ObjectNAndboolNTovoid: () => (T$.MapOfString$ObjectNAndboolNTovoid = dart.constFn(dart.fnType(dart.void, [T$.MapOfString$ObjectN(), T$.boolN()])))(),
    ListNOfObjectN: () => (T$.ListNOfObjectN = dart.constFn(dart.nullable(T$.ListOfObjectN())))(),
    SqfliteTransactionNAndStringAndListNOfObjectNToMapOfString$ObjectN: () => (T$.SqfliteTransactionNAndStringAndListNOfObjectNToMapOfString$ObjectN = dart.constFn(dart.fnType(T$.MapOfString$ObjectN(), [T$.SqfliteTransactionN(), core.String, T$.ListNOfObjectN()])))(),
    SqfliteTransactionNAndStringAndListNOfObjectNToFutureOfint: () => (T$.SqfliteTransactionNAndStringAndListNOfObjectNToFutureOfint = dart.constFn(dart.fnType(T$.FutureOfint(), [T$.SqfliteTransactionN(), core.String, T$.ListNOfObjectN()])))(),
    TransactionNAndFn__ToFutureOfT: () => (T$.TransactionNAndFn__ToFutureOfT = dart.constFn(dart.gFnType(T => {
      var __t$FutureOfT = () => (__t$FutureOfT = dart.constFn(async.Future$(T)))();
      var __t$TransactionToFutureOfT = () => (__t$TransactionToFutureOfT = dart.constFn(dart.fnType(__t$FutureOfT(), [sqlite_api$.Transaction])))();
      return [__t$FutureOfT(), [T$.TransactionN(), __t$TransactionToFutureOfT()], {exclusive: T$.boolN()}, {}];
    }, T => {
      var __t$FutureOfT = () => (__t$FutureOfT = dart.constFn(async.Future$(T)))();
      var __t$TransactionToFutureOfT = () => (__t$TransactionToFutureOfT = dart.constFn(dart.fnType(__t$FutureOfT(), [sqlite_api$.Transaction])))();
      return [T$.ObjectN()];
    })))(),
    SqfliteTransaction__ToFutureOfvoid: () => (T$.SqfliteTransaction__ToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [transaction.SqfliteTransaction], {exclusive: T$.boolN()}, {})))(),
    StringTointN: () => (T$.StringTointN = dart.constFn(dart.fnType(T$.intN(), [core.String])))(),
    VoidTointN: () => (T$.VoidTointN = dart.constFn(dart.fnType(T$.intN(), [])))(),
    SqfliteOptionsToFutureOfvoid: () => (T$.SqfliteOptionsToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [compat$.SqfliteOptions])))(),
    JSArrayOfObjectN: () => (T$.JSArrayOfObjectN = dart.constFn(_interceptors.JSArray$(T$.ObjectN())))(),
    StringAndObjectNTovoid: () => (T$.StringAndObjectNTovoid = dart.constFn(dart.fnType(dart.void, [core.String, T$.ObjectN()])))(),
    LinkedHashSetOfString: () => (T$.LinkedHashSetOfString = dart.constFn(collection.LinkedHashSet$(core.String)))(),
    JSArrayOfSqfliteBatchOperation: () => (T$.JSArrayOfSqfliteBatchOperation = dart.constFn(_interceptors.JSArray$(batch.SqfliteBatchOperation)))(),
    SqfliteBatchOperationToMapOfString$ObjectN: () => (T$.SqfliteBatchOperationToMapOfString$ObjectN = dart.constFn(dart.fnType(T$.MapOfString$ObjectN(), [batch.SqfliteBatchOperation])))(),
    FutureOfListOfObjectN: () => (T$.FutureOfListOfObjectN = dart.constFn(async.Future$(T$.ListOfObjectN())))(),
    TransactionToFutureOfListOfObjectN: () => (T$.TransactionToFutureOfListOfObjectN = dart.constFn(dart.fnType(T$.FutureOfListOfObjectN(), [sqlite_api$.Transaction])))(),
    IdentityMapOfString$int: () => (T$.IdentityMapOfString$int = dart.constFn(_js_helper.IdentityMap$(core.String, core.int)))(),
    MapN: () => (T$.MapN = dart.constFn(dart.nullable(core.Map)))(),
    IdentityMapOfString$bool: () => (T$.IdentityMapOfString$bool = dart.constFn(_js_helper.IdentityMap$(core.String, core.bool)))(),
    ObjectNToStringN: () => (T$.ObjectNToStringN = dart.constFn(dart.fnType(T$.StringN(), [T$.ObjectN()])))(),
    LinkedHashMapOfString$ObjectN: () => (T$.LinkedHashMapOfString$ObjectN = dart.constFn(collection.LinkedHashMap$(core.String, T$.ObjectN())))(),
    SqfliteLoggerBatchOperationToMapOfString$ObjectN: () => (T$.SqfliteLoggerBatchOperationToMapOfString$ObjectN = dart.constFn(dart.fnType(T$.MapOfString$ObjectN(), [sqflite_logger.SqfliteLoggerBatchOperation])))(),
    SqfliteLoggerEventTovoid: () => (T$.SqfliteLoggerEventTovoid = dart.constFn(dart.fnType(dart.void, [sqflite_logger.SqfliteLoggerEvent])))(),
    VoidToFutureOfListOfObjectN: () => (T$.VoidToFutureOfListOfObjectN = dart.constFn(dart.fnType(T$.FutureOfListOfObjectN(), [])))(),
    JSArrayOf_SqfliteLoggerBatchOperation: () => (T$.JSArrayOf_SqfliteLoggerBatchOperation = dart.constFn(_interceptors.JSArray$(sqflite_logger._SqfliteLoggerBatchOperation)))(),
    VoidToFutureOfListOfMapOfString$ObjectN: () => (T$.VoidToFutureOfListOfMapOfString$ObjectN = dart.constFn(dart.fnType(T$.FutureOfListOfMapOfString$ObjectN(), [])))(),
    VoidToMapOfString$ObjectN: () => (T$.VoidToMapOfString$ObjectN = dart.constFn(dart.fnType(T$.MapOfString$ObjectN(), [])))(),
    ObjectNTovoid: () => (T$.ObjectNTovoid = dart.constFn(dart.fnType(dart.void, [T$.ObjectN()])))(),
    ObjectNToNvoid: () => (T$.ObjectNToNvoid = dart.constFn(dart.nullable(T$.ObjectNTovoid())))(),
    __Tovoid: () => (T$.__Tovoid = dart.constFn(dart.fnType(dart.void, [], {noStopwatch: T$.boolN(), print: T$.ObjectNToNvoid()}, {})))(),
    ObjectNToString: () => (T$.ObjectNToString = dart.constFn(dart.fnType(core.String, [T$.ObjectN()])))(),
    VoidToString: () => (T$.VoidToString = dart.constFn(dart.fnType(core.String, [])))(),
    VoidToDatabaseFactory: () => (T$.VoidToDatabaseFactory = dart.constFn(dart.fnType(sqlite_api$.DatabaseFactory, [])))(),
    CompleterOfvoid: () => (T$.CompleterOfvoid = dart.constFn(async.Completer$(dart.void)))(),
    JSArrayOfBasicLock: () => (T$.JSArrayOfBasicLock = dart.constFn(_interceptors.JSArray$(basic_lock.BasicLock)))(),
    LinkedMapOfObjectN$ObjectN: () => (T$.LinkedMapOfObjectN$ObjectN = dart.constFn(_js_helper.LinkedMap$(T$.ObjectN(), T$.ObjectN())))(),
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    JSArrayOf_QueuedHandler: () => (T$.JSArrayOf_QueuedHandler = dart.constFn(_interceptors.JSArray$(sqflite_ffi_impl._QueuedHandler)))(),
    IdentityMapOfint$_SqfliteFfiCursorInfo: () => (T$.IdentityMapOfint$_SqfliteFfiCursorInfo = dart.constFn(_js_helper.IdentityMap$(core.int, sqflite_ffi_impl._SqfliteFfiCursorInfo)))(),
    FutureOfintN: () => (T$.FutureOfintN = dart.constFn(async.Future$(T$.intN())))(),
    VoidToFutureOfintN: () => (T$.VoidToFutureOfintN = dart.constFn(dart.fnType(T$.FutureOfintN(), [])))(),
    FutureOfObjectN: () => (T$.FutureOfObjectN = dart.constFn(async.Future$(T$.ObjectN())))(),
    VoidToFutureOfObjectN: () => (T$.VoidToFutureOfObjectN = dart.constFn(dart.fnType(T$.FutureOfObjectN(), [])))(),
    JSArrayOfListOfObjectN: () => (T$.JSArrayOfListOfObjectN = dart.constFn(_interceptors.JSArray$(T$.ListOfObjectN())))(),
    VoidToFuture: () => (T$.VoidToFuture = dart.constFn(dart.fnType(async.Future, [])))(),
    JSArrayOfMapOfString$ObjectN: () => (T$.JSArrayOfMapOfString$ObjectN = dart.constFn(_interceptors.JSArray$(T$.MapOfString$ObjectN())))(),
    SqfliteFfiExceptionToMapOfString$ObjectN: () => (T$.SqfliteFfiExceptionToMapOfString$ObjectN = dart.constFn(dart.fnType(T$.MapOfString$ObjectN(), [sqflite_ffi_exception.SqfliteFfiException])))(),
    dynamicTovoid: () => (T$.dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))(),
    dynamicToSqfliteFfiException: () => (T$.dynamicToSqfliteFfiException = dart.constFn(dart.fnType(sqflite_ffi_exception.SqfliteFfiException, [dart.dynamic])))(),
    dynamicAnddynamicTovoid: () => (T$.dynamicAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic], [dart.dynamic])))(),
    SqfliteFfiDatabaseToFuture: () => (T$.SqfliteFfiDatabaseToFuture = dart.constFn(dart.fnType(async.Future, [sqflite_ffi_impl.SqfliteFfiDatabase])))(),
    FnToFuture: () => (T$.FnToFuture = dart.constFn(dart.fnType(async.Future, [T$.SqfliteFfiDatabaseToFuture()])))(),
    FnToFuture$1: () => (T$.FnToFuture$1 = dart.constFn(dart.fnType(async.Future, [T$.VoidToFuture()])))(),
    intToMap: () => (T$.intToMap = dart.constFn(dart.fnType(core.Map, [core.int])))(),
    FutureOfMap: () => (T$.FutureOfMap = dart.constFn(async.Future$(core.Map)))(),
    VoidToFutureOfMap: () => (T$.VoidToFutureOfMap = dart.constFn(dart.fnType(T$.FutureOfMap(), [])))(),
    VoidToSqfliteFfiDatabase: () => (T$.VoidToSqfliteFfiDatabase = dart.constFn(dart.fnType(sqflite_ffi_impl.SqfliteFfiDatabase, [])))(),
    SqfliteFfiDatabaseN: () => (T$.SqfliteFfiDatabaseN = dart.constFn(dart.nullable(sqflite_ffi_impl.SqfliteFfiDatabase)))(),
    VoidToSqfliteFfiDatabaseN: () => (T$.VoidToSqfliteFfiDatabaseN = dart.constFn(dart.fnType(T$.SqfliteFfiDatabaseN(), [])))(),
    StringToTN: () => (T$.StringToTN = dart.constFn(dart.gFnType(T => {
      var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
      return [__t$TN(), [core.String]];
    }, T => {
      var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
      return [T$.ObjectN()];
    })))(),
    VoidToboolN: () => (T$.VoidToboolN = dart.constFn(dart.fnType(T$.boolN(), [])))(),
    VoidToStringN: () => (T$.VoidToStringN = dart.constFn(dart.fnType(T$.StringN(), [])))(),
    StringTobool: () => (T$.StringTobool = dart.constFn(dart.fnType(core.bool, [core.String])))(),
    VoidToListNOfObjectN: () => (T$.VoidToListNOfObjectN = dart.constFn(dart.fnType(T$.ListNOfObjectN(), [])))(),
    JSArrayOfSqfliteFfiOperation: () => (T$.JSArrayOfSqfliteFfiOperation = dart.constFn(_interceptors.JSArray$(sqflite_ffi_impl.SqfliteFfiOperation)))(),
    MapTovoid: () => (T$.MapTovoid = dart.constFn(dart.fnType(dart.void, [core.Map])))(),
    ListOfSqfliteFfiOperation: () => (T$.ListOfSqfliteFfiOperation = dart.constFn(core.List$(sqflite_ffi_impl.SqfliteFfiOperation)))(),
    VoidToListOfSqfliteFfiOperation: () => (T$.VoidToListOfSqfliteFfiOperation = dart.constFn(dart.fnType(T$.ListOfSqfliteFfiOperation(), [])))(),
    MapNOfString$ObjectN: () => (T$.MapNOfString$ObjectN = dart.constFn(dart.nullable(T$.MapOfString$ObjectN())))(),
    SqliteException__ToSqfliteFfiException: () => (T$.SqliteException__ToSqfliteFfiException = dart.constFn(dart.fnType(sqflite_ffi_exception.SqfliteFfiException, [exception$.SqliteException], {code: T$.StringN(), details: T$.MapNOfString$ObjectN()}, {})))(),
    SqfliteFfiDatabaseToFutureOfObjectN: () => (T$.SqfliteFfiDatabaseToFutureOfObjectN = dart.constFn(dart.fnType(T$.FutureOfObjectN(), [sqflite_ffi_impl.SqfliteFfiDatabase])))(),
    SqfliteFfiDatabaseToFutureOfintN: () => (T$.SqfliteFfiDatabaseToFutureOfintN = dart.constFn(dart.fnType(T$.FutureOfintN(), [sqflite_ffi_impl.SqfliteFfiDatabase])))(),
    SqfliteFfiDatabaseToFutureOfint: () => (T$.SqfliteFfiDatabaseToFutureOfint = dart.constFn(dart.fnType(T$.FutureOfint(), [sqflite_ffi_impl.SqfliteFfiDatabase])))(),
    VoidToFutureOfbool: () => (T$.VoidToFutureOfbool = dart.constFn(dart.fnType(T$.FutureOfbool(), [])))(),
    IdentityMapOfint$SqfliteFfiDatabase: () => (T$.IdentityMapOfint$SqfliteFfiDatabase = dart.constFn(_js_helper.IdentityMap$(core.int, sqflite_ffi_impl.SqfliteFfiDatabase)))(),
    IdentityMapOfStringN$SqfliteFfiDatabase: () => (T$.IdentityMapOfStringN$SqfliteFfiDatabase = dart.constFn(_js_helper.IdentityMap$(T$.StringN(), sqflite_ffi_impl.SqfliteFfiDatabase)))(),
    MapOfString$dynamic: () => (T$.MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))(),
    IdentityMapOfStringN$MapOfString$dynamic: () => (T$.IdentityMapOfStringN$MapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(T$.StringN(), T$.MapOfString$dynamic())))(),
    IdentityMapOfString$dynamic: () => (T$.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    VoidToMapOfString$dynamic: () => (T$.VoidToMapOfString$dynamic = dart.constFn(dart.fnType(T$.MapOfString$dynamic(), [])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T$.VoidTovoid());
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[3] || CT.C3
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[2] || CT.C2,
        [MethodChannel_name]: "com.tekartik.sqflite"
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 10000000
      });
    },
    get C5() {
      return C[5] = dart.fn(sqlite_api$.__onDatabaseDowngradeDelete, T$.DatabaseAndintAndintToFutureOfvoid());
    },
    get C6() {
      return C[6] = dart.fn(utils$0._lockWarningCallbackDefault, T$.VoidTovoid());
    },
    get C7() {
      return C[7] = dart.const(new _js_helper.PrivateSymbol.new('_#OpenDatabaseOptions#singleInstance', __OpenDatabaseOptions_singleInstance$));
    },
    get C8() {
      return C[8] = dart.const(new _js_helper.PrivateSymbol.new('_#OpenDatabaseOptions#readOnly', __OpenDatabaseOptions_readOnly$));
    },
    get C9() {
      return C[9] = dart.const(new _js_helper.PrivateSymbol.new('_#OpenDatabaseOptions#singleInstance=', __OpenDatabaseOptions_singleInstance_));
    },
    get C10() {
      return C[10] = dart.const(new _js_helper.PrivateSymbol.new('_#OpenDatabaseOptions#readOnly=', __OpenDatabaseOptions_readOnly_));
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: sql_builder$.ConflictAlgorithm.prototype,
        [_Enum__name]: "rollback",
        [_Enum_index]: 0
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: sql_builder$.ConflictAlgorithm.prototype,
        [_Enum__name]: "abort",
        [_Enum_index]: 1
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: sql_builder$.ConflictAlgorithm.prototype,
        [_Enum__name]: "fail",
        [_Enum_index]: 2
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: sql_builder$.ConflictAlgorithm.prototype,
        [_Enum__name]: "ignore",
        [_Enum_index]: 3
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: sql_builder$.ConflictAlgorithm.prototype,
        [_Enum__name]: "replace",
        [_Enum_index]: 4
      });
    },
    get C11() {
      return C[11] = dart.constList([C[12] || CT.C12, C[13] || CT.C13, C[14] || CT.C14, C[15] || CT.C15, C[16] || CT.C16], sql_builder$.ConflictAlgorithm);
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: sqflite_logger.SqfliteDatabaseFactoryLoggerType.prototype,
        [_Enum__name]: "all",
        [_Enum_index]: 0
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: sqflite_logger.SqfliteDatabaseFactoryLoggerType.prototype,
        [_Enum__name]: "invoke",
        [_Enum_index]: 1
      });
    },
    get C17() {
      return C[17] = dart.constList([C[18] || CT.C18, C[19] || CT.C19], sqflite_logger.SqfliteDatabaseFactoryLoggerType);
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: sql_command.SqliteSqlCommandType.prototype,
        [_Enum__name]: "execute",
        [_Enum_index]: 0
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: sql_command.SqliteSqlCommandType.prototype,
        [_Enum__name]: "insert",
        [_Enum_index]: 1
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: sql_command.SqliteSqlCommandType.prototype,
        [_Enum__name]: "update",
        [_Enum_index]: 2
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: sql_command.SqliteSqlCommandType.prototype,
        [_Enum__name]: "delete",
        [_Enum_index]: 3
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: sql_command.SqliteSqlCommandType.prototype,
        [_Enum__name]: "query",
        [_Enum_index]: 4
      });
    },
    get C25() {
      return C[25] = dart.fn(sqflite_logger._logDefault, T$.SqfliteLoggerEventTovoid());
    },
    get C26() {
      return C[26] = dart.fn(core.print, T$.ObjectNTovoid());
    },
    get C27() {
      return C[27] = dart.constList([C[20] || CT.C20, C[21] || CT.C21, C[22] || CT.C22, C[23] || CT.C23, C[24] || CT.C24], sql_command.SqliteSqlCommandType);
    },
    get C28() {
      return C[28] = dart.constList([], T$.ObjectN());
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: database.SqliteUpdateKind.prototype,
        [_Enum__name]: "insert",
        [_Enum_index]: 0
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: database.SqliteUpdateKind.prototype,
        [_Enum__name]: "update",
        [_Enum_index]: 1
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: database.SqliteUpdateKind.prototype,
        [_Enum__name]: "delete",
        [_Enum_index]: 2
      });
    },
    get C29() {
      return C[29] = dart.constList([C[30] || CT.C30, C[31] || CT.C31, C[32] || CT.C32], database.SqliteUpdateKind);
    },
    get C33() {
      return C[33] = dart.constMap(core.String, core.int, []);
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: sqlite3.OpenMode.prototype,
        [_Enum__name]: "readOnly",
        [_Enum_index]: 0
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: sqlite3.OpenMode.prototype,
        [_Enum__name]: "readWrite",
        [_Enum_index]: 1
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: sqlite3.OpenMode.prototype,
        [_Enum__name]: "readWriteCreate",
        [_Enum_index]: 2
      });
    },
    get C34() {
      return C[34] = dart.constList([C[35] || CT.C35, C[36] || CT.C36, C[37] || CT.C37], sqlite3.OpenMode);
    }
  }, false);
  var C = Array(38).fill(void 0);
  var I = [
    "file:///zapp/project/lib/CardTest.dart",
    "package:sqflite/sqflite.dart",
    "package:sqflite_common/src/factory_mixin.dart",
    "package:sqflite/src/factory_impl.dart",
    "package:sqflite/src/sqflite_plugin.dart",
    "package:sqflite_common/src/compat.dart",
    "package:sqflite_common/sqlite_api.dart",
    "package:sqflite_common/src/database.dart",
    "package:sqflite_common/src/database_mixin.dart",
    "package:sqflite_common/src/exception.dart",
    "package:sqflite_common/src/factory.dart",
    "package:sqflite_common/src/mixin/factory.dart",
    "package:sqflite_common/src/open_options.dart",
    "package:sqflite_common/src/transaction.dart",
    "package:sqflite_common/src/sql_builder.dart",
    "package:synchronized/synchronized.dart",
    "package:sqflite_common/src/batch.dart",
    "package:sqflite_common/src/sql_command.dart",
    "package:sqflite_common/src/cursor.dart",
    "package:sqflite_common/src/collection_utils.dart",
    "package:sqflite_common/src/logger/sqflite_logger.dart",
    "package:sqflite_common_ffi/src/method_call.dart",
    "package:synchronized/src/basic_lock.dart",
    "package:synchronized/src/reentrant_lock.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common-2.4.5+1/lib/src/env_utils.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common_ffi-2.2.5/lib/src/env_utils.dart",
    "package:sqflite_common_ffi/src/sqflite_ffi_exception.dart",
    "package:sqflite_common_ffi/src/sqflite_ffi_impl.dart",
    "package:sqflite_common_ffi/src/database_tracker_web.dart",
    "package:sqlite3/src/constants.dart",
    "package:sqlite3/src/database.dart",
    "package:sqlite3/src/exception.dart",
    "package:sqlite3/src/functions.dart",
    "package:sqlite3/src/result_set.dart",
    "package:sqlite3/src/sqlite3.dart",
    "package:sqlite3/src/statement.dart"
  ];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T$.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T$.ListOfStringTodynamic().as(C[0] || CT.C0)(T$.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T$.dynamicToNull()));
      }
    }, T$.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T$.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T$.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T$.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T$.VoidToNull())});
    });
  };
  main.main = function main$0() {
    binding.runApp(new app.MaterialApp.new({home: new container.Container.new({child: new material.Material.new({child: new basic.Center.new({child: new CardTest.Home.new()})})})}));
  };
  web_plugin_registrant.registerPlugins = function registerPlugins() {
  };
  CardTest.Home = class Home extends framework.StatelessWidget {
    build(context) {
      return new basic.Column.new({children: (() => {
          let t0 = T$.JSArrayOfWidget().of([]);
          for (let k = 0; k < 5; k = k + 1)
            t0.push(new card.Card.new({child: new list_tile.ListTile.new({title: new text.Text.new("test button no. " + dart.str(k)), onTap: dart.fn(() => {
                  CardTest.testing(k);
                }, T$.VoidTovoid())})}));
          return t0;
        })()});
    }
    static ['_#new#tearOff']() {
      return new CardTest.Home.new();
    }
  };
  (CardTest.Home.new = function() {
    CardTest.Home.__proto__.new.call(this);
    ;
  }).prototype = CardTest.Home.prototype;
  dart.addTypeTests(CardTest.Home);
  dart.addTypeCaches(CardTest.Home);
  dart.setMethodSignature(CardTest.Home, () => ({
    __proto__: dart.getMethods(CardTest.Home.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(CardTest.Home, I[0]);
  CardTest.testing = function testing(x) {
    if (x === 0) {
      DBTest.monsters();
    }
    if (x === 1) {
      core.print("sea bunny");
    }
    if (x === 2) {
      core.print("bat");
    }
    if (x === 3) {
      core.print("snake");
    }
    if (x === 4) {
      core.print("idk");
    }
  };
  DBTest.monsters = function monsters() {
    return async.async(core.String, function* monsters() {
      sqflite_ffi_web.sqfliteFfiInit();
      sqflite_database_factory.databaseFactory = sqflite_ffi_web.databaseFactoryFfi;
      let db = (yield sqflite$.openDatabase("CodexTest.db"));
      core.print(db.rawQuery("Select * FROM firstgen"));
      return "finished";
    });
  };
  sqflite.Sqflite = class Sqflite extends core.Object {
    static setDebugModeOn(on = true) {
      return async.async(dart.void, function* setDebugModeOn() {
        yield sqflite_impl.invokeMethod(dart.dynamic, "debugMode", on);
      });
    }
    static getDebugModeOn() {
      return async.async(core.bool, function* getDebugModeOn() {
        return utils$0.debugModeOn;
      });
    }
    static devSetDebugModeOn(on = true) {
      utils$0.debugModeOn = on;
      return sqflite.Sqflite.setDebugModeOn(on);
    }
    static devSetOptions(options) {
      return async.async(dart.void, function* devSetOptions() {
        yield sqflite_impl.invokeMethod(dart.dynamic, "options", options.toMap());
      });
    }
    static devInvokeMethod(method, $arguments = null) {
      return async.async(dart.void, function* devInvokeMethod() {
        yield sqflite_impl.invokeMethod(dart.dynamic, method, $arguments);
      });
    }
    static firstIntValue(list) {
      return utils$1.firstIntValue(list);
    }
    static hex(bytes) {
      return utils$1.hex(bytes);
    }
    static setLockWarningInfo(opts) {
      let duration = opts && 'duration' in opts ? opts.duration : null;
      let callback = opts && 'callback' in opts ? opts.callback : null;
      utils$1.setLockWarningInfo({duration: dart.nullCheck(duration), callback: dart.nullCheck(callback)});
    }
    static ['_#new#tearOff']() {
      return new sqflite.Sqflite.new();
    }
  };
  (sqflite.Sqflite.new = function() {
    ;
  }).prototype = sqflite.Sqflite.prototype;
  dart.addTypeTests(sqflite.Sqflite);
  dart.addTypeCaches(sqflite.Sqflite);
  dart.setStaticMethodSignature(sqflite.Sqflite, () => ['setDebugModeOn', 'getDebugModeOn', 'devSetDebugModeOn', 'devSetOptions', 'devInvokeMethod', 'firstIntValue', 'hex', 'setLockWarningInfo']);
  dart.setLibraryUri(sqflite.Sqflite, I[1]);
  sqflite['SqfliteDatabaseAndroidExt|androidSetLocale'] = function SqfliteDatabaseAndroidExt$124androidSetLocale($this, languageTag) {
    return sqflite_android['SqfliteDatabaseAndroidExtImpl|androidSetLocale']($this, languageTag);
  };
  sqflite['SqfliteDatabaseAndroidExt|get#androidSetLocale'] = function SqfliteDatabaseAndroidExt$124get$35androidSetLocale($this) {
    return dart.fn(languageTag => sqflite['SqfliteDatabaseAndroidExt|androidSetLocale']($this, languageTag), T$.StringToFutureOfvoid());
  };
  sqflite_android['SqfliteDatabaseAndroidExtImpl|get#_mixin'] = function SqfliteDatabaseAndroidExtImpl$124get$35_mixin($this) {
    return database_mixin.SqfliteDatabaseMixin.as($this);
  };
  sqflite_android['SqfliteDatabaseAndroidExtImpl|androidSetLocale'] = function SqfliteDatabaseAndroidExtImpl$124androidSetLocale($this, languageTag) {
    return async.async(dart.void, function* SqfliteDatabaseAndroidExtImpl$124androidSetLocale() {
      yield sqflite_android['SqfliteDatabaseAndroidExtImpl|get#_mixin']($this).safeInvokeMethod(dart.void, "androidSetLocale", new (T$.IdentityMapOfString$ObjectN()).from(["id", sqflite_android['SqfliteDatabaseAndroidExtImpl|get#_mixin']($this).id, "locale", languageTag]));
    });
  };
  sqflite_android['SqfliteDatabaseAndroidExtImpl|get#androidSetLocale'] = function SqfliteDatabaseAndroidExtImpl$124get$35androidSetLocale($this) {
    return dart.fn(languageTag => sqflite_android['SqfliteDatabaseAndroidExtImpl|androidSetLocale']($this, languageTag), T$.StringToFutureOfvoid());
  };
  dart.defineLazy(sqflite_android, {
    /*sqflite_android.methodAndroidSetLocale*/get methodAndroidSetLocale() {
      return "androidSetLocale";
    },
    /*sqflite_android.paramLocale*/get paramLocale() {
      return "locale";
    }
  }, false);
  sqflite_impl.invokeMethod = function invokeMethod(T, method, $arguments = null) {
    return async.async(T, function* invokeMethod() {
      return T.as(yield sqflite_impl.channel.invokeMethod(T, method, $arguments));
    });
  };
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  dart.defineLazy(sqflite_impl, {
    /*sqflite_impl.channelName*/get channelName() {
      return "com.tekartik.sqflite";
    },
    /*sqflite_impl.channel*/get channel() {
      return C[1] || CT.C1;
    },
    /*sqflite_impl.supportsConcurrency*/get supportsConcurrency() {
      return false;
    }
  }, false);
  sqflite$.openDatabase = function openDatabase(path, opts) {
    let version = opts && 'version' in opts ? opts.version : null;
    let onConfigure = opts && 'onConfigure' in opts ? opts.onConfigure : null;
    let onCreate = opts && 'onCreate' in opts ? opts.onCreate : null;
    let onUpgrade = opts && 'onUpgrade' in opts ? opts.onUpgrade : null;
    let onDowngrade = opts && 'onDowngrade' in opts ? opts.onDowngrade : null;
    let onOpen = opts && 'onOpen' in opts ? opts.onOpen : null;
    let readOnly = opts && 'readOnly' in opts ? opts.readOnly : false;
    let singleInstance = opts && 'singleInstance' in opts ? opts.singleInstance : true;
    let options = sqlite_api$.OpenDatabaseOptions.new({version: version, onConfigure: onConfigure, onCreate: onCreate, onUpgrade: onUpgrade, onDowngrade: onDowngrade, onOpen: onOpen, readOnly: readOnly, singleInstance: singleInstance});
    return sqflite_database_factory.databaseFactory.openDatabase(path, {options: options});
  };
  sqflite$.openReadOnlyDatabase = function openReadOnlyDatabase(path, opts) {
    let singleInstance = opts && 'singleInstance' in opts ? opts.singleInstance : true;
    return sqflite$.openDatabase(path, {readOnly: true, singleInstance: singleInstance});
  };
  sqflite$.getDatabasesPath = function getDatabasesPath() {
    return sqflite_database_factory.databaseFactory.getDatabasesPath();
  };
  sqflite$.deleteDatabase = function deleteDatabase(path) {
    return sqflite_database_factory.databaseFactory.deleteDatabase(path);
  };
  sqflite$.databaseExists = function databaseExists(path) {
    return sqflite_database_factory.databaseFactory.databaseExists(path);
  };
  var _invokeMethodWithLog = dart.privateName(factory_impl, "_invokeMethodWithLog");
  var databaseOpenHelpers = dart.privateName(factory_mixin, "SqfliteDatabaseFactoryMixin.databaseOpenHelpers");
  var tag = dart.privateName(factory_mixin, "SqfliteDatabaseFactoryMixin.tag");
  var _databasesPath = dart.privateName(factory_mixin, "SqfliteDatabaseFactoryMixin._databasesPath");
  var _kIsWeb = dart.privateName(factory_mixin, "SqfliteDatabaseFactoryMixin._kIsWeb");
  var _databasesPath$ = dart.privateName(factory_mixin, "_databasesPath");
  var _kIsWeb$ = dart.privateName(factory_mixin, "_kIsWeb");
  var _getDatabaseOpenLock = dart.privateName(factory_mixin, "_getDatabaseOpenLock");
  factory_mixin.SqfliteDatabaseFactoryMixin = class SqfliteDatabaseFactoryMixin extends core.Object {
    static isInMemoryDatabasePath(path) {
      return path_utils.isInMemoryDatabasePath(path);
    }
  };
  factory_mixin.SqfliteDatabaseFactoryMixin[dart.mixinOn] = Object => {
    class SqfliteDatabaseFactoryMixin extends Object {
      get databaseOpenHelpers() {
        return this[databaseOpenHelpers];
      }
      set databaseOpenHelpers(value) {
        this[databaseOpenHelpers] = value;
      }
      get tag() {
        return this[tag];
      }
      set tag(value) {
        this[tag] = value;
      }
      get [_databasesPath$]() {
        return this[_databasesPath];
      }
      set [_databasesPath$](value) {
        this[_databasesPath] = value;
      }
      get [_kIsWeb$]() {
        return this[_kIsWeb];
      }
      set [_kIsWeb$](value) {
        super[_kIsWeb$] = value;
      }
      wrapDatabaseException(T, action) {
        return action();
      }
      safeInvokeMethod(T, method, $arguments = null) {
        return this.wrapDatabaseException(T, dart.fn(() => this.invokeMethod(T, method, $arguments), dart.fnType(async.Future$(T), [])));
      }
      [_getDatabaseOpenLock](path) {
        return factory_mixin._NamedLock.new(path).lock;
      }
      newDatabase(openHelper, path) {
        return new database_mixin.SqfliteDatabaseBase.new(openHelper, path);
      }
      removeDatabaseOpenHelper(path) {
        this.databaseOpenHelpers[$remove](path);
      }
      closeDatabase(database) {
        let lock = this[_getDatabaseOpenLock](database.path);
        return lock.synchronized(dart.void, dart.fn(() => async.async(dart.void, (function*() {
          let t6;
          yield dart.nullCheck(database_mixin.SqfliteDatabaseMixin.as(database).openHelper).closeDatabase(database);
          if ((t6 = database.options, t6 == null ? null : t6.singleInstance) !== false) {
            this.removeDatabaseOpenHelper(database.path);
          }
        }).bind(this)), T$.VoidToFutureOfvoid()));
      }
      openDatabase(path, opts) {
        let options = opts && 'options' in opts ? opts.options : null;
        return async.async(sqlite_api$.Database, (function* openDatabase() {
          path = (yield this.fixPath(path));
          let lock = this[_getDatabaseOpenLock](path);
          return lock.synchronized(sqlite_api$.Database, dart.fn(() => async.async(database$.SqfliteDatabase, (function*() {
            let t6;
            options == null ? options = new open_options.SqfliteOpenDatabaseOptions.new() : null;
            if ((t6 = options, t6 == null ? null : t6.singleInstance) !== false) {
              const getExistingDatabaseOpenHelper = path => {
                return this.databaseOpenHelpers[$_get](path);
              };
              dart.fn(getExistingDatabaseOpenHelper, T$.StringToSqfliteDatabaseOpenHelperN());
              const setDatabaseOpenHelper = helper => {
                if (helper == null) {
                  this.databaseOpenHelpers[$remove](path);
                } else {
                  this.databaseOpenHelpers[$_set](path, helper);
                }
              };
              dart.fn(setDatabaseOpenHelper, T$.SqfliteDatabaseOpenHelperNTovoid());
              let databaseOpenHelper = getExistingDatabaseOpenHelper(path);
              let firstOpen = databaseOpenHelper == null;
              if (firstOpen) {
                databaseOpenHelper = new database$.SqfliteDatabaseOpenHelper.new(this, path, options);
                setDatabaseOpenHelper(databaseOpenHelper);
              }
              try {
                return yield databaseOpenHelper.openDatabase();
              } catch (e$) {
                let e = dart.getThrown(e$);
                if (core.Object.is(e)) {
                  if (firstOpen) {
                    this.removeDatabaseOpenHelper(path);
                  }
                  dart.rethrow(e$);
                } else
                  throw e$;
              }
            } else {
              let databaseOpenHelper = new database$.SqfliteDatabaseOpenHelper.new(this, path, options);
              return yield databaseOpenHelper.openDatabase();
            }
          }).bind(this)), T$.VoidToFutureOfSqfliteDatabase()));
        }).bind(this));
      }
      deleteDatabase(path) {
        return async.async(dart.void, (function* deleteDatabase() {
          path = (yield this.fixPath(path));
          let lock = this[_getDatabaseOpenLock](path);
          return lock.synchronized(dart.void, dart.fn(() => async.async(dart.void, (function*() {
            this.removeDatabaseOpenHelper(path);
            return this.safeInvokeMethod(dart.void, "deleteDatabase", new (T$.IdentityMapOfString$ObjectN()).from(["path", path]));
          }).bind(this)), T$.VoidToFutureOfvoid()));
        }).bind(this));
      }
      databaseExists(path) {
        return async.async(core.bool, (function* databaseExists() {
          path = (yield this.fixPath(path));
          return this.safeInvokeMethod(core.bool, "databaseExists", new (T$.IdentityMapOfString$ObjectN()).from(["path", path]));
        }).bind(this));
      }
      getDatabasesPath() {
        return async.async(core.String, (function* getDatabasesPath() {
          if (this[_databasesPath$] == null) {
            let path = (yield this.safeInvokeMethod(T$.StringN(), "getDatabasesPath"));
            if (path == null) {
              dart.throw(new exception.SqfliteDatabaseException.new("getDatabasesPath is null", null));
            }
            this[_databasesPath$] = path;
          }
          return dart.nullCheck(this[_databasesPath$]);
        }).bind(this));
      }
      setDatabasesPath(path) {
        return async.async(dart.void, (function* setDatabasesPath() {
          this.setDatabasesPathOrNull(path);
        }).bind(this));
      }
      setDatabasesPathOrNull(path) {
        this[_databasesPath$] = path;
      }
      fixPath(path) {
        return async.async(core.String, (function* fixPath() {
          if (path_utils.isInMemoryDatabasePath(path)) {
            return ":memory:";
          } else if (this[_kIsWeb$] || path_utils.isFileUriDatabasePath(path)) {
          } else {
            if (path$.isRelative(path)) {
              path = path$.join(yield this.getDatabasesPath(), path);
            }
            path = path$.absolute(path$.normalize(path));
          }
          return path;
        }).bind(this));
      }
      getDebugInfo() {
        return async.async(factory_mixin.SqfliteDebugInfo, (function* getDebugInfo() {
          let info = new factory_mixin.SqfliteDebugInfo.new();
          let map = (yield this.safeInvokeMethod(core.Map, "debug", new (T$.IdentityMapOfString$ObjectN()).from(["cmd", "get"])));
          let databasesMap = map[$_get]("databases");
          if (core.Map.is(databasesMap)) {
            info.databases = databasesMap[$map](core.String, factory_mixin.SqfliteDatabaseDebugInfo, dart.fn((id, info) => {
              let dbInfo = new factory_mixin.SqfliteDatabaseDebugInfo.new();
              let databaseId = dart.toString(id);
              if (core.Map.is(info)) {
                dbInfo.fromMap(info);
              }
              return new (T$.MapEntryOfString$SqfliteDatabaseDebugInfo()).__(databaseId, dbInfo);
            }, T$.dynamicAnddynamicToMapEntryOfString$SqfliteDatabaseDebugInfo()));
          }
          info.logLevel = T$.intN().as(map[$_get]("logLevel"));
          return info;
        }).bind(this));
      }
      toString() {
        let t7;
        return "SqfliteDatabaseFactory(" + dart.str((t7 = this.tag, t7 == null ? "sqflite" : t7)) + ")";
      }
    }
    dart.defineExtensionMethods(SqfliteDatabaseFactoryMixin, ['toString']);
    return SqfliteDatabaseFactoryMixin;
  };
  (factory_mixin.SqfliteDatabaseFactoryMixin[dart.mixinNew] = function() {
    this[databaseOpenHelpers] = new (T$.IdentityMapOfString$SqfliteDatabaseOpenHelper()).new();
    this[tag] = null;
    this[_databasesPath] = null;
    this[_kIsWeb] = 0 === 0;
  }).prototype = factory_mixin.SqfliteDatabaseFactoryMixin.prototype;
  dart.addTypeTests(factory_mixin.SqfliteDatabaseFactoryMixin);
  dart.addTypeCaches(factory_mixin.SqfliteDatabaseFactoryMixin);
  factory_mixin.SqfliteDatabaseFactoryMixin[dart.implements] = () => [factory$.SqfliteDatabaseFactory, factory.SqfliteInvokeHandler, core.Object];
  dart.setMethodSignature(factory_mixin.SqfliteDatabaseFactoryMixin, () => ({
    __proto__: dart.getMethods(factory_mixin.SqfliteDatabaseFactoryMixin.__proto__),
    wrapDatabaseException: dart.gFnType(T => [async.Future$(T), [dart.fnType(async.Future$(T), [])]], T => [dart.nullable(core.Object)]),
    safeInvokeMethod: dart.gFnType(T => [async.Future$(T), [core.String], [dart.nullable(core.Object)]], T => [dart.nullable(core.Object)]),
    [_getDatabaseOpenLock]: dart.fnType(synchronized.Lock, [core.String]),
    newDatabase: dart.fnType(database$.SqfliteDatabase, [database$.SqfliteDatabaseOpenHelper, core.String]),
    removeDatabaseOpenHelper: dart.fnType(dart.void, [core.String]),
    closeDatabase: dart.fnType(async.Future$(dart.void), [database$.SqfliteDatabase]),
    openDatabase: dart.fnType(async.Future$(sqlite_api$.Database), [core.String], {options: dart.nullable(sqlite_api$.OpenDatabaseOptions)}, {}),
    deleteDatabase: dart.fnType(async.Future$(dart.void), [core.String]),
    databaseExists: dart.fnType(async.Future$(core.bool), [core.String]),
    getDatabasesPath: dart.fnType(async.Future$(core.String), []),
    setDatabasesPath: dart.fnType(async.Future$(dart.void), [dart.nullable(core.String)]),
    setDatabasesPathOrNull: dart.fnType(dart.void, [dart.nullable(core.String)]),
    fixPath: dart.fnType(async.Future$(core.String), [core.String]),
    getDebugInfo: dart.fnType(async.Future$(factory_mixin.SqfliteDebugInfo), [])
  }));
  dart.setStaticMethodSignature(factory_mixin.SqfliteDatabaseFactoryMixin, () => ['isInMemoryDatabasePath']);
  dart.setLibraryUri(factory_mixin.SqfliteDatabaseFactoryMixin, I[2]);
  dart.setFieldSignature(factory_mixin.SqfliteDatabaseFactoryMixin, () => ({
    __proto__: dart.getFields(factory_mixin.SqfliteDatabaseFactoryMixin.__proto__),
    databaseOpenHelpers: dart.fieldType(core.Map$(core.String, database$.SqfliteDatabaseOpenHelper)),
    tag: dart.fieldType(dart.nullable(core.String)),
    [_databasesPath$]: dart.fieldType(dart.nullable(core.String)),
    [_kIsWeb$]: dart.finalFieldType(core.bool)
  }));
  const Object_SqfliteDatabaseFactoryMixin$36 = class Object_SqfliteDatabaseFactoryMixin extends core.Object {};
  (Object_SqfliteDatabaseFactoryMixin$36.new = function() {
    factory_mixin.SqfliteDatabaseFactoryMixin[dart.mixinNew].call(this);
  }).prototype = Object_SqfliteDatabaseFactoryMixin$36.prototype;
  dart.applyMixin(Object_SqfliteDatabaseFactoryMixin$36, factory_mixin.SqfliteDatabaseFactoryMixin);
  factory_impl.SqfliteDatabaseFactoryImpl = class SqfliteDatabaseFactoryImpl extends Object_SqfliteDatabaseFactoryMixin$36 {
    wrapDatabaseException(T, action) {
      return exception_impl.wrapDatabaseException(T, action);
    }
    invokeMethod(T, method, $arguments = null) {
      return sqflite_impl.invokeMethod(T, method, $arguments);
    }
    [_invokeMethodWithLog](T, method, $arguments = null) {
      return async.async(T, function* _invokeMethodWithLog() {
        core.print("-> " + method + " " + dart.str($arguments));
        let result = (yield sqflite_impl.invokeMethod(T, method, $arguments));
        core.print("<- " + dart.str(result));
        return result;
      });
    }
    static ['_#new#tearOff']() {
      return new factory_impl.SqfliteDatabaseFactoryImpl.new();
    }
  };
  (factory_impl.SqfliteDatabaseFactoryImpl.new = function() {
    factory_impl.SqfliteDatabaseFactoryImpl.__proto__.new.call(this);
    ;
  }).prototype = factory_impl.SqfliteDatabaseFactoryImpl.prototype;
  dart.addTypeTests(factory_impl.SqfliteDatabaseFactoryImpl);
  dart.addTypeCaches(factory_impl.SqfliteDatabaseFactoryImpl);
  dart.setMethodSignature(factory_impl.SqfliteDatabaseFactoryImpl, () => ({
    __proto__: dart.getMethods(factory_impl.SqfliteDatabaseFactoryImpl.__proto__),
    wrapDatabaseException: dart.gFnType(T => [async.Future$(T), [dart.fnType(async.Future$(T), [])]], T => [dart.nullable(core.Object)]),
    invokeMethod: dart.gFnType(T => [async.Future$(T), [core.String], [dart.nullable(core.Object)]], T => [dart.nullable(core.Object)]),
    [_invokeMethodWithLog]: dart.gFnType(T => [async.Future$(T), [core.String], [dart.nullable(core.Object)]], T => [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(factory_impl.SqfliteDatabaseFactoryImpl, I[3]);
  dart.setStaticFieldSignature(factory_impl.SqfliteDatabaseFactoryImpl, () => ['_debugInternals']);
  dart.defineLazy(factory_impl.SqfliteDatabaseFactoryImpl, {
    /*factory_impl.SqfliteDatabaseFactoryImpl._debugInternals*/get _debugInternals() {
      return false;
    }
  }, false);
  dart.copyProperties(factory_impl, {
    get sqfliteDatabaseFactory() {
      let t7;
      return factory$.SqfliteDatabaseFactory.as((t7 = sqflite_database_factory.databaseFactoryOrNull, t7 == null ? factory_impl.databaseFactorySqflitePlugin : t7));
    },
    get databaseFactorySqflitePlugin() {
      return factory_impl._databaseFactorySqflitePlugin;
    },
    set sqfliteDatabaseFactory(databaseFactory) {
      return sqflite_database_factory.databaseFactory = databaseFactory;
    }
  });
  dart.defineLazy(factory_impl, {
    /*factory_impl._databaseFactorySqflitePlugin*/get _databaseFactorySqflitePlugin() {
      return new factory_impl.SqfliteDatabaseFactoryImpl.new();
    },
    /*factory_impl.sqfliteDatabaseFactoryDefault*/get sqfliteDatabaseFactoryDefault() {
      return factory_impl._databaseFactorySqflitePlugin;
    }
  }, false);
  sqflite_plugin.SqflitePlugin = class SqflitePlugin extends core.Object {
    static registerWith() {
      sqflite_database_factory.databaseFactoryOrNull == null ? sqflite_database_factory.databaseFactoryOrNull = factory_impl.sqfliteDatabaseFactoryDefault : null;
    }
    static ['_#new#tearOff']() {
      return new sqflite_plugin.SqflitePlugin.new();
    }
  };
  (sqflite_plugin.SqflitePlugin.new = function() {
    ;
  }).prototype = sqflite_plugin.SqflitePlugin.prototype;
  dart.addTypeTests(sqflite_plugin.SqflitePlugin);
  dart.addTypeCaches(sqflite_plugin.SqflitePlugin);
  dart.setStaticMethodSignature(sqflite_plugin.SqflitePlugin, () => ['registerWith']);
  dart.setLibraryUri(sqflite_plugin.SqflitePlugin, I[4]);
  var queryAsMapList = dart.privateName(compat$, "SqfliteOptions.queryAsMapList");
  var androidThreadPriority = dart.privateName(compat$, "SqfliteOptions.androidThreadPriority");
  var androidThreadCount = dart.privateName(compat$, "SqfliteOptions.androidThreadCount");
  var logLevel$ = dart.privateName(compat$, "SqfliteOptions.logLevel");
  compat$.SqfliteOptions = class SqfliteOptions extends core.Object {
    get queryAsMapList() {
      return this[queryAsMapList];
    }
    set queryAsMapList(value) {
      this[queryAsMapList] = value;
    }
    get androidThreadPriority() {
      return this[androidThreadPriority];
    }
    set androidThreadPriority(value) {
      this[androidThreadPriority] = value;
    }
    get androidThreadCount() {
      return this[androidThreadCount];
    }
    set androidThreadCount(value) {
      this[androidThreadCount] = value;
    }
    get logLevel() {
      return this[logLevel$];
    }
    set logLevel(value) {
      this[logLevel$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let logLevel = opts && 'logLevel' in opts ? opts.logLevel : null;
      return new compat$.SqfliteOptions.new({logLevel: logLevel});
    }
    toMap() {
      let map = new (T$.IdentityMapOfString$ObjectN()).new();
      if (this.queryAsMapList != null) {
        map[$_set]("queryAsMapList", this.queryAsMapList);
      }
      if (this.androidThreadPriority != null) {
        map[$_set]("androidThreadPriority", this.androidThreadPriority);
      }
      if (this.androidThreadCount != null) {
        map[$_set]("androidThreadCount", this.androidThreadCount);
      }
      if (this.logLevel != null) {
        map[$_set]("logLevel", this.logLevel);
      }
      return map;
    }
    fromMap(map) {
      let queryAsMapList = map[$_get]("queryAsMapList");
      if (typeof queryAsMapList == 'boolean') {
        this.queryAsMapList = queryAsMapList;
      }
      let androidThreadPriority = map[$_get]("androidThreadPriority");
      if (core.int.is(androidThreadPriority)) {
        this.androidThreadPriority = androidThreadPriority;
      }
      let androidThreadCount = map[$_get]("androidThreadCount");
      if (core.int.is(androidThreadCount)) {
        this.androidThreadCount = androidThreadCount;
      }
      let logLevel = map[$_get]("logLevel");
      if (core.int.is(logLevel)) {
        this.logLevel = logLevel;
      }
    }
  };
  (compat$.SqfliteOptions.new = function(opts) {
    let logLevel = opts && 'logLevel' in opts ? opts.logLevel : null;
    this[queryAsMapList] = null;
    this[androidThreadPriority] = null;
    this[androidThreadCount] = null;
    this[logLevel$] = logLevel;
    ;
  }).prototype = compat$.SqfliteOptions.prototype;
  dart.addTypeTests(compat$.SqfliteOptions);
  dart.addTypeCaches(compat$.SqfliteOptions);
  dart.setMethodSignature(compat$.SqfliteOptions, () => ({
    __proto__: dart.getMethods(compat$.SqfliteOptions.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), []),
    fromMap: dart.fnType(dart.void, [core.Map$(core.String, dart.nullable(core.Object))])
  }));
  dart.setLibraryUri(compat$.SqfliteOptions, I[5]);
  dart.setFieldSignature(compat$.SqfliteOptions, () => ({
    __proto__: dart.getFields(compat$.SqfliteOptions.__proto__),
    queryAsMapList: dart.fieldType(dart.nullable(core.bool)),
    androidThreadPriority: dart.fieldType(dart.nullable(core.int)),
    androidThreadCount: dart.fieldType(dart.nullable(core.int)),
    logLevel: dart.fieldType(dart.nullable(core.int))
  }));
  var Duration__duration = dart.privateName(core, "Duration._duration");
  dart.defineLazy(constant$, {
    /*constant$.methodInsert*/get methodInsert() {
      return "insert";
    },
    /*constant$.methodBatch*/get methodBatch() {
      return "batch";
    },
    /*constant$.methodDebug*/get methodDebug() {
      return "debug";
    },
    /*constant$.methodOptions*/get methodOptions() {
      return "options";
    },
    /*constant$.methodCloseDatabase*/get methodCloseDatabase() {
      return "closeDatabase";
    },
    /*constant$.methodOpenDatabase*/get methodOpenDatabase() {
      return "openDatabase";
    },
    /*constant$.methodExecute*/get methodExecute() {
      return "execute";
    },
    /*constant$.methodUpdate*/get methodUpdate() {
      return "update";
    },
    /*constant$.methodQuery*/get methodQuery() {
      return "query";
    },
    /*constant$.methodQueryCursorNext*/get methodQueryCursorNext() {
      return "queryCursorNext";
    },
    /*constant$.methodGetPlatformVersion*/get methodGetPlatformVersion() {
      return "getPlatformVersion";
    },
    /*constant$.methodGetDatabasesPath*/get methodGetDatabasesPath() {
      return "getDatabasesPath";
    },
    /*constant$.methodDatabaseExists*/get methodDatabaseExists() {
      return "databaseExists";
    },
    /*constant$.methodDeleteDatabase*/get methodDeleteDatabase() {
      return "deleteDatabase";
    },
    /*constant$.paramOperations*/get paramOperations() {
      return "operations";
    },
    /*constant$.paramNoResult*/get paramNoResult() {
      return "noResult";
    },
    /*constant$.paramContinueOnError*/get paramContinueOnError() {
      return "continueOnError";
    },
    /*constant$.paramMethod*/get paramMethod() {
      return "method";
    },
    /*constant$.paramResult*/get paramResult() {
      return "result";
    },
    /*constant$.paramError*/get paramError() {
      return "error";
    },
    /*constant$.paramErrorCode*/get paramErrorCode() {
      return "code";
    },
    /*constant$.paramErrorMessage*/get paramErrorMessage() {
      return "message";
    },
    /*constant$.paramErrorResultCode*/get paramErrorResultCode() {
      return "resultCode";
    },
    /*constant$.paramErrorData*/get paramErrorData() {
      return "data";
    },
    /*constant$.paramRecovered*/get paramRecovered() {
      return "recovered";
    },
    /*constant$.paramRecoveredInTransaction*/get paramRecoveredInTransaction() {
      return "recoveredInTransaction";
    },
    /*constant$.paramPath*/get paramPath() {
      return "path";
    },
    /*constant$.paramVersion*/get paramVersion() {
      return "version";
    },
    /*constant$.paramId*/get paramId() {
      return "id";
    },
    /*constant$.paramInTransaction*/get paramInTransaction() {
      return "inTransaction";
    },
    /*constant$.paramTransactionId*/get paramTransactionId() {
      return "transactionId";
    },
    /*constant$.paramTransactionIdValueForce*/get paramTransactionIdValueForce() {
      return -1;
    },
    /*constant$.paramReadOnly*/get paramReadOnly() {
      return "readOnly";
    },
    /*constant$.paramSingleInstance*/get paramSingleInstance() {
      return "singleInstance";
    },
    /*constant$.paramSql*/get paramSql() {
      return "sql";
    },
    /*constant$.paramSqlArguments*/get paramSqlArguments() {
      return "arguments";
    },
    /*constant$.paramCursorId*/get paramCursorId() {
      return "cursorId";
    },
    /*constant$.paramCursorPageSize*/get paramCursorPageSize() {
      return "cursorPageSize";
    },
    /*constant$.paramCursorCancel*/get paramCursorCancel() {
      return "cancel";
    },
    /*constant$.sqliteErrorCode*/get sqliteErrorCode() {
      return "sqlite_error";
    },
    /*constant$.inMemoryDatabasePath*/get inMemoryDatabasePath() {
      return ":memory:";
    },
    /*constant$.lockWarningDurationDefault*/get lockWarningDurationDefault() {
      return C[4] || CT.C4;
    },
    /*constant$.sqfliteLogLevelNone*/get sqfliteLogLevelNone() {
      return 0;
    },
    /*constant$.sqfliteLogLevelSql*/get sqfliteLogLevelSql() {
      return 1;
    },
    /*constant$.sqfliteLogLevelVerbose*/get sqfliteLogLevelVerbose() {
      return 2;
    },
    /*constant$.methodSetDebugModeOn*/get methodSetDebugModeOn() {
      return "debugMode";
    },
    /*constant$.queryCursorBufferSizeDefault*/get queryCursorBufferSizeDefault() {
      return 100;
    }
  }, false);
  sqlite_api$.DatabaseFactory = class DatabaseFactory extends core.Object {};
  (sqlite_api$.DatabaseFactory.new = function() {
    ;
  }).prototype = sqlite_api$.DatabaseFactory.prototype;
  dart.addTypeTests(sqlite_api$.DatabaseFactory);
  dart.addTypeCaches(sqlite_api$.DatabaseFactory);
  dart.setLibraryUri(sqlite_api$.DatabaseFactory, I[6]);
  sqlite_api$.DatabaseExecutor = class DatabaseExecutor extends core.Object {};
  (sqlite_api$.DatabaseExecutor.new = function() {
    ;
  }).prototype = sqlite_api$.DatabaseExecutor.prototype;
  dart.addTypeTests(sqlite_api$.DatabaseExecutor);
  dart.addTypeCaches(sqlite_api$.DatabaseExecutor);
  dart.setLibraryUri(sqlite_api$.DatabaseExecutor, I[6]);
  sqlite_api$.Transaction = class Transaction extends core.Object {};
  (sqlite_api$.Transaction.new = function() {
    ;
  }).prototype = sqlite_api$.Transaction.prototype;
  dart.addTypeTests(sqlite_api$.Transaction);
  dart.addTypeCaches(sqlite_api$.Transaction);
  sqlite_api$.Transaction[dart.implements] = () => [sqlite_api$.DatabaseExecutor];
  dart.setLibraryUri(sqlite_api$.Transaction, I[6]);
  sqlite_api$.Database = class Database extends core.Object {};
  (sqlite_api$.Database.new = function() {
    ;
  }).prototype = sqlite_api$.Database.prototype;
  dart.addTypeTests(sqlite_api$.Database);
  dart.addTypeCaches(sqlite_api$.Database);
  sqlite_api$.Database[dart.implements] = () => [sqlite_api$.DatabaseExecutor];
  dart.setLibraryUri(sqlite_api$.Database, I[6]);
  var version = dart.privateName(sqlite_api$, "OpenDatabaseOptions.version");
  var onConfigure = dart.privateName(sqlite_api$, "OpenDatabaseOptions.onConfigure");
  var onCreate = dart.privateName(sqlite_api$, "OpenDatabaseOptions.onCreate");
  var onUpgrade = dart.privateName(sqlite_api$, "OpenDatabaseOptions.onUpgrade");
  var onDowngrade = dart.privateName(sqlite_api$, "OpenDatabaseOptions.onDowngrade");
  var onOpen = dart.privateName(sqlite_api$, "OpenDatabaseOptions.onOpen");
  var __OpenDatabaseOptions_readOnly = dart.privateName(sqlite_api$, "_#OpenDatabaseOptions#readOnly");
  var __OpenDatabaseOptions_singleInstance = dart.privateName(sqlite_api$, "_#OpenDatabaseOptions#singleInstance");
  sqlite_api$.OpenDatabaseOptions = class OpenDatabaseOptions extends core.Object {
    get version() {
      return this[version];
    }
    set version(value) {
      this[version] = value;
    }
    get onConfigure() {
      return this[onConfigure];
    }
    set onConfigure(value) {
      this[onConfigure] = value;
    }
    get onCreate() {
      return this[onCreate];
    }
    set onCreate(value) {
      this[onCreate] = value;
    }
    get onUpgrade() {
      return this[onUpgrade];
    }
    set onUpgrade(value) {
      this[onUpgrade] = value;
    }
    get onDowngrade() {
      return this[onDowngrade];
    }
    set onDowngrade(value) {
      this[onDowngrade] = value;
    }
    get onOpen() {
      return this[onOpen];
    }
    set onOpen(value) {
      this[onOpen] = value;
    }
    static new(opts) {
      let version = opts && 'version' in opts ? opts.version : null;
      let onConfigure = opts && 'onConfigure' in opts ? opts.onConfigure : null;
      let onCreate = opts && 'onCreate' in opts ? opts.onCreate : null;
      let onUpgrade = opts && 'onUpgrade' in opts ? opts.onUpgrade : null;
      let onDowngrade = opts && 'onDowngrade' in opts ? opts.onDowngrade : null;
      let onOpen = opts && 'onOpen' in opts ? opts.onOpen : null;
      let readOnly = opts && 'readOnly' in opts ? opts.readOnly : false;
      let singleInstance = opts && 'singleInstance' in opts ? opts.singleInstance : true;
      return new open_options.SqfliteOpenDatabaseOptions.new({version: version, onConfigure: onConfigure, onCreate: onCreate, onUpgrade: onUpgrade, onDowngrade: onDowngrade, onOpen: onOpen, readOnly: readOnly, singleInstance: singleInstance});
    }
    static ['_#new#tearOff'](opts) {
      let version = opts && 'version' in opts ? opts.version : null;
      let onConfigure = opts && 'onConfigure' in opts ? opts.onConfigure : null;
      let onCreate = opts && 'onCreate' in opts ? opts.onCreate : null;
      let onUpgrade = opts && 'onUpgrade' in opts ? opts.onUpgrade : null;
      let onDowngrade = opts && 'onDowngrade' in opts ? opts.onDowngrade : null;
      let onOpen = opts && 'onOpen' in opts ? opts.onOpen : null;
      let readOnly = opts && 'readOnly' in opts ? opts.readOnly : false;
      let singleInstance = opts && 'singleInstance' in opts ? opts.singleInstance : true;
      return sqlite_api$.OpenDatabaseOptions.new({version: version, onConfigure: onConfigure, onCreate: onCreate, onUpgrade: onUpgrade, onDowngrade: onDowngrade, onOpen: onOpen, readOnly: readOnly, singleInstance: singleInstance});
    }
    get readOnly() {
      let t7;
      t7 = this[__OpenDatabaseOptions_readOnly];
      return t7 == null ? dart.throw(new _internal.LateError.fieldNI("readOnly")) : t7;
    }
    set readOnly(readOnly$35param) {
      this[__OpenDatabaseOptions_readOnly] = readOnly$35param;
    }
    get singleInstance() {
      let t7;
      t7 = this[__OpenDatabaseOptions_singleInstance];
      return t7 == null ? dart.throw(new _internal.LateError.fieldNI("singleInstance")) : t7;
    }
    set singleInstance(singleInstance$35param) {
      this[__OpenDatabaseOptions_singleInstance] = singleInstance$35param;
    }
  };
  (sqlite_api$.OpenDatabaseOptions[dart.mixinNew] = function() {
    this[version] = null;
    this[onConfigure] = null;
    this[onCreate] = null;
    this[onUpgrade] = null;
    this[onDowngrade] = null;
    this[onOpen] = null;
    this[__OpenDatabaseOptions_readOnly] = null;
    this[__OpenDatabaseOptions_singleInstance] = null;
  }).prototype = sqlite_api$.OpenDatabaseOptions.prototype;
  dart.addTypeTests(sqlite_api$.OpenDatabaseOptions);
  dart.addTypeCaches(sqlite_api$.OpenDatabaseOptions);
  dart.setStaticMethodSignature(sqlite_api$.OpenDatabaseOptions, () => ['new']);
  dart.setGetterSignature(sqlite_api$.OpenDatabaseOptions, () => ({
    __proto__: dart.getGetters(sqlite_api$.OpenDatabaseOptions.__proto__),
    readOnly: core.bool,
    singleInstance: core.bool
  }));
  dart.setSetterSignature(sqlite_api$.OpenDatabaseOptions, () => ({
    __proto__: dart.getSetters(sqlite_api$.OpenDatabaseOptions.__proto__),
    readOnly: core.bool,
    singleInstance: core.bool
  }));
  dart.setLibraryUri(sqlite_api$.OpenDatabaseOptions, I[6]);
  dart.setFieldSignature(sqlite_api$.OpenDatabaseOptions, () => ({
    __proto__: dart.getFields(sqlite_api$.OpenDatabaseOptions.__proto__),
    version: dart.fieldType(dart.nullable(core.int)),
    onConfigure: dart.fieldType(dart.nullable(dart.fnType(dart.void, [sqlite_api$.Database]))),
    onCreate: dart.fieldType(dart.nullable(dart.fnType(dart.void, [sqlite_api$.Database, core.int]))),
    onUpgrade: dart.fieldType(dart.nullable(dart.fnType(dart.void, [sqlite_api$.Database, core.int, core.int]))),
    onDowngrade: dart.fieldType(dart.nullable(dart.fnType(dart.void, [sqlite_api$.Database, core.int, core.int]))),
    onOpen: dart.fieldType(dart.nullable(dart.fnType(dart.void, [sqlite_api$.Database]))),
    [__OpenDatabaseOptions_readOnly]: dart.fieldType(dart.nullable(core.bool)),
    [__OpenDatabaseOptions_singleInstance]: dart.fieldType(dart.nullable(core.bool))
  }));
  sqlite_api$.Batch = class Batch extends core.Object {};
  (sqlite_api$.Batch.new = function() {
    ;
  }).prototype = sqlite_api$.Batch.prototype;
  dart.addTypeTests(sqlite_api$.Batch);
  dart.addTypeCaches(sqlite_api$.Batch);
  dart.setLibraryUri(sqlite_api$.Batch, I[6]);
  sqlite_api$.QueryCursor = class QueryCursor extends core.Object {};
  (sqlite_api$.QueryCursor.new = function() {
    ;
  }).prototype = sqlite_api$.QueryCursor.prototype;
  dart.addTypeTests(sqlite_api$.QueryCursor);
  dart.addTypeCaches(sqlite_api$.QueryCursor);
  dart.setLibraryUri(sqlite_api$.QueryCursor, I[6]);
  sqlite_api$['SqfliteDatabaseExecutorExt|get#_db'] = function SqfliteDatabaseExecutorExt$124get$35_db($this) {
    return database$.SqfliteDatabaseExecutor.as($this).db;
  };
  sqlite_api$['SqfliteDatabaseExecutorExt|get#_txn'] = function SqfliteDatabaseExecutorExt$124get$35_txn($this) {
    return database$.SqfliteDatabaseExecutor.as($this).txn;
  };
  sqlite_api$['SqfliteDatabaseExecutorExt|setVersion'] = function SqfliteDatabaseExecutorExt$124setVersion($this, version) {
    sqlite_api$['SqfliteDatabaseExecutorExt|get#_db']($this).checkNotClosed();
    return database_mixin['SqfliteDatabaseMixinExt|txnSetVersion'](sqlite_api$['SqfliteDatabaseExecutorExt|get#_db']($this), sqlite_api$['SqfliteDatabaseExecutorExt|get#_txn']($this), version);
  };
  sqlite_api$['SqfliteDatabaseExecutorExt|get#setVersion'] = function SqfliteDatabaseExecutorExt$124get$35setVersion($this) {
    return dart.fn(version => sqlite_api$['SqfliteDatabaseExecutorExt|setVersion']($this, version), T$.intToFutureOfvoid());
  };
  sqlite_api$['SqfliteDatabaseExecutorExt|getVersion'] = function SqfliteDatabaseExecutorExt$124getVersion($this) {
    sqlite_api$['SqfliteDatabaseExecutorExt|get#_db']($this).checkNotClosed();
    return database_mixin['SqfliteDatabaseMixinExt|txnGetVersion'](sqlite_api$['SqfliteDatabaseExecutorExt|get#_db']($this), sqlite_api$['SqfliteDatabaseExecutorExt|get#_txn']($this));
  };
  sqlite_api$['SqfliteDatabaseExecutorExt|get#getVersion'] = function SqfliteDatabaseExecutorExt$124get$35getVersion($this) {
    return dart.fn(() => sqlite_api$['SqfliteDatabaseExecutorExt|getVersion']($this), T$.VoidToFutureOfint());
  };
  sqlite_api$.onDatabaseVersionChangeError = function onDatabaseVersionChangeError(db, oldVersion, newVersion) {
    return async.async(dart.void, function* onDatabaseVersionChangeError() {
      dart.throw(new core.ArgumentError.new("can't change version from " + dart.str(oldVersion) + " to " + dart.str(newVersion)));
    });
  };
  sqlite_api$.__onDatabaseDowngradeDelete = function __onDatabaseDowngradeDelete(db, oldVersion, newVersion) {
    return async.async(dart.void, function* __onDatabaseDowngradeDelete() {
    });
  };
  dart.defineLazy(sqlite_api$, {
    /*sqlite_api$.onDatabaseDowngradeDelete*/get onDatabaseDowngradeDelete() {
      return C[5] || CT.C5;
    }
  }, false);
  utils$0.parseInt = function parseInt(object) {
    if (core.int.is(object)) {
      return object;
    } else if (typeof object == 'string') {
      try {
        return core.int.parse(object);
      } catch (e) {
        let _ = dart.getThrown(e);
        if (core.Object.is(_)) {
        } else
          throw e;
      }
    }
    return null;
  };
  utils$0.getSqlInTransactionArgument = function getSqlInTransactionArgument(sql) {
    let lowerSql = sql[$trim]()[$toLowerCase]();
    if (lowerSql[$startsWith]("begin")) {
      return true;
    } else if (lowerSql[$startsWith]("commit") || lowerSql[$startsWith]("rollback")) {
      return false;
    }
    return null;
  };
  utils$0._lockWarningCallbackDefault = function _lockWarningCallbackDefault() {
    core.print("Warning database has been locked for " + dart.str(utils$0.lockWarningDuration) + ". " + "Make sure you always use the transaction object for database operations during a transaction");
  };
  utils$0.listChunk = function listChunk(T, list, chunkSize) {
    let t14;
    let chunks = _interceptors.JSArray$(core.List$(T)).of([]);
    let len = list[$length];
    if ((t14 = chunkSize, t14 == null ? 0 : t14) === 0) {
      chunkSize = len;
    }
    for (let i = 0; i < len; i = i + dart.notNull(chunkSize)) {
      let size = i + dart.nullCheck(chunkSize);
      chunks[$add](list[$sublist](i, size > len ? len : size));
    }
    return chunks;
  };
  dart.defineLazy(utils$0, {
    /*utils$0.debugModeOn*/get debugModeOn() {
      return false;
    },
    set debugModeOn(value) {},
    /*utils$0.lockWarningDuration*/get lockWarningDuration() {
      return constant$.lockWarningDurationDefault;
    },
    set lockWarningDuration(value) {},
    /*utils$0.lockWarningCallback*/get lockWarningCallback() {
      return C[6] || CT.C6;
    },
    set lockWarningCallback(value) {}
  }, false);
  utils$1.firstIntValue = function firstIntValue(list) {
    if (list[$isNotEmpty]) {
      let firstRow = list[$first];
      if (firstRow[$isNotEmpty]) {
        return utils$0.parseInt(firstRow[$values][$first]);
      }
    }
    return null;
  };
  utils$1.hex = function hex(bytes) {
    let buffer = new core.StringBuffer.new();
    for (let part of bytes) {
      if ((part & 255) !== part) {
        dart.throw(new core.FormatException.new(dart.str(part) + " is not a byte integer"));
      }
      buffer.write((part < 16 ? "0" : "") + part[$toRadixString](16));
    }
    return buffer.toString()[$toUpperCase]();
  };
  utils$1.setLockWarningInfo = function setLockWarningInfo(opts) {
    let t14, t14$;
    let duration = opts && 'duration' in opts ? opts.duration : null;
    let callback = opts && 'callback' in opts ? opts.callback : null;
    utils$0.lockWarningDuration = (t14 = duration, t14 == null ? utils$0.lockWarningDuration : t14);
    utils$0.lockWarningCallback = (t14$ = callback, t14$ == null ? utils$0.lockWarningCallback : t14$);
  };
  dart.copyProperties(utils$1, {
    get lockWarningCallback() {
      return utils$0.lockWarningCallback;
    },
    set lockWarningCallback(callback) {
      return utils$0.lockWarningCallback = callback;
    },
    get lockWarningDuration() {
      return utils$0.lockWarningDuration;
    },
    set lockWarningDuration(duration) {
      return utils$0.lockWarningDuration = duration;
    }
  });
  dart.defineLazy(utils$1, {
    /*utils$1.sqlCountColumn*/get sqlCountColumn() {
      return "COUNT(*)";
    }
  }, false);
  dart.copyProperties(sqflite_database_factory, {
    get databaseFactoryOrNull() {
      return sqflite_database_factory._databaseFactory;
    },
    set databaseFactoryOrNull(databaseFactory) {
      if (databaseFactory != null) {
        if (!factory$.SqfliteDatabaseFactory.is(databaseFactory)) {
          dart.throw(new core.ArgumentError.value(databaseFactory, "databaseFactory", "Unsupported sqflite factory"));
        }
        sqflite_database_factory._databaseFactory = databaseFactory;
      } else {
        sqflite_database_factory._databaseFactory = null;
      }
    },
    get databaseFactory() {
      let t14;
      t14 = sqflite_database_factory._databaseFactory;
      return t14 == null ? dart.fn(() => {
        dart.throw(new core.StateError.new("databaseFactory not initialized\ndatabaseFactory is only initialized when using sqflite. When using `sqflite_common_ffi`\nYou must call `databaseFactory = databaseFactoryFfi;` before using global openDatabase API\n"));
      }, T$.VoidToNever())() : t14;
    },
    set databaseFactory(databaseFactory) {
      if (databaseFactory != null) {
        if (sqflite_database_factory._databaseFactory != null) {
          core.print("*** sqflite warning ***\n\nYou are changing sqflite default factory.\nBe aware of the potential side effects. Any library using sqflite\nwill have this factory as the default for all operations.\n\n*** sqflite warning ***\n");
        }
      }
      sqflite_database_factory.databaseFactoryOrNull = databaseFactory;
    }
  });
  dart.defineLazy(sqflite_database_factory, {
    /*sqflite_database_factory._databaseFactory*/get _databaseFactory() {
      return null;
    },
    set _databaseFactory(value) {}
  }, false);
  exception_impl.wrapDatabaseException = function wrapDatabaseException(T, action) {
    return async.async(T, function* wrapDatabaseException() {
      try {
        let result = (yield action());
        return result;
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (message_codec.PlatformException.is(e)) {
          if (e.code === "sqlite_error") {
            dart.throw(new exception.SqfliteDatabaseException.new(dart.nullCheck(e.message), e.details));
          } else {
            dart.rethrow(e$);
          }
        } else
          throw e$;
      }
    });
  };
  sqflite_ffi_web.createDatabaseFactoryFfi = function createDatabaseFactoryFfi(opts) {
    let ffiInit = opts && 'ffiInit' in opts ? opts.ffiInit : null;
    let noIsolate = opts && 'noIsolate' in opts ? opts.noIsolate : false;
    dart.throw(new core.UnimplementedError.new("createDatabaseFactoryFfi only supported for io application"));
  };
  sqflite_ffi_web.sqfliteFfiInit = function sqfliteFfiInit() {
  };
  dart.copyProperties(sqflite_ffi_web, {
    get databaseFactoryFfi() {
      return database_factory_ffi_web.databaseFactoryFfiImpl;
    },
    get databaseFactoryFfiNoIsolate() {
      return dart.throw(new core.UnimplementedError.new("databaseFactoryFfiNoIsolate only supported for io application"));
    }
  });
  const Object_SqfliteDatabaseFactoryMixin$36$ = class Object_SqfliteDatabaseFactoryMixin extends core.Object {};
  (Object_SqfliteDatabaseFactoryMixin$36$.new = function() {
    factory_mixin.SqfliteDatabaseFactoryMixin[dart.mixinNew].call(this);
  }).prototype = Object_SqfliteDatabaseFactoryMixin$36$.prototype;
  dart.applyMixin(Object_SqfliteDatabaseFactoryMixin$36$, factory_mixin.SqfliteDatabaseFactoryMixin);
  factory_mixin.SqfliteDatabaseFactoryBase = class SqfliteDatabaseFactoryBase extends Object_SqfliteDatabaseFactoryMixin$36$ {};
  (factory_mixin.SqfliteDatabaseFactoryBase.new = function() {
    factory_mixin.SqfliteDatabaseFactoryBase.__proto__.new.call(this);
    ;
  }).prototype = factory_mixin.SqfliteDatabaseFactoryBase.prototype;
  dart.addTypeTests(factory_mixin.SqfliteDatabaseFactoryBase);
  dart.addTypeCaches(factory_mixin.SqfliteDatabaseFactoryBase);
  dart.setLibraryUri(factory_mixin.SqfliteDatabaseFactoryBase, I[2]);
  factory_mixin._NamedLock = class _NamedLock extends core.Object {
    static new(name) {
      let t18, t17, t16, t15;
      t15 = factory_mixin._NamedLock.cacheLocks;
      t16 = name;
      t17 = t15[$_get](t16);
      return t17 == null ? (t18 = new factory_mixin._NamedLock.__(name, synchronized.Lock.new({reentrant: true})), t15[$_set](t16, t18), t18) : t17;
    }
    static ['_#new#tearOff'](name) {
      return factory_mixin._NamedLock.new(name);
    }
    static ['_#_#tearOff'](name, lock) {
      return new factory_mixin._NamedLock.__(name, lock);
    }
  };
  (factory_mixin._NamedLock.__ = function(name, lock) {
    this.name = name;
    this.lock = lock;
    ;
  }).prototype = factory_mixin._NamedLock.prototype;
  dart.addTypeTests(factory_mixin._NamedLock);
  dart.addTypeCaches(factory_mixin._NamedLock);
  dart.setStaticMethodSignature(factory_mixin._NamedLock, () => ['new']);
  dart.setLibraryUri(factory_mixin._NamedLock, I[2]);
  dart.setFieldSignature(factory_mixin._NamedLock, () => ({
    __proto__: dart.getFields(factory_mixin._NamedLock.__proto__),
    name: dart.finalFieldType(core.String),
    lock: dart.finalFieldType(synchronized.Lock)
  }));
  dart.setStaticFieldSignature(factory_mixin._NamedLock, () => ['cacheLocks']);
  dart.defineLazy(factory_mixin._NamedLock, {
    /*factory_mixin._NamedLock.cacheLocks*/get cacheLocks() {
      return new (T$.IdentityMapOfString$_NamedLock()).new();
    }
  }, false);
  var path = dart.privateName(factory_mixin, "SqfliteDatabaseDebugInfo.path");
  var singleInstance = dart.privateName(factory_mixin, "SqfliteDatabaseDebugInfo.singleInstance");
  var logLevel = dart.privateName(factory_mixin, "SqfliteDatabaseDebugInfo.logLevel");
  factory_mixin.SqfliteDatabaseDebugInfo = class SqfliteDatabaseDebugInfo extends core.Object {
    get path() {
      return this[path];
    }
    set path(value) {
      this[path] = value;
    }
    get singleInstance() {
      return this[singleInstance];
    }
    set singleInstance(value) {
      this[singleInstance] = value;
    }
    get logLevel() {
      return this[logLevel];
    }
    set logLevel(value) {
      this[logLevel] = value;
    }
    fromMap(map) {
      let t15;
      this.path = (t15 = map[$_get]("path"), t15 == null ? null : dart.toString(t15));
      this.singleInstance = T$.boolN().as(map[$_get]("singleInstance"));
      this.logLevel = T$.intN().as(map[$_get]("logLevel"));
    }
    toDebugMap() {
      let t15;
      let map = new (T$.IdentityMapOfString$ObjectN()).from(["path", this.path, "singleInstance", this.singleInstance]);
      if (dart.notNull((t15 = this.logLevel, t15 == null ? constant$.sqfliteLogLevelNone : t15)) > constant$.sqfliteLogLevelNone) {
        map[$_set]("logLevel", this.logLevel);
      }
      return map;
    }
    toString() {
      return this.toDebugMap()[$toString]();
    }
    static ['_#new#tearOff']() {
      return new factory_mixin.SqfliteDatabaseDebugInfo.new();
    }
  };
  (factory_mixin.SqfliteDatabaseDebugInfo.new = function() {
    this[path] = null;
    this[singleInstance] = null;
    this[logLevel] = null;
    ;
  }).prototype = factory_mixin.SqfliteDatabaseDebugInfo.prototype;
  dart.addTypeTests(factory_mixin.SqfliteDatabaseDebugInfo);
  dart.addTypeCaches(factory_mixin.SqfliteDatabaseDebugInfo);
  dart.setMethodSignature(factory_mixin.SqfliteDatabaseDebugInfo, () => ({
    __proto__: dart.getMethods(factory_mixin.SqfliteDatabaseDebugInfo.__proto__),
    fromMap: dart.fnType(dart.void, [core.Map]),
    toDebugMap: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [])
  }));
  dart.setLibraryUri(factory_mixin.SqfliteDatabaseDebugInfo, I[2]);
  dart.setFieldSignature(factory_mixin.SqfliteDatabaseDebugInfo, () => ({
    __proto__: dart.getFields(factory_mixin.SqfliteDatabaseDebugInfo.__proto__),
    path: dart.fieldType(dart.nullable(core.String)),
    singleInstance: dart.fieldType(dart.nullable(core.bool)),
    logLevel: dart.fieldType(dart.nullable(core.int))
  }));
  dart.defineExtensionMethods(factory_mixin.SqfliteDatabaseDebugInfo, ['toString']);
  var databases = dart.privateName(factory_mixin, "SqfliteDebugInfo.databases");
  var logLevel$0 = dart.privateName(factory_mixin, "SqfliteDebugInfo.logLevel");
  factory_mixin.SqfliteDebugInfo = class SqfliteDebugInfo extends core.Object {
    get databases() {
      return this[databases];
    }
    set databases(value) {
      this[databases] = value;
    }
    get logLevel() {
      return this[logLevel$0];
    }
    set logLevel(value) {
      this[logLevel$0] = value;
    }
    toDebugMap() {
      let t15;
      let map = new (T$.IdentityMapOfString$ObjectN()).new();
      if (this.databases != null) {
        map[$_set]("databases", dart.nullCheck(this.databases)[$map](core.String, T$.MapOfString$ObjectN(), dart.fn((key, dbInfo) => new (T$.MapEntryOfString$MapOfString$ObjectN()).__(key, dbInfo.toDebugMap()), T$.StringAndSqfliteDatabaseDebugInfoToMapEntryOfString$MapOfString$ObjectN())));
      }
      if (dart.notNull((t15 = this.logLevel, t15 == null ? constant$.sqfliteLogLevelNone : t15)) > constant$.sqfliteLogLevelNone) {
        map[$_set]("logLevel", this.logLevel);
      }
      return map;
    }
    toString() {
      return this.toDebugMap()[$toString]();
    }
    static ['_#new#tearOff']() {
      return new factory_mixin.SqfliteDebugInfo.new();
    }
  };
  (factory_mixin.SqfliteDebugInfo.new = function() {
    this[databases] = null;
    this[logLevel$0] = null;
    ;
  }).prototype = factory_mixin.SqfliteDebugInfo.prototype;
  dart.addTypeTests(factory_mixin.SqfliteDebugInfo);
  dart.addTypeCaches(factory_mixin.SqfliteDebugInfo);
  dart.setMethodSignature(factory_mixin.SqfliteDebugInfo, () => ({
    __proto__: dart.getMethods(factory_mixin.SqfliteDebugInfo.__proto__),
    toDebugMap: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [])
  }));
  dart.setLibraryUri(factory_mixin.SqfliteDebugInfo, I[2]);
  dart.setFieldSignature(factory_mixin.SqfliteDebugInfo, () => ({
    __proto__: dart.getFields(factory_mixin.SqfliteDebugInfo.__proto__),
    databases: dart.fieldType(dart.nullable(core.Map$(core.String, factory_mixin.SqfliteDatabaseDebugInfo))),
    logLevel: dart.fieldType(dart.nullable(core.int))
  }));
  dart.defineExtensionMethods(factory_mixin.SqfliteDebugInfo, ['toString']);
  dart.defineLazy(factory_mixin, {
    /*factory_mixin.paramLogLevel*/get paramLogLevel() {
      return "logLevel";
    },
    /*factory_mixin.paramDatabases*/get paramDatabases() {
      return "databases";
    }
  }, false);
  database$.SqfliteDatabaseExecutor = class SqfliteDatabaseExecutor extends core.Object {};
  (database$.SqfliteDatabaseExecutor.new = function() {
    ;
  }).prototype = database$.SqfliteDatabaseExecutor.prototype;
  dart.addTypeTests(database$.SqfliteDatabaseExecutor);
  dart.addTypeCaches(database$.SqfliteDatabaseExecutor);
  database$.SqfliteDatabaseExecutor[dart.implements] = () => [sqlite_api$.DatabaseExecutor];
  dart.setLibraryUri(database$.SqfliteDatabaseExecutor, I[7]);
  var factory$0 = dart.privateName(database$, "SqfliteDatabaseOpenHelper.factory");
  var options$ = dart.privateName(database$, "SqfliteDatabaseOpenHelper.options");
  var path$0 = dart.privateName(database$, "SqfliteDatabaseOpenHelper.path");
  var sqfliteDatabase = dart.privateName(database$, "SqfliteDatabaseOpenHelper.sqfliteDatabase");
  database$.SqfliteDatabaseOpenHelper = class SqfliteDatabaseOpenHelper extends core.Object {
    get factory() {
      return this[factory$0];
    }
    set factory(value) {
      super.factory = value;
    }
    get options() {
      return this[options$];
    }
    set options(value) {
      super.options = value;
    }
    get path() {
      return this[path$0];
    }
    set path(value) {
      super.path = value;
    }
    get sqfliteDatabase() {
      return this[sqfliteDatabase];
    }
    set sqfliteDatabase(value) {
      this[sqfliteDatabase] = value;
    }
    static ['_#new#tearOff'](factory, path, options) {
      return new database$.SqfliteDatabaseOpenHelper.new(factory, path, options);
    }
    newDatabase(path) {
      return this.factory.newDatabase(this, path);
    }
    get isOpen() {
      return this.sqfliteDatabase != null;
    }
    openDatabase() {
      return async.async(database$.SqfliteDatabase, (function* openDatabase() {
        if (!this.isOpen) {
          let database = this.newDatabase(this.path);
          yield database.doOpen(dart.nullCheck(this.options));
          this.sqfliteDatabase = database;
        }
        return dart.nullCheck(this.sqfliteDatabase);
      }).bind(this));
    }
    closeDatabase(sqfliteDatabase) {
      return async.async(dart.void, (function* closeDatabase() {
        if (!this.isOpen) {
          return;
        }
        yield sqfliteDatabase.doClose();
        this.sqfliteDatabase = null;
      }).bind(this));
    }
  };
  (database$.SqfliteDatabaseOpenHelper.new = function(factory, path, options) {
    this[sqfliteDatabase] = null;
    this[factory$0] = factory;
    this[path$0] = path;
    this[options$] = options;
    ;
  }).prototype = database$.SqfliteDatabaseOpenHelper.prototype;
  dart.addTypeTests(database$.SqfliteDatabaseOpenHelper);
  dart.addTypeCaches(database$.SqfliteDatabaseOpenHelper);
  dart.setMethodSignature(database$.SqfliteDatabaseOpenHelper, () => ({
    __proto__: dart.getMethods(database$.SqfliteDatabaseOpenHelper.__proto__),
    newDatabase: dart.fnType(database$.SqfliteDatabase, [core.String]),
    openDatabase: dart.fnType(async.Future$(database$.SqfliteDatabase), []),
    closeDatabase: dart.fnType(async.Future$(dart.void), [database$.SqfliteDatabase])
  }));
  dart.setGetterSignature(database$.SqfliteDatabaseOpenHelper, () => ({
    __proto__: dart.getGetters(database$.SqfliteDatabaseOpenHelper.__proto__),
    isOpen: core.bool
  }));
  dart.setLibraryUri(database$.SqfliteDatabaseOpenHelper, I[7]);
  dart.setFieldSignature(database$.SqfliteDatabaseOpenHelper, () => ({
    __proto__: dart.getFields(database$.SqfliteDatabaseOpenHelper.__proto__),
    factory: dart.finalFieldType(factory$.SqfliteDatabaseFactory),
    options: dart.finalFieldType(dart.nullable(sqlite_api$.OpenDatabaseOptions)),
    path: dart.finalFieldType(core.String),
    sqfliteDatabase: dart.fieldType(dart.nullable(database$.SqfliteDatabase))
  }));
  var id = dart.privateName(database$, "SqfliteDatabase.id");
  var options = dart.privateName(database$, "SqfliteDatabase.options");
  database$.SqfliteDatabase = class SqfliteDatabase extends database$.SqfliteDatabaseExecutor {
    get id() {
      return this[id];
    }
    set id(value) {
      this[id] = value;
    }
    get options() {
      return this[options];
    }
    set options(value) {
      this[options] = value;
    }
  };
  (database$.SqfliteDatabase.new = function() {
    this[id] = null;
    this[options] = null;
    ;
  }).prototype = database$.SqfliteDatabase.prototype;
  dart.addTypeTests(database$.SqfliteDatabase);
  dart.addTypeCaches(database$.SqfliteDatabase);
  database$.SqfliteDatabase[dart.implements] = () => [sqlite_api$.Database];
  dart.setLibraryUri(database$.SqfliteDatabase, I[7]);
  dart.setFieldSignature(database$.SqfliteDatabase, () => ({
    __proto__: dart.getFields(database$.SqfliteDatabase.__proto__),
    id: dart.fieldType(dart.nullable(core.int)),
    options: dart.fieldType(dart.nullable(sqlite_api$.OpenDatabaseOptions))
  }));
  var openHelper = dart.privateName(database_mixin, "SqfliteDatabaseMixin.openHelper");
  var options$0 = dart.privateName(database_mixin, "SqfliteDatabaseMixin.options");
  var isClosed = dart.privateName(database_mixin, "SqfliteDatabaseMixin.isClosed");
  var _$35SqfliteDatabaseMixin$35path = dart.privateName(database_mixin, "SqfliteDatabaseMixin._#SqfliteDatabaseMixin#path");
  var openTransaction = dart.privateName(database_mixin, "SqfliteDatabaseMixin.openTransaction");
  var _rawLock = dart.privateName(database_mixin, "SqfliteDatabaseMixin._rawLock");
  var id$ = dart.privateName(database_mixin, "SqfliteDatabaseMixin.id");
  var inTransaction = dart.privateName(database_mixin, "SqfliteDatabaseMixin.inTransaction");
  var doNotUseSynchronized = dart.privateName(database_mixin, "SqfliteDatabaseMixin.doNotUseSynchronized");
  var _closeLock = dart.privateName(database_mixin, "SqfliteDatabaseMixin._closeLock");
  var __SqfliteDatabaseMixin_path = dart.privateName(database_mixin, "_#SqfliteDatabaseMixin#path");
  var _rawLock$ = dart.privateName(database_mixin, "_rawLock");
  var _closeLock$ = dart.privateName(database_mixin, "_closeLock");
  var _closeCursor = dart.privateName(database_mixin, "_closeCursor");
  var _closeDatabase = dart.privateName(database_mixin, "_closeDatabase");
  database_mixin.SqfliteDatabaseMixin = class SqfliteDatabaseMixin extends core.Object {};
  database_mixin.SqfliteDatabaseMixin[dart.mixinOn] = Object => {
    class SqfliteDatabaseMixin extends Object {
      get openHelper() {
        return this[openHelper];
      }
      set openHelper(value) {
        this[openHelper] = value;
      }
      get options() {
        return this[options$0];
      }
      set options(value) {
        this[options$0] = value;
      }
      get isClosed() {
        return this[isClosed];
      }
      set isClosed(value) {
        this[isClosed] = value;
      }
      get [__SqfliteDatabaseMixin_path]() {
        return this[_$35SqfliteDatabaseMixin$35path];
      }
      set [__SqfliteDatabaseMixin_path](value) {
        this[_$35SqfliteDatabaseMixin$35path] = value;
      }
      get openTransaction() {
        return this[openTransaction];
      }
      set openTransaction(value) {
        this[openTransaction] = value;
      }
      get [_rawLock$]() {
        return this[_rawLock];
      }
      set [_rawLock$](value) {
        super[_rawLock$] = value;
      }
      get id() {
        return this[id$];
      }
      set id(value) {
        this[id$] = value;
      }
      get inTransaction() {
        return this[inTransaction];
      }
      set inTransaction(value) {
        this[inTransaction] = value;
      }
      get doNotUseSynchronized() {
        return this[doNotUseSynchronized];
      }
      set doNotUseSynchronized(value) {
        this[doNotUseSynchronized] = value;
      }
      get [_closeLock$]() {
        return this[_closeLock];
      }
      set [_closeLock$](value) {
        super[_closeLock$] = value;
      }
      safeInvokeMethod(T, method, $arguments = null) {
        return this.factory.wrapDatabaseException(T, dart.fn(() => this.invokeMethod(T, method, $arguments), dart.fnType(async.Future$(T), [])));
      }
      invokeMethod(T, method, $arguments = null) {
        return database_mixin['SqfliteDatabaseMixinExt|get#_mixin'](this).factory.invokeMethod(T, method, $arguments);
      }
      get factory() {
        return dart.nullCheck(this.openHelper).factory;
      }
      get database() {
        return this.db;
      }
      get db() {
        return this;
      }
      get isOpen() {
        return dart.nullCheck(this.openHelper).isOpen;
      }
      get path() {
        let t15;
        t15 = this[__SqfliteDatabaseMixin_path];
        return t15 == null ? dart.throw(new _internal.LateError.fieldNI("path")) : t15;
      }
      set path(path$35param) {
        this[__SqfliteDatabaseMixin_path] = path$35param;
      }
      get txn() {
        return this.openTransaction;
      }
      batch() {
        return new batch.SqfliteDatabaseBatch.new(this);
      }
      checkNotClosed() {
        if (this.isClosed) {
          dart.throw(new exception.SqfliteDatabaseException.new("error database_closed", null));
        }
      }
      devInvokeMethod(T, method, $arguments = null) {
        return this.invokeMethod(T, method, $arguments);
      }
      devInvokeSqlMethod(T, method, sql, $arguments = null) {
        let t15;
        return this.devInvokeMethod(T, method, (t15 = new (T$.IdentityMapOfString$ObjectN()).from(["sql", sql, "arguments", $arguments]), (() => {
          t15[$addAll](database_mixin['SqfliteDatabaseMixinExt|getBaseDatabaseMethodArguments'](this, this.txn));
          return t15;
        })()));
      }
      txnSynchronized(T, txn, action) {
        return async.async(T, (function* txnSynchronized() {
          if (txn != null || this.doNotUseSynchronized) {
            return yield action(txn);
          } else {
            let handleTimeoutWarning = utils$0.lockWarningDuration != null && utils$0.lockWarningCallback != null;
            let timeoutCompleter = null;
            function timeoutCompleter$35get() {
              let t16;
              t16 = timeoutCompleter;
              return t16 == null ? dart.throw(new _internal.LateError.localNI("timeoutCompleter")) : t16;
            }
            function timeoutCompleter$35set(timeoutCompleter$35param) {
              return timeoutCompleter = timeoutCompleter$35param;
            }
            if (handleTimeoutWarning) {
              timeoutCompleter$35set(async.Completer.new());
            }
            let operation = this[_rawLock$].synchronized(T, dart.fn(() => {
              if (handleTimeoutWarning) {
                timeoutCompleter$35get().complete();
              }
              return action(txn);
            }, dart.fnType(async.Future$(T), [])));
            if (handleTimeoutWarning) {
              timeoutCompleter$35get().future.timeout(dart.nullCheck(utils$0.lockWarningDuration), {onTimeout: dart.fn(() => {
                  dart.nullCheck(utils$0.lockWarningCallback)();
                }, T$.VoidToNull())});
            }
            return yield operation;
          }
        }).bind(this));
      }
      txnWriteSynchronized(T, txn, action) {
        return this.txnSynchronized(T, txn, action);
      }
      txnExecute(T, txn, sql, $arguments, opts) {
        let beginTransaction = opts && 'beginTransaction' in opts ? opts.beginTransaction : null;
        return this.txnWriteSynchronized(T, txn, dart.fn(_ => {
          let t18;
          let inTransactionChange = utils$0.getSqlInTransactionArgument(sql);
          if (dart.test((t18 = inTransactionChange, t18 == null ? false : t18))) {
            inTransactionChange = true;
            this.inTransaction = true;
          } else if (inTransactionChange === false) {
            inTransactionChange = false;
            this.inTransaction = false;
          }
          return this.invokeExecute(T, txn, sql, $arguments, {inTransactionChange: inTransactionChange, beginTransaction: beginTransaction});
        }, dart.fnType(async.Future$(T), [T$.TransactionN()])));
      }
      invokeExecute(T, txn, sql, $arguments, opts) {
        let inTransactionChange = opts && 'inTransactionChange' in opts ? opts.inTransactionChange : null;
        let beginTransaction = opts && 'beginTransaction' in opts ? opts.beginTransaction : null;
        let methodArguments = database_mixin['SqfliteDatabaseMixinExt|_txnGetSqlMethodArguments'](this, txn, sql, $arguments);
        if (beginTransaction === true) {
          methodArguments[$_set]("transactionId", null);
        }
        database_mixin['SqfliteDatabaseMixinExt|addInTransactionChangeParam'](this, methodArguments, inTransactionChange);
        return this.safeInvokeMethod(T, "execute", methodArguments);
      }
      txnRawInsert(txn, sql, $arguments) {
        return this.txnWriteSynchronized(core.int, txn, dart.fn(_ => async.async(core.int, (function*() {
          let t18;
          t18 = (yield this.safeInvokeMethod(T$.intN(), "insert", database_mixin['SqfliteDatabaseMixinExt|_txnGetSqlMethodArguments'](this, txn, sql, $arguments)));
          return t18 == null ? 0 : t18;
        }).bind(this)), T$.TransactionNToFutureOfint()));
      }
      txnRawQuery(txn, sql, $arguments) {
        return this.txnSynchronized(T$.ListOfMapOfString$ObjectN(), txn, dart.fn(_ => async.async(T$.ListOfMapOfString$ObjectN(), (function*() {
          let result = (yield this.safeInvokeMethod(dart.dynamic, "query", database_mixin['SqfliteDatabaseMixinExt|_txnGetSqlMethodArguments'](this, txn, sql, $arguments)));
          return collection_utils.queryResultToList(result);
        }).bind(this)), T$.TransactionNToFutureOfListOfMapOfString$ObjectN()));
      }
      txnRawQueryCursor(txn, sql, $arguments, pageSize) {
        return this.txnSynchronized(cursor.SqfliteQueryCursor, txn, dart.fn(_ => async.async(cursor.SqfliteQueryCursor, (function*() {
          let methodArguments = database_mixin['SqfliteDatabaseMixinExt|_txnGetSqlMethodArguments'](this, txn, sql, $arguments);
          methodArguments[$_set]("cursorPageSize", pageSize);
          let result = (yield this.safeInvokeMethod(dart.dynamic, "query", methodArguments));
          let cursorId = collection_utils.queryResultCursorId(result);
          let resultList = collection_utils.queryResultToList(result);
          return new cursor.SqfliteQueryCursor.new(this, txn, cursorId, resultList);
        }).bind(this)), T$.TransactionNToFutureOfSqfliteQueryCursor()));
      }
      txnQueryCursorGetCurrent(txn, cursor) {
        if (cursor.closed) {
          dart.throw(new core.StateError.new("Cursor is closed, cannot get current row"));
        }
        if (cursor.currentIndex < 0 || cursor.currentIndex >= cursor.resultList[$length]) {
          dart.throw(new core.StateError.new("You must have a successful moveNext() before getting the current row"));
        }
        return cursor.resultList[$_get](cursor.currentIndex);
      }
      [_closeCursor](cursor) {
        return async.async(dart.void, (function* _closeCursor() {
          let t18;
          if (!cursor.closed) {
            cursor.closed = true;
            let cursorId = cursor.cursorId;
            if (cursorId != null) {
              cursor.cursorId = null;
              yield this.safeInvokeMethod(dart.dynamic, "queryCursorNext", (t18 = new (T$.IdentityMapOfString$ObjectN()).from(["cursorId", cursorId, "cancel", true]), (() => {
                t18[$addAll](database_mixin['SqfliteDatabaseMixinExt|getBaseDatabaseMethodArguments'](this, this.txn));
                return t18;
              })()));
            }
          }
        }).bind(this));
      }
      txnQueryCursorMoveNext(txn, cursor) {
        return async.async(core.bool, (function* txnQueryCursorMoveNext() {
          let t18;
          if (cursor.closed) {
            return false;
          }
          if (cursor.currentIndex < cursor.resultList[$length] - 1) {
            t18 = cursor;
            t18.currentIndex = t18.currentIndex + 1;
            return true;
          }
          let cursorId = cursor.cursorId;
          if (cursorId == null) {
            yield this.txnQueryCursorClose(txn, cursor);
            return false;
          } else {
            return this.txnSynchronized(core.bool, txn, dart.fn(_ => async.async(core.bool, (function*() {
              let t18;
              if (cursor.closed) {
                return false;
              }
              let cursorId = cursor.cursorId;
              if (cursorId == null) {
                yield this[_closeCursor](cursor);
                return false;
              }
              let result = (yield this.safeInvokeMethod(dart.dynamic, "queryCursorNext", (t18 = new (T$.IdentityMapOfString$ObjectN()).from(["cursorId", cursorId]), (() => {
                t18[$addAll](database_mixin['SqfliteDatabaseMixinExt|getBaseDatabaseMethodArguments'](this, txn));
                return t18;
              })())));
              let updatedCursorId = collection_utils.queryResultCursorId(result);
              cursor.cursorId = updatedCursorId;
              cursor.currentIndex = 0;
              cursor.resultList = collection_utils.queryResultToList(result);
              if (cursor.resultList[$isEmpty]) {
                yield this[_closeCursor](cursor);
                return false;
              } else {
                return true;
              }
            }).bind(this)), T$.TransactionNToFutureOfbool()));
          }
        }).bind(this));
      }
      txnQueryCursorClose(txn, cursor) {
        return async.async(dart.void, (function* txnQueryCursorClose() {
          if (!cursor.closed) {
            if (cursor.cursorId != null) {
              return this.txnSynchronized(dart.void, txn, dart.fn(_ => async.async(dart.void, (function*() {
                yield this[_closeCursor](cursor);
              }).bind(this)), T$.TransactionNToFutureOfvoid()));
            } else {
              cursor.closed = true;
            }
          }
        }).bind(this));
      }
      txnRawUpdate(txn, sql, $arguments) {
        return database_mixin['SqfliteDatabaseMixinExt|_txnRawUpdateOrDelete'](this, txn, sql, $arguments);
      }
      txnRawDelete(txn, sql, $arguments) {
        return database_mixin['SqfliteDatabaseMixinExt|_txnRawUpdateOrDelete'](this, txn, sql, $arguments);
      }
      txnApplyBatch(txn, batch, opts) {
        let noResult = opts && 'noResult' in opts ? opts.noResult : null;
        let continueOnError = opts && 'continueOnError' in opts ? opts.continueOnError : null;
        return this.txnWriteSynchronized(T$.ListOfObjectN(), txn, dart.fn(_ => async.async(core.List, (function*() {
          let t18;
          let $arguments = (t18 = new (T$.IdentityMapOfString$ObjectN()).from(["operations", batch.getOperationsParam()]), (() => {
            t18[$addAll](database_mixin['SqfliteDatabaseMixinExt|getBaseDatabaseMethodArguments'](this, txn));
            return t18;
          })());
          if (noResult === true) {
            $arguments[$_set]("noResult", noResult);
          }
          if (continueOnError === true) {
            $arguments[$_set]("continueOnError", continueOnError);
          }
          let results = (yield this.safeInvokeMethod(T$.ListN(), "batch", $arguments));
          if (results == null) {
            return [];
          }
          return new collection_utils.BatchResults.from(results);
        }).bind(this)), T$.TransactionNToFutureOfList()));
      }
      newTransaction() {
        let txn = new transaction.SqfliteTransaction.new(this);
        return txn;
      }
      beginTransaction(opts) {
        let exclusive = opts && 'exclusive' in opts ? opts.exclusive : null;
        return async.async(transaction.SqfliteTransaction, (function* beginTransaction() {
          let txn = this.newTransaction();
          yield database_mixin['SqfliteDatabaseMixinExt|txnBeginTransaction'](this, txn, {exclusive: exclusive});
          return txn;
        }).bind(this));
      }
      endTransaction(txn) {
        return async.async(dart.void, (function* endTransaction() {
          if (database_mixin['SqfliteDatabaseMixinExt|get#readOnly'](this) !== true) {
            if (txn.successful === true) {
              yield this.txnExecute(dart.dynamic, txn, "COMMIT", null);
            } else {
              yield this.txnExecute(dart.dynamic, txn, "ROLLBACK", null);
            }
          }
        }).bind(this));
      }
      transaction(T, action, opts) {
        let exclusive = opts && 'exclusive' in opts ? opts.exclusive : null;
        this.checkNotClosed();
        return this.txnWriteSynchronized(T, this.txn, dart.fn(txn => async.async(T, (function*() {
          return database_mixin['SqfliteDatabaseMixinExt|_txnTransaction'](T, this, txn, action, {exclusive: exclusive});
        }).bind(this)), dart.fnType(async.Future$(T), [T$.TransactionN()])));
      }
      close() {
        return this.factory.closeDatabase(this);
      }
      doClose() {
        return this[_closeDatabase](this.id);
      }
      toString() {
        return dart.str(this.id) + " " + this.path;
      }
      openDatabase() {
        return async.async(core.int, (function* openDatabase() {
          let t18, t18$, t19;
          let params = new (T$.IdentityMapOfString$ObjectN()).from(["path", this.path]);
          if (database_mixin['SqfliteDatabaseMixinExt|get#readOnly'](this) === true) {
            params[$_set]("readOnly", true);
          }
          let singleInstance = dart.test((t18$ = (t18 = this.options, t18 == null ? null : t18.singleInstance), t18$ == null ? false : t18$)) && !path_utils.isInMemoryDatabasePath(this.path);
          params[$_set]("singleInstance", singleInstance);
          let openResult = (yield this.safeInvokeMethod(T$.ObjectN(), "openDatabase", params));
          if (core.int.is(openResult)) {
            return openResult;
          } else if (core.Map.is(openResult)) {
            let id = T$.intN().as(openResult[$_get]("id"));
            let recoveredInTransaction = dart.equals(openResult[$_get]("recoveredInTransaction"), true);
            if (recoveredInTransaction) {
              if (database_mixin['SqfliteDatabaseMixinExt|get#readOnly'](this) !== true) {
                try {
                  yield this.safeInvokeMethod(T$.ObjectN(), "execute", new (T$.IdentityMapOfString$ObjectN()).from(["sql", "ROLLBACK", "id", id, "transactionId", -1, "inTransaction", false]));
                } catch (e$) {
                  let e = dart.getThrown(e$);
                  if (core.Object.is(e)) {
                    core.print("ignore recovered database ROLLBACK error " + dart.str(e));
                  } else
                    throw e$;
                }
              }
            }
            return dart.nullCheck(id);
          } else {
            dart.throw("unsupported result " + dart.str(openResult) + " (" + dart.str((t19 = openResult, t19 == null ? null : dart.runtimeType(t19))) + ")");
          }
        }).bind(this));
      }
      [_closeDatabase](databaseId) {
        return async.async(dart.void, (function* _closeDatabase() {
          yield this[_closeLock$].synchronized(core.Null, dart.fn(() => async.async(core.Null, (function*() {
            if (!this.isClosed) {
              this.isClosed = true;
              if (database_mixin['SqfliteDatabaseMixinExt|get#readOnly'](this) !== true && this.inTransaction) {
                try {
                  yield this.txnWriteSynchronized(core.Null, this.txn, dart.fn(txn => async.async(core.Null, (function*() {
                    let t19;
                    try {
                      yield this.invokeExecute(dart.dynamic, (t19 = T$.SqfliteTransactionN().as(txn), t19 == null ? transaction.getForcedSqfliteTransaction(this) : t19), "ROLLBACK", null, {inTransactionChange: false});
                    } catch (e) {
                      let _ = dart.getThrown(e);
                      if (core.Object.is(_)) {
                      } else
                        throw e;
                    }
                  }).bind(this)), T$.TransactionNToFutureOfNull()));
                } catch (e$) {
                  let e = dart.getThrown(e$);
                  if (core.Object.is(e)) {
                    core.print("Error " + dart.str(e) + " before rollback");
                  } else
                    throw e$;
                }
              }
              try {
                yield this.safeInvokeMethod(dart.dynamic, "closeDatabase", new (T$.IdentityMapOfString$ObjectN()).from(["id", databaseId]));
              } catch (e$0) {
                let e = dart.getThrown(e$0);
                if (core.Object.is(e)) {
                  core.print("error " + dart.str(e) + " closing database " + dart.str(databaseId));
                } else
                  throw e$0;
              }
            }
          }).bind(this)), T$.VoidToFutureOfNull()));
        }).bind(this));
      }
      doOpen(options) {
        return async.async(database$.SqfliteDatabase, (function* doOpen() {
          if (options.version != null) {
            if (options.version === 0) {
              dart.throw(new core.ArgumentError.new("version cannot be set to 0 in openDatabase"));
            }
          } else {
            if (options.onCreate != null) {
              dart.throw(new core.ArgumentError.new("onCreate must be null if no version is specified"));
            }
            if (options.onUpgrade != null) {
              dart.throw(new core.ArgumentError.new("onUpgrade must be null if no version is specified"));
            }
            if (options.onDowngrade != null) {
              dart.throw(new core.ArgumentError.new("onDowngrade must be null if no version is specified"));
            }
          }
          this.options = options;
          let databaseId = (yield this.openDatabase());
          try {
            if (dart.equals(options.onDowngrade, sqlite_api$.onDatabaseDowngradeDelete)) {
              const onDatabaseDowngradeDoDelete = (database, oldVersion, newVersion) => {
                return async.async(dart.void, (function* onDatabaseDowngradeDoDelete() {
                  let db = database$.SqfliteDatabase.as(database);
                  yield db.doClose();
                  this.isClosed = false;
                  yield this.factory.deleteDatabase(db.path);
                  db.id = databaseId = (yield this.openDatabase());
                  try {
                    if (options.onConfigure != null) {
                      yield dart.nullCheck(options.onConfigure)(db);
                    }
                  } catch (e$) {
                    let e = dart.getThrown(e$);
                    if (core.Object.is(e)) {
                      core.print(e);
                      this.openTransaction = (yield db.beginTransaction({exclusive: true}));
                      dart.rethrow(e$);
                    } else
                      throw e$;
                  }
                  this.openTransaction = (yield db.beginTransaction({exclusive: true}));
                  if (options.onCreate != null) {
                    yield dart.nullCheck(options.onCreate)(db, dart.nullCheck(options.version));
                  }
                }).bind(this));
              };
              dart.fn(onDatabaseDowngradeDoDelete, T$.DatabaseAndintAndintToFutureOfvoid());
              options.onDowngrade = onDatabaseDowngradeDoDelete;
            }
            this.id = databaseId;
            if (options.onConfigure != null) {
              yield dart.nullCheck(options.onConfigure)(this);
            }
            if (options.version != null) {
              let oldVersion = (yield sqlite_api$['SqfliteDatabaseExecutorExt|getVersion'](this));
              if (oldVersion !== options.version) {
                try {
                  yield this.transaction(core.Null, dart.fn(txn => async.async(core.Null, (function*() {
                    let sqfliteTransaction = transaction.SqfliteTransaction.as(txn);
                    this.openTransaction = sqfliteTransaction;
                    let oldVersion = (yield database_mixin['SqfliteDatabaseMixinExt|txnGetVersion'](this, txn));
                    if (oldVersion === 0) {
                      if (options.onCreate != null) {
                        yield dart.nullCheck(options.onCreate)(this, dart.nullCheck(options.version));
                      } else if (options.onUpgrade != null) {
                        yield dart.nullCheck(options.onUpgrade)(this, 0, dart.nullCheck(options.version));
                      }
                    } else if (dart.nullCheck(options.version) > oldVersion) {
                      if (options.onUpgrade != null) {
                        yield dart.nullCheck(options.onUpgrade)(this, oldVersion, dart.nullCheck(options.version));
                      }
                    } else if (dart.nullCheck(options.version) < oldVersion) {
                      if (options.onDowngrade != null) {
                        yield dart.nullCheck(options.onDowngrade)(this, oldVersion, dart.nullCheck(options.version));
                        if (dart.nullCheck(this.openTransaction).transactionId != txn.transactionId) {
                          txn.transactionId = dart.nullCheck(this.openTransaction).transactionId;
                        }
                      }
                    }
                    if (oldVersion !== options.version) {
                      yield sqlite_api$['SqfliteDatabaseExecutorExt|setVersion'](this, dart.nullCheck(options.version));
                    }
                  }).bind(this)), T$.TransactionToFutureOfNull()), {exclusive: true});
                } finally {
                  this.openTransaction = null;
                }
              }
            }
            if (options.onOpen != null) {
              yield dart.nullCheck(options.onOpen)(this);
            }
            return this;
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Object.is(e)) {
              core.print("error " + dart.str(e) + " during open, closing...");
              yield this[_closeDatabase](databaseId);
              dart.rethrow(e$);
            } else
              throw e$;
          } finally {
            this.openTransaction = null;
          }
        }).bind(this));
      }
    }
    dart.defineExtensionMethods(SqfliteDatabaseMixin, ['toString']);
    return SqfliteDatabaseMixin;
  };
  (database_mixin.SqfliteDatabaseMixin[dart.mixinNew] = function() {
    this[openHelper] = null;
    this[options$0] = null;
    this[isClosed] = false;
    this[_$35SqfliteDatabaseMixin$35path] = null;
    this[openTransaction] = null;
    this[_rawLock] = synchronized.Lock.new();
    this[id$] = null;
    this[inTransaction] = false;
    this[doNotUseSynchronized] = false;
    this[_closeLock] = synchronized.Lock.new();
  }).prototype = database_mixin.SqfliteDatabaseMixin.prototype;
  dart.addTypeTests(database_mixin.SqfliteDatabaseMixin);
  dart.addTypeCaches(database_mixin.SqfliteDatabaseMixin);
  database_mixin.SqfliteDatabaseMixin[dart.implements] = () => [database$.SqfliteDatabase, core.Object];
  dart.setMethodSignature(database_mixin.SqfliteDatabaseMixin, () => ({
    __proto__: dart.getMethods(database_mixin.SqfliteDatabaseMixin.__proto__),
    safeInvokeMethod: dart.gFnType(T => [async.Future$(T), [core.String], [dart.nullable(core.Object)]], T => [dart.nullable(core.Object)]),
    invokeMethod: dart.gFnType(T => [async.Future$(T), [core.String], [dart.nullable(core.Object)]], T => [dart.nullable(core.Object)]),
    batch: dart.fnType(sqlite_api$.Batch, []),
    checkNotClosed: dart.fnType(dart.void, []),
    devInvokeMethod: dart.gFnType(T => [async.Future$(T), [core.String], [dart.nullable(core.Object)]], T => [dart.nullable(core.Object)]),
    devInvokeSqlMethod: dart.gFnType(T => [async.Future$(T), [core.String, core.String], [dart.nullable(core.List$(dart.nullable(core.Object)))]], T => [dart.nullable(core.Object)]),
    txnSynchronized: dart.gFnType(T => [async.Future$(T), [dart.nullable(sqlite_api$.Transaction), dart.fnType(async.Future$(T), [dart.nullable(sqlite_api$.Transaction)])]], T => [dart.nullable(core.Object)]),
    txnWriteSynchronized: dart.gFnType(T => [async.Future$(T), [dart.nullable(sqlite_api$.Transaction), dart.fnType(async.Future$(T), [dart.nullable(sqlite_api$.Transaction)])]], T => [dart.nullable(core.Object)]),
    txnExecute: dart.gFnType(T => [async.Future$(T), [dart.nullable(transaction.SqfliteTransaction), core.String, dart.nullable(core.List$(dart.nullable(core.Object)))], {beginTransaction: dart.nullable(core.bool)}, {}], T => [dart.nullable(core.Object)]),
    invokeExecute: dart.gFnType(T => [async.Future$(T), [dart.nullable(transaction.SqfliteTransaction), core.String, dart.nullable(core.List$(dart.nullable(core.Object)))], {beginTransaction: dart.nullable(core.bool), inTransactionChange: dart.nullable(core.bool)}, {}], T => [dart.nullable(core.Object)]),
    txnRawInsert: dart.fnType(async.Future$(core.int), [dart.nullable(transaction.SqfliteTransaction), core.String, dart.nullable(core.List$(dart.nullable(core.Object)))]),
    txnRawQuery: dart.fnType(async.Future$(core.List$(core.Map$(core.String, dart.nullable(core.Object)))), [dart.nullable(transaction.SqfliteTransaction), core.String, dart.nullable(core.List$(dart.nullable(core.Object)))]),
    txnRawQueryCursor: dart.fnType(async.Future$(cursor.SqfliteQueryCursor), [dart.nullable(transaction.SqfliteTransaction), core.String, dart.nullable(core.List$(dart.nullable(core.Object))), core.int]),
    txnQueryCursorGetCurrent: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [dart.nullable(transaction.SqfliteTransaction), cursor.SqfliteQueryCursor]),
    [_closeCursor]: dart.fnType(async.Future$(dart.void), [cursor.SqfliteQueryCursor]),
    txnQueryCursorMoveNext: dart.fnType(async.Future$(core.bool), [dart.nullable(transaction.SqfliteTransaction), cursor.SqfliteQueryCursor]),
    txnQueryCursorClose: dart.fnType(async.Future$(dart.void), [dart.nullable(transaction.SqfliteTransaction), cursor.SqfliteQueryCursor]),
    txnRawUpdate: dart.fnType(async.Future$(core.int), [dart.nullable(transaction.SqfliteTransaction), core.String, dart.nullable(core.List$(dart.nullable(core.Object)))]),
    txnRawDelete: dart.fnType(async.Future$(core.int), [dart.nullable(transaction.SqfliteTransaction), core.String, dart.nullable(core.List$(dart.nullable(core.Object)))]),
    txnApplyBatch: dart.fnType(async.Future$(core.List$(dart.nullable(core.Object))), [dart.nullable(transaction.SqfliteTransaction), batch.SqfliteBatch], {continueOnError: dart.nullable(core.bool), noResult: dart.nullable(core.bool)}, {}),
    newTransaction: dart.fnType(transaction.SqfliteTransaction, []),
    beginTransaction: dart.fnType(async.Future$(transaction.SqfliteTransaction), [], {exclusive: dart.nullable(core.bool)}, {}),
    endTransaction: dart.fnType(async.Future$(dart.void), [transaction.SqfliteTransaction]),
    transaction: dart.gFnType(T => [async.Future$(T), [dart.fnType(async.Future$(T), [sqlite_api$.Transaction])], {exclusive: dart.nullable(core.bool)}, {}], T => [dart.nullable(core.Object)]),
    close: dart.fnType(async.Future$(dart.void), []),
    doClose: dart.fnType(async.Future$(dart.void), []),
    openDatabase: dart.fnType(async.Future$(core.int), []),
    [_closeDatabase]: dart.fnType(async.Future$(dart.void), [dart.nullable(core.int)]),
    doOpen: dart.fnType(async.Future$(database$.SqfliteDatabase), [sqlite_api$.OpenDatabaseOptions])
  }));
  dart.setGetterSignature(database_mixin.SqfliteDatabaseMixin, () => ({
    __proto__: dart.getGetters(database_mixin.SqfliteDatabaseMixin.__proto__),
    factory: factory$.SqfliteDatabaseFactory,
    database: database$.SqfliteDatabase,
    db: database$.SqfliteDatabase,
    isOpen: core.bool,
    path: core.String,
    txn: dart.nullable(transaction.SqfliteTransaction)
  }));
  dart.setSetterSignature(database_mixin.SqfliteDatabaseMixin, () => ({
    __proto__: dart.getSetters(database_mixin.SqfliteDatabaseMixin.__proto__),
    path: core.String
  }));
  dart.setLibraryUri(database_mixin.SqfliteDatabaseMixin, I[8]);
  dart.setFieldSignature(database_mixin.SqfliteDatabaseMixin, () => ({
    __proto__: dart.getFields(database_mixin.SqfliteDatabaseMixin.__proto__),
    openHelper: dart.fieldType(dart.nullable(database$.SqfliteDatabaseOpenHelper)),
    options: dart.fieldType(dart.nullable(sqlite_api$.OpenDatabaseOptions)),
    isClosed: dart.fieldType(core.bool),
    [__SqfliteDatabaseMixin_path]: dart.fieldType(dart.nullable(core.String)),
    openTransaction: dart.fieldType(dart.nullable(transaction.SqfliteTransaction)),
    [_rawLock$]: dart.finalFieldType(synchronized.Lock),
    id: dart.fieldType(dart.nullable(core.int)),
    inTransaction: dart.fieldType(core.bool),
    doNotUseSynchronized: dart.fieldType(core.bool),
    [_closeLock$]: dart.finalFieldType(synchronized.Lock)
  }));
  var _rawQuery = dart.privateName(database_mixin, "_rawQuery");
  var _rawQueryCursor = dart.privateName(database_mixin, "_rawQueryCursor");
  var _rawUpdate = dart.privateName(database_mixin, "_rawUpdate");
  var _rawDelete = dart.privateName(database_mixin, "_rawDelete");
  database_mixin.SqfliteDatabaseExecutorMixin = class SqfliteDatabaseExecutorMixin extends core.Object {};
  database_mixin.SqfliteDatabaseExecutorMixin[dart.mixinOn] = Object => class SqfliteDatabaseExecutorMixin extends Object {
    execute(sql, $arguments = null) {
      this.db.checkNotClosed();
      return this.db.txnExecute(dart.dynamic, this.txn, sql, $arguments);
    }
    rawInsert(sql, $arguments = null) {
      this.db.checkNotClosed();
      return this.db.txnRawInsert(this.txn, sql, $arguments);
    }
    insert(table, values, opts) {
      let nullColumnHack = opts && 'nullColumnHack' in opts ? opts.nullColumnHack : null;
      let conflictAlgorithm = opts && 'conflictAlgorithm' in opts ? opts.conflictAlgorithm : null;
      let builder = new sql_builder$.SqlBuilder.insert(table, values, {nullColumnHack: nullColumnHack, conflictAlgorithm: conflictAlgorithm});
      return this.rawInsert(builder.sql, builder.arguments);
    }
    query(table, opts) {
      let distinct = opts && 'distinct' in opts ? opts.distinct : null;
      let columns = opts && 'columns' in opts ? opts.columns : null;
      let where = opts && 'where' in opts ? opts.where : null;
      let whereArgs = opts && 'whereArgs' in opts ? opts.whereArgs : null;
      let groupBy = opts && 'groupBy' in opts ? opts.groupBy : null;
      let having = opts && 'having' in opts ? opts.having : null;
      let orderBy = opts && 'orderBy' in opts ? opts.orderBy : null;
      let limit = opts && 'limit' in opts ? opts.limit : null;
      let offset = opts && 'offset' in opts ? opts.offset : null;
      let builder = new sql_builder$.SqlBuilder.query(table, {distinct: distinct, columns: columns, where: where, groupBy: groupBy, having: having, orderBy: orderBy, limit: limit, offset: offset, whereArgs: whereArgs});
      return this.rawQuery(builder.sql, builder.arguments);
    }
    rawQuery(sql, $arguments = null) {
      value_utils.checkRawArgs($arguments);
      return this[_rawQuery](sql, $arguments);
    }
    [_rawQuery](sql, $arguments = null) {
      this.db.checkNotClosed();
      return this.db.txnRawQuery(this.txn, sql, $arguments);
    }
    queryCursor(table, opts) {
      let distinct = opts && 'distinct' in opts ? opts.distinct : null;
      let columns = opts && 'columns' in opts ? opts.columns : null;
      let where = opts && 'where' in opts ? opts.where : null;
      let whereArgs = opts && 'whereArgs' in opts ? opts.whereArgs : null;
      let groupBy = opts && 'groupBy' in opts ? opts.groupBy : null;
      let having = opts && 'having' in opts ? opts.having : null;
      let orderBy = opts && 'orderBy' in opts ? opts.orderBy : null;
      let limit = opts && 'limit' in opts ? opts.limit : null;
      let offset = opts && 'offset' in opts ? opts.offset : null;
      let bufferSize = opts && 'bufferSize' in opts ? opts.bufferSize : null;
      let builder = new sql_builder$.SqlBuilder.query(table, {distinct: distinct, columns: columns, where: where, groupBy: groupBy, having: having, orderBy: orderBy, limit: limit, offset: offset, whereArgs: whereArgs});
      return this[_rawQueryCursor](builder.sql, builder.arguments, bufferSize);
    }
    rawQueryCursor(sql, $arguments, opts) {
      let bufferSize = opts && 'bufferSize' in opts ? opts.bufferSize : null;
      value_utils.checkRawArgs($arguments);
      return this[_rawQueryCursor](sql, $arguments, bufferSize);
    }
    [_rawQueryCursor](sql, $arguments, pageSize) {
      pageSize == null ? pageSize = 100 : null;
      this.db.checkNotClosed();
      return this.db.txnRawQueryCursor(this.txn, sql, $arguments, pageSize);
    }
    rawUpdate(sql, $arguments = null) {
      value_utils.checkRawArgs($arguments);
      return this[_rawUpdate](sql, $arguments);
    }
    [_rawUpdate](sql, $arguments = null) {
      this.db.checkNotClosed();
      return this.db.txnRawUpdate(this.txn, sql, $arguments);
    }
    update(table, values, opts) {
      let where = opts && 'where' in opts ? opts.where : null;
      let whereArgs = opts && 'whereArgs' in opts ? opts.whereArgs : null;
      let conflictAlgorithm = opts && 'conflictAlgorithm' in opts ? opts.conflictAlgorithm : null;
      let builder = new sql_builder$.SqlBuilder.update(table, values, {where: where, whereArgs: whereArgs, conflictAlgorithm: conflictAlgorithm});
      return this.rawUpdate(builder.sql, builder.arguments);
    }
    rawDelete(sql, $arguments = null) {
      value_utils.checkRawArgs($arguments);
      return this[_rawDelete](sql, $arguments);
    }
    [_rawDelete](sql, $arguments = null) {
      this.db.checkNotClosed();
      return this.db.txnRawDelete(this.txn, sql, $arguments);
    }
    delete(table, opts) {
      let where = opts && 'where' in opts ? opts.where : null;
      let whereArgs = opts && 'whereArgs' in opts ? opts.whereArgs : null;
      let builder = new sql_builder$.SqlBuilder.delete(table, {where: where, whereArgs: whereArgs});
      return this[_rawDelete](builder.sql, builder.arguments);
    }
  };
  (database_mixin.SqfliteDatabaseExecutorMixin[dart.mixinNew] = function() {
  }).prototype = database_mixin.SqfliteDatabaseExecutorMixin.prototype;
  dart.addTypeTests(database_mixin.SqfliteDatabaseExecutorMixin);
  dart.addTypeCaches(database_mixin.SqfliteDatabaseExecutorMixin);
  database_mixin.SqfliteDatabaseExecutorMixin[dart.implements] = () => [database$.SqfliteDatabaseExecutor, core.Object];
  dart.setMethodSignature(database_mixin.SqfliteDatabaseExecutorMixin, () => ({
    __proto__: dart.getMethods(database_mixin.SqfliteDatabaseExecutorMixin.__proto__),
    execute: dart.fnType(async.Future$(dart.void), [core.String], [dart.nullable(core.List$(dart.nullable(core.Object)))]),
    rawInsert: dart.fnType(async.Future$(core.int), [core.String], [dart.nullable(core.List$(dart.nullable(core.Object)))]),
    insert: dart.fnType(async.Future$(core.int), [core.String, core.Map$(core.String, dart.nullable(core.Object))], {conflictAlgorithm: dart.nullable(sql_builder$.ConflictAlgorithm), nullColumnHack: dart.nullable(core.String)}, {}),
    query: dart.fnType(async.Future$(core.List$(core.Map$(core.String, dart.nullable(core.Object)))), [core.String], {columns: dart.nullable(core.List$(core.String)), distinct: dart.nullable(core.bool), groupBy: dart.nullable(core.String), having: dart.nullable(core.String), limit: dart.nullable(core.int), offset: dart.nullable(core.int), orderBy: dart.nullable(core.String), where: dart.nullable(core.String), whereArgs: dart.nullable(core.List$(dart.nullable(core.Object)))}, {}),
    rawQuery: dart.fnType(async.Future$(core.List$(core.Map$(core.String, dart.nullable(core.Object)))), [core.String], [dart.nullable(core.List$(dart.nullable(core.Object)))]),
    [_rawQuery]: dart.fnType(async.Future$(core.List$(core.Map$(core.String, dart.nullable(core.Object)))), [core.String], [dart.nullable(core.List$(dart.nullable(core.Object)))]),
    queryCursor: dart.fnType(async.Future$(sqlite_api$.QueryCursor), [core.String], {bufferSize: dart.nullable(core.int), columns: dart.nullable(core.List$(core.String)), distinct: dart.nullable(core.bool), groupBy: dart.nullable(core.String), having: dart.nullable(core.String), limit: dart.nullable(core.int), offset: dart.nullable(core.int), orderBy: dart.nullable(core.String), where: dart.nullable(core.String), whereArgs: dart.nullable(core.List$(dart.nullable(core.Object)))}, {}),
    rawQueryCursor: dart.fnType(async.Future$(sqlite_api$.QueryCursor), [core.String, dart.nullable(core.List$(dart.nullable(core.Object)))], {bufferSize: dart.nullable(core.int)}, {}),
    [_rawQueryCursor]: dart.fnType(async.Future$(sqlite_api$.QueryCursor), [core.String, dart.nullable(core.List$(dart.nullable(core.Object))), dart.nullable(core.int)]),
    rawUpdate: dart.fnType(async.Future$(core.int), [core.String], [dart.nullable(core.List$(dart.nullable(core.Object)))]),
    [_rawUpdate]: dart.fnType(async.Future$(core.int), [core.String], [dart.nullable(core.List$(dart.nullable(core.Object)))]),
    update: dart.fnType(async.Future$(core.int), [core.String, core.Map$(core.String, dart.nullable(core.Object))], {conflictAlgorithm: dart.nullable(sql_builder$.ConflictAlgorithm), where: dart.nullable(core.String), whereArgs: dart.nullable(core.List$(dart.nullable(core.Object)))}, {}),
    rawDelete: dart.fnType(async.Future$(core.int), [core.String], [dart.nullable(core.List$(dart.nullable(core.Object)))]),
    [_rawDelete]: dart.fnType(async.Future$(core.int), [core.String], [dart.nullable(core.List$(dart.nullable(core.Object)))]),
    delete: dart.fnType(async.Future$(core.int), [core.String], {where: dart.nullable(core.String), whereArgs: dart.nullable(core.List$(dart.nullable(core.Object)))}, {})
  }));
  dart.setLibraryUri(database_mixin.SqfliteDatabaseExecutorMixin, I[8]);
  const Object_SqfliteDatabaseMixin$36 = class Object_SqfliteDatabaseMixin extends core.Object {};
  (Object_SqfliteDatabaseMixin$36.new = function() {
    database_mixin.SqfliteDatabaseMixin[dart.mixinNew].call(this);
  }).prototype = Object_SqfliteDatabaseMixin$36.prototype;
  dart.applyMixin(Object_SqfliteDatabaseMixin$36, database_mixin.SqfliteDatabaseMixin);
  const Object_SqfliteDatabaseExecutorMixin$36 = class Object_SqfliteDatabaseExecutorMixin extends Object_SqfliteDatabaseMixin$36 {};
  (Object_SqfliteDatabaseExecutorMixin$36.new = function() {
    Object_SqfliteDatabaseExecutorMixin$36.__proto__.new.call(this);
  }).prototype = Object_SqfliteDatabaseExecutorMixin$36.prototype;
  dart.applyMixin(Object_SqfliteDatabaseExecutorMixin$36, database_mixin.SqfliteDatabaseExecutorMixin);
  database_mixin.SqfliteDatabaseBase = class SqfliteDatabaseBase extends Object_SqfliteDatabaseExecutorMixin$36 {
    static ['_#new#tearOff'](openHelper, path, opts) {
      let options = opts && 'options' in opts ? opts.options : null;
      return new database_mixin.SqfliteDatabaseBase.new(openHelper, path, {options: options});
    }
  };
  (database_mixin.SqfliteDatabaseBase.new = function(openHelper, path, opts) {
    let options = opts && 'options' in opts ? opts.options : null;
    database_mixin.SqfliteDatabaseBase.__proto__.new.call(this);
    this.openHelper = openHelper;
    this.path = path;
  }).prototype = database_mixin.SqfliteDatabaseBase.prototype;
  dart.addTypeTests(database_mixin.SqfliteDatabaseBase);
  dart.addTypeCaches(database_mixin.SqfliteDatabaseBase);
  dart.setLibraryUri(database_mixin.SqfliteDatabaseBase, I[8]);
  database_mixin['SqfliteDatabaseMixinExt|txnGetVersion'] = function SqfliteDatabaseMixinExt$124txnGetVersion($this, txn) {
    return async.async(core.int, function* SqfliteDatabaseMixinExt$124txnGetVersion() {
      let t25;
      let rows = (yield $this.txnRawQuery(txn, "PRAGMA user_version", null));
      t25 = utils$1.firstIntValue(rows);
      return t25 == null ? 0 : t25;
    });
  };
  database_mixin['SqfliteDatabaseMixinExt|get#txnGetVersion'] = function SqfliteDatabaseMixinExt$124get$35txnGetVersion($this) {
    return dart.fn(txn => database_mixin['SqfliteDatabaseMixinExt|txnGetVersion']($this, txn), T$.SqfliteTransactionNToFutureOfint());
  };
  database_mixin['SqfliteDatabaseMixinExt|txnSetVersion'] = function SqfliteDatabaseMixinExt$124txnSetVersion($this, txn, version) {
    return async.async(dart.void, function* SqfliteDatabaseMixinExt$124txnSetVersion() {
      yield $this.txnExecute(dart.void, txn, "PRAGMA user_version = " + dart.str(version), null);
    });
  };
  database_mixin['SqfliteDatabaseMixinExt|get#txnSetVersion'] = function SqfliteDatabaseMixinExt$124get$35txnSetVersion($this) {
    return dart.fn((txn, version) => database_mixin['SqfliteDatabaseMixinExt|txnSetVersion']($this, txn, version), T$.SqfliteTransactionNAndintToFutureOfvoid());
  };
  database_mixin['SqfliteDatabaseMixinExt|getBaseDatabaseMethodArguments'] = function SqfliteDatabaseMixinExt$124getBaseDatabaseMethodArguments($this, txn) {
    let t30, t30$;
    let map = (() => {
      let t29 = new (T$.IdentityMapOfString$ObjectN()).new();
      t29[$_set]("id", $this.id);
      if ((t30 = txn, t30 == null ? null : t30.transactionId) != null) t29[$_set]("transactionId", (t30$ = txn, t30$ == null ? null : t30$.transactionId));
      return t29;
    })();
    return map;
  };
  database_mixin['SqfliteDatabaseMixinExt|get#getBaseDatabaseMethodArguments'] = function SqfliteDatabaseMixinExt$124get$35getBaseDatabaseMethodArguments($this) {
    return dart.fn(txn => database_mixin['SqfliteDatabaseMixinExt|getBaseDatabaseMethodArguments']($this, txn), T$.SqfliteTransactionNToMapOfString$ObjectN());
  };
  database_mixin['SqfliteDatabaseMixinExt|getBaseDatabaseMethodArgumentsInTransactionChange'] = function SqfliteDatabaseMixinExt$124getBaseDatabaseMethodArgumentsInTransactionChange($this, txn, inTransaction) {
    let map = database_mixin['SqfliteDatabaseMixinExt|getBaseDatabaseMethodArguments']($this, txn);
    database_mixin['SqfliteDatabaseMixinExt|addInTransactionChangeParam']($this, map, inTransaction);
    return map;
  };
  database_mixin['SqfliteDatabaseMixinExt|get#getBaseDatabaseMethodArgumentsInTransactionChange'] = function SqfliteDatabaseMixinExt$124get$35getBaseDatabaseMethodArgumentsInTransactionChange($this) {
    return dart.fn((txn, inTransaction) => database_mixin['SqfliteDatabaseMixinExt|getBaseDatabaseMethodArgumentsInTransactionChange']($this, txn, inTransaction), T$.SqfliteTransactionNAndboolNToMapOfString$ObjectN());
  };
  database_mixin['SqfliteDatabaseMixinExt|addInTransactionChangeParam'] = function SqfliteDatabaseMixinExt$124addInTransactionChangeParam($this, map, inTransaction) {
    if (inTransaction != null) {
      map[$_set]("inTransaction", inTransaction);
    }
  };
  database_mixin['SqfliteDatabaseMixinExt|get#addInTransactionChangeParam'] = function SqfliteDatabaseMixinExt$124get$35addInTransactionChangeParam($this) {
    return dart.fn((map, inTransaction) => database_mixin['SqfliteDatabaseMixinExt|addInTransactionChangeParam']($this, map, inTransaction), T$.MapOfString$ObjectNAndboolNTovoid());
  };
  database_mixin['SqfliteDatabaseMixinExt|_txnGetSqlMethodArguments'] = function SqfliteDatabaseMixinExt$124_txnGetSqlMethodArguments($this, txn, sql, sqlArguments) {
    let t37;
    let methodArguments = (t37 = (() => {
      let t36 = new (T$.IdentityMapOfString$ObjectN()).new();
      t36[$_set]("sql", sql);
      if (sqlArguments != null) t36[$_set]("arguments", sqlArguments);
      return t36;
    })(), (() => {
      t37[$addAll](database_mixin['SqfliteDatabaseMixinExt|getBaseDatabaseMethodArguments']($this, txn));
      return t37;
    })());
    return methodArguments;
  };
  database_mixin['SqfliteDatabaseMixinExt|get#_txnGetSqlMethodArguments'] = function SqfliteDatabaseMixinExt$124get$35_txnGetSqlMethodArguments($this) {
    return dart.fn((txn, sql, sqlArguments) => database_mixin['SqfliteDatabaseMixinExt|_txnGetSqlMethodArguments']($this, txn, sql, sqlArguments), T$.SqfliteTransactionNAndStringAndListNOfObjectNToMapOfString$ObjectN());
  };
  database_mixin['SqfliteDatabaseMixinExt|get#_mixin'] = function SqfliteDatabaseMixinExt$124get$35_mixin($this) {
    return database_mixin.SqfliteDatabaseMixin.as($this);
  };
  database_mixin['SqfliteDatabaseMixinExt|get#readOnly'] = function SqfliteDatabaseMixinExt$124get$35readOnly($this) {
    let t41, t40, t40$;
    t40$ = (t40 = database_mixin['SqfliteDatabaseMixinExt|get#_mixin']($this).openHelper, t40 == null ? null : (t41 = t40.options, t41 == null ? null : t41.readOnly));
    return t40$ == null ? false : t40$;
  };
  database_mixin['SqfliteDatabaseMixinExt|_txnRawUpdateOrDelete'] = function SqfliteDatabaseMixinExt$124_txnRawUpdateOrDelete($this, txn, sql, $arguments) {
    return database_mixin['SqfliteDatabaseMixinExt|get#_mixin']($this).txnWriteSynchronized(core.int, txn, dart.fn(_ => async.async(core.int, function*() {
      let t41, t41$;
      let result = (yield database_mixin['SqfliteDatabaseMixinExt|get#_mixin']($this).safeInvokeMethod(T$.intN(), "update", (t41 = new (T$.IdentityMapOfString$ObjectN()).from(["sql", sql, "arguments", $arguments]), (() => {
        t41[$addAll](database_mixin['SqfliteDatabaseMixinExt|getBaseDatabaseMethodArguments']($this, txn));
        return t41;
      })())));
      t41$ = result;
      return t41$ == null ? 0 : t41$;
    }), T$.TransactionNToFutureOfint()));
  };
  database_mixin['SqfliteDatabaseMixinExt|get#_txnRawUpdateOrDelete'] = function SqfliteDatabaseMixinExt$124get$35_txnRawUpdateOrDelete($this) {
    return dart.fn((txn, sql, $arguments) => database_mixin['SqfliteDatabaseMixinExt|_txnRawUpdateOrDelete']($this, txn, sql, $arguments), T$.SqfliteTransactionNAndStringAndListNOfObjectNToFutureOfint());
  };
  database_mixin['SqfliteDatabaseMixinExt|_txnTransaction'] = function SqfliteDatabaseMixinExt$124_txnTransaction(T, $this, txn, action, opts) {
    let exclusive = opts && 'exclusive' in opts ? opts.exclusive : null;
    return async.async(T, function* SqfliteDatabaseMixinExt$124_txnTransaction() {
      let successfull = null;
      let transactionStarted = txn == null;
      if (transactionStarted) {
        txn = (yield $this.beginTransaction({exclusive: exclusive}));
      }
      let result = null;
      try {
        result = (yield action(txn));
        successfull = true;
      } finally {
        if (transactionStarted) {
          let sqfliteTransaction = transaction.SqfliteTransaction.as(txn);
          sqfliteTransaction.successful = successfull;
          yield $this.endTransaction(sqfliteTransaction);
        }
      }
      return result;
    });
  };
  database_mixin['SqfliteDatabaseMixinExt|get#_txnTransaction'] = function SqfliteDatabaseMixinExt$124get$35_txnTransaction($this) {
    return dart.fn((T, txn, action, opts) => {
      let exclusive = opts && 'exclusive' in opts ? opts.exclusive : null;
      return database_mixin['SqfliteDatabaseMixinExt|_txnTransaction'](T, $this, txn, action, {exclusive: exclusive});
    }, T$.TransactionNAndFn__ToFutureOfT());
  };
  database_mixin['SqfliteDatabaseMixinExt|txnBeginTransaction'] = function SqfliteDatabaseMixinExt$124txnBeginTransaction($this, txn, opts) {
    let exclusive = opts && 'exclusive' in opts ? opts.exclusive : null;
    return async.async(dart.void, function* SqfliteDatabaseMixinExt$124txnBeginTransaction() {
      let response = null;
      if (database_mixin['SqfliteDatabaseMixinExt|get#readOnly']($this) !== true) {
        if (exclusive === true) {
          response = (yield $this.txnExecute(dart.dynamic, txn, "BEGIN EXCLUSIVE", null, {beginTransaction: true}));
        } else {
          response = (yield $this.txnExecute(dart.dynamic, txn, "BEGIN IMMEDIATE", null, {beginTransaction: true}));
        }
      }
      if (core.Map.is(response)) {
        let transactionId = response[$_get]("transactionId");
        if (core.int.is(transactionId)) {
          txn.transactionId = transactionId;
        }
      }
    });
  };
  database_mixin['SqfliteDatabaseMixinExt|get#txnBeginTransaction'] = function SqfliteDatabaseMixinExt$124get$35txnBeginTransaction($this) {
    return dart.fn((txn, opts) => {
      let exclusive = opts && 'exclusive' in opts ? opts.exclusive : null;
      return database_mixin['SqfliteDatabaseMixinExt|txnBeginTransaction']($this, txn, {exclusive: exclusive});
    }, T$.SqfliteTransaction__ToFutureOfvoid());
  };
  var _message$ = dart.privateName(exception, "_message");
  exception.DatabaseException = class DatabaseException extends core.Object {
    toString() {
      return "DatabaseException(" + dart.str(this[_message$]) + ")";
    }
    isNoSuchTableError(table = null) {
      if (this[_message$] != null) {
        let expected = "no such table: ";
        if (table != null) {
          expected = expected + dart.notNull(table);
        }
        return dart.nullCheck(this[_message$])[$contains](expected);
      }
      return false;
    }
    isDuplicateColumnError(column = null) {
      if (this[_message$] != null) {
        let expected = "duplicate column name: ";
        if (column != null) {
          expected = expected + dart.notNull(column);
        }
        return dart.nullCheck(this[_message$])[$contains](expected);
      }
      return false;
    }
    isSyntaxError() {
      if (this[_message$] != null) {
        return dart.nullCheck(this[_message$])[$contains]("syntax error");
      }
      return false;
    }
    isOpenFailedError() {
      if (this[_message$] != null) {
        return dart.nullCheck(this[_message$])[$contains]("open_failed");
      }
      return false;
    }
    isDatabaseClosedError() {
      if (this[_message$] != null) {
        return dart.nullCheck(this[_message$])[$contains]("database_closed") || dart.nullCheck(this[_message$])[$contains]("This database has already been closed");
      }
      return false;
    }
    isReadOnlyError() {
      if (this[_message$] != null) {
        return dart.nullCheck(this[_message$])[$contains]("readonly");
      }
      return false;
    }
    isUniqueConstraintError(field = null) {
      if (this[_message$] != null) {
        let expected = "UNIQUE constraint failed: ";
        if (field != null) {
          expected = expected + dart.notNull(field);
        }
        return dart.nullCheck(this[_message$])[$toLowerCase]()[$contains](expected[$toLowerCase]());
      }
      return false;
    }
    isNotNullConstraintError(field = null) {
      if (this[_message$] != null) {
        let expected = "NOT NULL constraint failed: ";
        if (field != null) {
          expected = expected + dart.notNull(field);
        }
        return dart.nullCheck(this[_message$])[$toLowerCase]()[$contains](expected[$toLowerCase]());
      }
      return false;
    }
  };
  (exception.DatabaseException.new = function(_message) {
    this[_message$] = _message;
    ;
  }).prototype = exception.DatabaseException.prototype;
  dart.addTypeTests(exception.DatabaseException);
  dart.addTypeCaches(exception.DatabaseException);
  exception.DatabaseException[dart.implements] = () => [core.Exception];
  dart.setMethodSignature(exception.DatabaseException, () => ({
    __proto__: dart.getMethods(exception.DatabaseException.__proto__),
    isNoSuchTableError: dart.fnType(core.bool, [], [dart.nullable(core.String)]),
    isDuplicateColumnError: dart.fnType(core.bool, [], [dart.nullable(core.String)]),
    isSyntaxError: dart.fnType(core.bool, []),
    isOpenFailedError: dart.fnType(core.bool, []),
    isDatabaseClosedError: dart.fnType(core.bool, []),
    isReadOnlyError: dart.fnType(core.bool, []),
    isUniqueConstraintError: dart.fnType(core.bool, [], [dart.nullable(core.String)]),
    isNotNullConstraintError: dart.fnType(core.bool, [], [dart.nullable(core.String)])
  }));
  dart.setLibraryUri(exception.DatabaseException, I[9]);
  dart.setFieldSignature(exception.DatabaseException, () => ({
    __proto__: dart.getFields(exception.DatabaseException.__proto__),
    [_message$]: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(exception.DatabaseException, ['toString']);
  var result$ = dart.privateName(exception, "SqfliteDatabaseException.result");
  var _resultCode = dart.privateName(exception, "_resultCode");
  exception.SqfliteDatabaseException = class SqfliteDatabaseException extends exception.DatabaseException {
    get result() {
      return this[result$];
    }
    set result(value) {
      this[result$] = value;
    }
    static ['_#new#tearOff'](message, result, opts) {
      let resultCode = opts && 'resultCode' in opts ? opts.resultCode : null;
      return new exception.SqfliteDatabaseException.new(message, result, {resultCode: resultCode});
    }
    get message() {
      return this[_message$];
    }
    get resultMap() {
      return core.Map.as(this.result);
    }
    toString() {
      if (core.Map.is(this.result)) {
        if (this.resultMap[$_get]("sql") != null) {
          let args = this.resultMap[$_get]("arguments");
          if (core.List.is(args)) {
            return "DatabaseException(" + dart.str(this[_message$]) + ") sql '" + dart.str(this.resultMap[$_get]("sql")) + "' args " + arg_utils.argumentsToString(args);
          } else {
            return "DatabaseException(" + dart.str(this[_message$]) + ") sql '" + dart.str(this.resultMap[$_get]("sql")) + "'";
          }
        }
      }
      return super.toString();
    }
    getResultCode() {
      let t46;
      t46 = this[_resultCode];
      return t46 == null ? this[_resultCode] = dart.fn(() => {
        let message = dart.nullCheck(this[_message$])[$toLowerCase]();
        function findCode(patternPrefix) {
          let index = message[$indexOf](patternPrefix);
          if (index !== -1) {
            try {
              let code = message[$substring](index + patternPrefix.length)[$trim]()[$split](" ")[$_get](0);
              let endIndex = code[$indexOf](")");
              if (endIndex !== -1) {
                code = code[$substring](0, endIndex);
              }
              let resultCode = core.int.tryParse(code);
              if (resultCode != null) {
                return resultCode;
              }
            } catch (e) {
              let _ = dart.getThrown(e);
              if (core.Object.is(_)) {
              } else
                throw e;
            }
          }
          return null;
        }
        dart.fn(findCode, T$.StringTointN());
        let code = findCode("(sqlite code ");
        if (code != null) {
          return code;
        }
        code = findCode("(code ");
        if (code != null) {
          return code;
        }
        code = findCode("code=");
        if (code != null) {
          return code;
        }
        return null;
      }, T$.VoidTointN())() : t46;
    }
  };
  (exception.SqfliteDatabaseException.new = function(message, result, opts) {
    let resultCode = opts && 'resultCode' in opts ? opts.resultCode : null;
    this[_resultCode] = null;
    this[result$] = result;
    exception.SqfliteDatabaseException.__proto__.new.call(this, message);
    this[_resultCode] = resultCode;
  }).prototype = exception.SqfliteDatabaseException.prototype;
  dart.addTypeTests(exception.SqfliteDatabaseException);
  dart.addTypeCaches(exception.SqfliteDatabaseException);
  dart.setMethodSignature(exception.SqfliteDatabaseException, () => ({
    __proto__: dart.getMethods(exception.SqfliteDatabaseException.__proto__),
    getResultCode: dart.fnType(dart.nullable(core.int), [])
  }));
  dart.setGetterSignature(exception.SqfliteDatabaseException, () => ({
    __proto__: dart.getGetters(exception.SqfliteDatabaseException.__proto__),
    message: dart.nullable(core.String),
    resultMap: core.Map
  }));
  dart.setLibraryUri(exception.SqfliteDatabaseException, I[9]);
  dart.setFieldSignature(exception.SqfliteDatabaseException, () => ({
    __proto__: dart.getFields(exception.SqfliteDatabaseException.__proto__),
    [_resultCode]: dart.fieldType(dart.nullable(core.int)),
    result: dart.fieldType(dart.nullable(core.Object))
  }));
  dart.defineExtensionMethods(exception.SqfliteDatabaseException, ['toString']);
  factory$.SqfliteDatabaseFactory = class SqfliteDatabaseFactory extends core.Object {};
  (factory$.SqfliteDatabaseFactory.new = function() {
    ;
  }).prototype = factory$.SqfliteDatabaseFactory.prototype;
  dart.addTypeTests(factory$.SqfliteDatabaseFactory);
  dart.addTypeCaches(factory$.SqfliteDatabaseFactory);
  factory$.SqfliteDatabaseFactory[dart.implements] = () => [sqlite_api$.DatabaseFactory, factory.SqfliteInvokeHandler];
  dart.setLibraryUri(factory$.SqfliteDatabaseFactory, I[10]);
  factory.SqfliteInvokeHandler = class SqfliteInvokeHandler extends core.Object {};
  (factory.SqfliteInvokeHandler.new = function() {
    ;
  }).prototype = factory.SqfliteInvokeHandler.prototype;
  dart.addTypeTests(factory.SqfliteInvokeHandler);
  dart.addTypeCaches(factory.SqfliteInvokeHandler);
  dart.setLibraryUri(factory.SqfliteInvokeHandler, I[11]);
  var _invokeMethod$ = dart.privateName(factory, "_invokeMethod");
  const Object_SqfliteDatabaseFactoryMixin$36$0 = class Object_SqfliteDatabaseFactoryMixin extends core.Object {};
  (Object_SqfliteDatabaseFactoryMixin$36$0.new = function() {
    factory_mixin.SqfliteDatabaseFactoryMixin[dart.mixinNew].call(this);
  }).prototype = Object_SqfliteDatabaseFactoryMixin$36$0.prototype;
  dart.applyMixin(Object_SqfliteDatabaseFactoryMixin$36$0, factory_mixin.SqfliteDatabaseFactoryMixin);
  factory._SqfliteDatabaseFactoryImpl = class _SqfliteDatabaseFactoryImpl extends Object_SqfliteDatabaseFactoryMixin$36$0 {
    static ['_#new#tearOff'](_invokeMethod, opts) {
      let tag = opts && 'tag' in opts ? opts.tag : null;
      return new factory._SqfliteDatabaseFactoryImpl.new(_invokeMethod, {tag: tag});
    }
    invokeMethod(T, method, $arguments = null) {
      return async.async(T, (function* invokeMethod() {
        let t48, t47;
        return T.as(yield (t47 = method, t48 = $arguments, this[_invokeMethod$](t47, t48)));
      }).bind(this));
    }
  };
  (factory._SqfliteDatabaseFactoryImpl.new = function(_invokeMethod, opts) {
    let tag = opts && 'tag' in opts ? opts.tag : null;
    this[_invokeMethod$] = _invokeMethod;
    factory._SqfliteDatabaseFactoryImpl.__proto__.new.call(this);
    this.tag = tag;
  }).prototype = factory._SqfliteDatabaseFactoryImpl.prototype;
  dart.addTypeTests(factory._SqfliteDatabaseFactoryImpl);
  dart.addTypeCaches(factory._SqfliteDatabaseFactoryImpl);
  factory._SqfliteDatabaseFactoryImpl[dart.implements] = () => [factory.SqfliteInvokeHandler];
  dart.setMethodSignature(factory._SqfliteDatabaseFactoryImpl, () => ({
    __proto__: dart.getMethods(factory._SqfliteDatabaseFactoryImpl.__proto__),
    invokeMethod: dart.gFnType(T => [async.Future$(T), [core.String], [dart.nullable(core.Object)]], T => [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(factory._SqfliteDatabaseFactoryImpl, I[11]);
  dart.setFieldSignature(factory._SqfliteDatabaseFactoryImpl, () => ({
    __proto__: dart.getFields(factory._SqfliteDatabaseFactoryImpl.__proto__),
    [_invokeMethod$]: dart.finalFieldType(dart.fnType(async.Future, [core.String], [dart.nullable(core.Object)]))
  }));
  factory.buildDatabaseFactory = function buildDatabaseFactory(opts) {
    let tag = opts && 'tag' in opts ? opts.tag : null;
    let invokeMethod = opts && 'invokeMethod' in opts ? opts.invokeMethod : null;
    let impl = new factory._SqfliteDatabaseFactoryImpl.new(invokeMethod, {tag: tag});
    return impl;
  };
  var version$ = dart.privateName(open_options, "SqfliteOpenDatabaseOptions.version");
  var onConfigure$ = dart.privateName(open_options, "SqfliteOpenDatabaseOptions.onConfigure");
  var onCreate$ = dart.privateName(open_options, "SqfliteOpenDatabaseOptions.onCreate");
  var onUpgrade$ = dart.privateName(open_options, "SqfliteOpenDatabaseOptions.onUpgrade");
  var onDowngrade$ = dart.privateName(open_options, "SqfliteOpenDatabaseOptions.onDowngrade");
  var onOpen$ = dart.privateName(open_options, "SqfliteOpenDatabaseOptions.onOpen");
  var readOnly$ = dart.privateName(open_options, "SqfliteOpenDatabaseOptions.readOnly");
  var singleInstance$ = dart.privateName(open_options, "SqfliteOpenDatabaseOptions.singleInstance");
  var __OpenDatabaseOptions_singleInstance$ = dart.privateName(open_options, "_#OpenDatabaseOptions#singleInstance");
  var __OpenDatabaseOptions_readOnly$ = dart.privateName(open_options, "_#OpenDatabaseOptions#readOnly");
  var __OpenDatabaseOptions_singleInstance_ = dart.privateName(open_options, "_#OpenDatabaseOptions#singleInstance=");
  var __OpenDatabaseOptions_readOnly_ = dart.privateName(open_options, "_#OpenDatabaseOptions#readOnly=");
  open_options.SqfliteOpenDatabaseOptions = class SqfliteOpenDatabaseOptions extends core.Object {
    get version() {
      return this[version$];
    }
    set version(value) {
      this[version$] = value;
    }
    get onConfigure() {
      return this[onConfigure$];
    }
    set onConfigure(value) {
      this[onConfigure$] = value;
    }
    get onCreate() {
      return this[onCreate$];
    }
    set onCreate(value) {
      this[onCreate$] = value;
    }
    get onUpgrade() {
      return this[onUpgrade$];
    }
    set onUpgrade(value) {
      this[onUpgrade$] = value;
    }
    get onDowngrade() {
      return this[onDowngrade$];
    }
    set onDowngrade(value) {
      this[onDowngrade$] = value;
    }
    get onOpen() {
      return this[onOpen$];
    }
    set onOpen(value) {
      this[onOpen$] = value;
    }
    get readOnly() {
      return this[readOnly$];
    }
    set readOnly(value) {
      this[readOnly$] = value;
    }
    get singleInstance() {
      return this[singleInstance$];
    }
    set singleInstance(value) {
      this[singleInstance$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let version = opts && 'version' in opts ? opts.version : null;
      let onConfigure = opts && 'onConfigure' in opts ? opts.onConfigure : null;
      let onCreate = opts && 'onCreate' in opts ? opts.onCreate : null;
      let onUpgrade = opts && 'onUpgrade' in opts ? opts.onUpgrade : null;
      let onDowngrade = opts && 'onDowngrade' in opts ? opts.onDowngrade : null;
      let onOpen = opts && 'onOpen' in opts ? opts.onOpen : null;
      let readOnly = opts && 'readOnly' in opts ? opts.readOnly : false;
      let singleInstance = opts && 'singleInstance' in opts ? opts.singleInstance : true;
      return new open_options.SqfliteOpenDatabaseOptions.new({version: version, onConfigure: onConfigure, onCreate: onCreate, onUpgrade: onUpgrade, onDowngrade: onDowngrade, onOpen: onOpen, readOnly: readOnly, singleInstance: singleInstance});
    }
    toString() {
      let map = new (T$.IdentityMapOfString$ObjectN()).new();
      if (this.version != null) {
        map[$_set]("version", this.version);
      }
      map[$_set]("readOnly", this.readOnly);
      map[$_set]("singleInstance", this.singleInstance);
      return map[$toString]();
    }
    get [__OpenDatabaseOptions_singleInstance]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[7] || CT.C7)));
    }
    get [__OpenDatabaseOptions_readOnly]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[8] || CT.C8)));
    }
    set [__OpenDatabaseOptions_singleInstance](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[9] || CT.C9, value)));
    }
    set [__OpenDatabaseOptions_readOnly](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[10] || CT.C10, value)));
    }
  };
  (open_options.SqfliteOpenDatabaseOptions.new = function(opts) {
    let t47, t47$;
    let version = opts && 'version' in opts ? opts.version : null;
    let onConfigure = opts && 'onConfigure' in opts ? opts.onConfigure : null;
    let onCreate = opts && 'onCreate' in opts ? opts.onCreate : null;
    let onUpgrade = opts && 'onUpgrade' in opts ? opts.onUpgrade : null;
    let onDowngrade = opts && 'onDowngrade' in opts ? opts.onDowngrade : null;
    let onOpen = opts && 'onOpen' in opts ? opts.onOpen : null;
    let readOnly = opts && 'readOnly' in opts ? opts.readOnly : false;
    let singleInstance = opts && 'singleInstance' in opts ? opts.singleInstance : true;
    this[version$] = version;
    this[onConfigure$] = onConfigure;
    this[onCreate$] = onCreate;
    this[onUpgrade$] = onUpgrade;
    this[onDowngrade$] = onDowngrade;
    this[onOpen$] = onOpen;
    this[readOnly$] = (t47 = readOnly, t47 == null ? false : t47);
    this[singleInstance$] = (t47$ = singleInstance, t47$ == null ? true : t47$);
    ;
  }).prototype = open_options.SqfliteOpenDatabaseOptions.prototype;
  dart.addTypeTests(open_options.SqfliteOpenDatabaseOptions);
  dart.addTypeCaches(open_options.SqfliteOpenDatabaseOptions);
  open_options.SqfliteOpenDatabaseOptions[dart.implements] = () => [sqlite_api$.OpenDatabaseOptions];
  dart.setGetterSignature(open_options.SqfliteOpenDatabaseOptions, () => ({
    __proto__: dart.getGetters(open_options.SqfliteOpenDatabaseOptions.__proto__),
    [__OpenDatabaseOptions_singleInstance]: dart.nullable(core.bool),
    [__OpenDatabaseOptions_readOnly]: dart.nullable(core.bool)
  }));
  dart.setSetterSignature(open_options.SqfliteOpenDatabaseOptions, () => ({
    __proto__: dart.getSetters(open_options.SqfliteOpenDatabaseOptions.__proto__),
    [__OpenDatabaseOptions_singleInstance]: dart.nullable(core.bool),
    [__OpenDatabaseOptions_readOnly]: dart.nullable(core.bool)
  }));
  dart.setLibraryUri(open_options.SqfliteOpenDatabaseOptions, I[12]);
  dart.setFieldSignature(open_options.SqfliteOpenDatabaseOptions, () => ({
    __proto__: dart.getFields(open_options.SqfliteOpenDatabaseOptions.__proto__),
    version: dart.fieldType(dart.nullable(core.int)),
    onConfigure: dart.fieldType(dart.nullable(dart.fnType(dart.void, [sqlite_api$.Database]))),
    onCreate: dart.fieldType(dart.nullable(dart.fnType(dart.void, [sqlite_api$.Database, core.int]))),
    onUpgrade: dart.fieldType(dart.nullable(dart.fnType(dart.void, [sqlite_api$.Database, core.int, core.int]))),
    onDowngrade: dart.fieldType(dart.nullable(dart.fnType(dart.void, [sqlite_api$.Database, core.int, core.int]))),
    onOpen: dart.fieldType(dart.nullable(dart.fnType(dart.void, [sqlite_api$.Database]))),
    readOnly: dart.fieldType(core.bool),
    singleInstance: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(open_options.SqfliteOpenDatabaseOptions, ['toString']);
  var transactionId$ = dart.privateName(transaction, "SqfliteTransactionParam.transactionId");
  transaction.SqfliteTransactionParam = class SqfliteTransactionParam extends core.Object {
    get transactionId() {
      return this[transactionId$];
    }
    set transactionId(value) {
      super.transactionId = value;
    }
    static ['_#new#tearOff'](transactionId) {
      return new transaction.SqfliteTransactionParam.new(transactionId);
    }
  };
  (transaction.SqfliteTransactionParam.new = function(transactionId) {
    this[transactionId$] = transactionId;
    ;
  }).prototype = transaction.SqfliteTransactionParam.prototype;
  dart.addTypeTests(transaction.SqfliteTransactionParam);
  dart.addTypeCaches(transaction.SqfliteTransactionParam);
  dart.setLibraryUri(transaction.SqfliteTransactionParam, I[13]);
  dart.setFieldSignature(transaction.SqfliteTransactionParam, () => ({
    __proto__: dart.getFields(transaction.SqfliteTransactionParam.__proto__),
    transactionId: dart.finalFieldType(dart.nullable(core.int))
  }));
  var transactionId = dart.privateName(transaction, "SqfliteTransactionMixin.transactionId");
  transaction.SqfliteTransactionMixin = class SqfliteTransactionMixin extends core.Object {};
  transaction.SqfliteTransactionMixin[dart.mixinOn] = Object => class SqfliteTransactionMixin extends Object {
    get transactionId() {
      return this[transactionId];
    }
    set transactionId(value) {
      this[transactionId] = value;
    }
  };
  (transaction.SqfliteTransactionMixin[dart.mixinNew] = function() {
    this[transactionId] = null;
  }).prototype = transaction.SqfliteTransactionMixin.prototype;
  dart.addTypeTests(transaction.SqfliteTransactionMixin);
  dart.addTypeCaches(transaction.SqfliteTransactionMixin);
  transaction.SqfliteTransactionMixin[dart.implements] = () => [sqlite_api$.Transaction, core.Object];
  dart.setLibraryUri(transaction.SqfliteTransactionMixin, I[13]);
  dart.setFieldSignature(transaction.SqfliteTransactionMixin, () => ({
    __proto__: dart.getFields(transaction.SqfliteTransactionMixin.__proto__),
    transactionId: dart.fieldType(dart.nullable(core.int))
  }));
  var database$0 = dart.privateName(transaction, "SqfliteTransaction.database");
  var successful = dart.privateName(transaction, "SqfliteTransaction.successful");
  const Object_SqfliteDatabaseExecutorMixin$36$ = class Object_SqfliteDatabaseExecutorMixin extends core.Object {};
  (Object_SqfliteDatabaseExecutorMixin$36$.new = function() {
  }).prototype = Object_SqfliteDatabaseExecutorMixin$36$.prototype;
  dart.applyMixin(Object_SqfliteDatabaseExecutorMixin$36$, database_mixin.SqfliteDatabaseExecutorMixin);
  const Object_SqfliteTransactionMixin$36 = class Object_SqfliteTransactionMixin extends Object_SqfliteDatabaseExecutorMixin$36$ {};
  (Object_SqfliteTransactionMixin$36.new = function() {
    transaction.SqfliteTransactionMixin[dart.mixinNew].call(this);
  }).prototype = Object_SqfliteTransactionMixin$36.prototype;
  dart.applyMixin(Object_SqfliteTransactionMixin$36, transaction.SqfliteTransactionMixin);
  transaction.SqfliteTransaction = class SqfliteTransaction extends Object_SqfliteTransactionMixin$36 {
    get database() {
      return this[database$0];
    }
    set database(value) {
      super.database = value;
    }
    get successful() {
      return this[successful];
    }
    set successful(value) {
      this[successful] = value;
    }
    static ['_#new#tearOff'](database) {
      return new transaction.SqfliteTransaction.new(database);
    }
    get db() {
      return this.database;
    }
    get txn() {
      return this;
    }
    batch() {
      return new batch.SqfliteTransactionBatch.new(this);
    }
  };
  (transaction.SqfliteTransaction.new = function(database) {
    this[successful] = null;
    this[database$0] = database;
    transaction.SqfliteTransaction.__proto__.new.call(this);
    ;
  }).prototype = transaction.SqfliteTransaction.prototype;
  dart.addTypeTests(transaction.SqfliteTransaction);
  dart.addTypeCaches(transaction.SqfliteTransaction);
  transaction.SqfliteTransaction[dart.implements] = () => [sqlite_api$.Transaction];
  dart.setMethodSignature(transaction.SqfliteTransaction, () => ({
    __proto__: dart.getMethods(transaction.SqfliteTransaction.__proto__),
    batch: dart.fnType(sqlite_api$.Batch, [])
  }));
  dart.setGetterSignature(transaction.SqfliteTransaction, () => ({
    __proto__: dart.getGetters(transaction.SqfliteTransaction.__proto__),
    db: database$.SqfliteDatabase,
    txn: transaction.SqfliteTransaction
  }));
  dart.setLibraryUri(transaction.SqfliteTransaction, I[13]);
  dart.setFieldSignature(transaction.SqfliteTransaction, () => ({
    __proto__: dart.getFields(transaction.SqfliteTransaction.__proto__),
    database: dart.finalFieldType(database_mixin.SqfliteDatabaseMixin),
    successful: dart.fieldType(dart.nullable(core.bool))
  }));
  transaction.getForcedSqfliteTransaction = function getForcedSqfliteTransaction(database) {
    let t47;
    t47 = new transaction.SqfliteTransaction.new(database);
    return (() => {
      t47.transactionId = -1;
      return t47;
    })();
  };
  sqflite_debug['SqfliteDatabaseFactoryDebug|debugSetLogLevel'] = function SqfliteDatabaseFactoryDebug$124debugSetLogLevel($this, logLevel) {
    return async.async(dart.void, function* SqfliteDatabaseFactoryDebug$124debugSetLogLevel() {
      yield sqflite_debug['SqfliteDatabaseFactoryDebug|debugSetOptions']($this, new compat$.SqfliteOptions.new({logLevel: logLevel}));
    });
  };
  sqflite_debug['SqfliteDatabaseFactoryDebug|get#debugSetLogLevel'] = function SqfliteDatabaseFactoryDebug$124get$35debugSetLogLevel($this) {
    return dart.fn(logLevel => sqflite_debug['SqfliteDatabaseFactoryDebug|debugSetLogLevel']($this, logLevel), T$.intToFutureOfvoid());
  };
  sqflite_debug['SqfliteDatabaseFactoryDebug|debugSetOptions'] = function SqfliteDatabaseFactoryDebug$124debugSetOptions($this, options) {
    return async.async(dart.void, function* SqfliteDatabaseFactoryDebug$124debugSetOptions() {
      yield factory.SqfliteInvokeHandler.as($this).invokeMethod(dart.dynamic, "options", options.toMap());
    });
  };
  sqflite_debug['SqfliteDatabaseFactoryDebug|get#debugSetOptions'] = function SqfliteDatabaseFactoryDebug$124get$35debugSetOptions($this) {
    return dart.fn(options => sqflite_debug['SqfliteDatabaseFactoryDebug|debugSetOptions']($this, options), T$.SqfliteOptionsToFutureOfvoid());
  };
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  sql_builder$.ConflictAlgorithm = class ConflictAlgorithm extends core._Enum {
    [_enumToString]() {
      return "ConflictAlgorithm." + this[_name];
    }
  };
  (sql_builder$.ConflictAlgorithm.new = function(index, name) {
    sql_builder$.ConflictAlgorithm.__proto__.new.call(this, index, name);
    ;
  }).prototype = sql_builder$.ConflictAlgorithm.prototype;
  dart.addTypeTests(sql_builder$.ConflictAlgorithm);
  dart.addTypeCaches(sql_builder$.ConflictAlgorithm);
  dart.setMethodSignature(sql_builder$.ConflictAlgorithm, () => ({
    __proto__: dart.getMethods(sql_builder$.ConflictAlgorithm.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(sql_builder$.ConflictAlgorithm, I[14]);
  dart.setStaticFieldSignature(sql_builder$.ConflictAlgorithm, () => ['values', 'rollback', 'abort', 'fail', 'ignore', 'replace']);
  dart.defineLazy(sql_builder$.ConflictAlgorithm, {
    /*sql_builder$.ConflictAlgorithm.values*/get values() {
      return C[11] || CT.C11;
    },
    /*sql_builder$.ConflictAlgorithm.rollback*/get rollback() {
      return C[12] || CT.C12;
    },
    /*sql_builder$.ConflictAlgorithm.abort*/get abort() {
      return C[13] || CT.C13;
    },
    /*sql_builder$.ConflictAlgorithm.fail*/get fail() {
      return C[14] || CT.C14;
    },
    /*sql_builder$.ConflictAlgorithm.ignore*/get ignore() {
      return C[15] || CT.C15;
    },
    /*sql_builder$.ConflictAlgorithm.replace*/get replace() {
      return C[16] || CT.C16;
    }
  }, false);
  var $arguments = dart.privateName(sql_builder$, "SqlBuilder.arguments");
  var hasEscape = dart.privateName(sql_builder$, "SqlBuilder.hasEscape");
  var __SqlBuilder_sql = dart.privateName(sql_builder$, "_#SqlBuilder#sql");
  var _escapeName = dart.privateName(sql_builder$, "_escapeName");
  var _writeClause = dart.privateName(sql_builder$, "_writeClause");
  var _writeColumns = dart.privateName(sql_builder$, "_writeColumns");
  sql_builder$.SqlBuilder = class SqlBuilder extends core.Object {
    get arguments() {
      return this[$arguments];
    }
    set arguments(value) {
      this[$arguments] = value;
    }
    get hasEscape() {
      return this[hasEscape];
    }
    set hasEscape(value) {
      this[hasEscape] = value;
    }
    static ['_#delete#tearOff'](table, opts) {
      let where = opts && 'where' in opts ? opts.where : null;
      let whereArgs = opts && 'whereArgs' in opts ? opts.whereArgs : null;
      return new sql_builder$.SqlBuilder.delete(table, {where: where, whereArgs: whereArgs});
    }
    static ['_#query#tearOff'](table, opts) {
      let distinct = opts && 'distinct' in opts ? opts.distinct : null;
      let columns = opts && 'columns' in opts ? opts.columns : null;
      let where = opts && 'where' in opts ? opts.where : null;
      let whereArgs = opts && 'whereArgs' in opts ? opts.whereArgs : null;
      let groupBy = opts && 'groupBy' in opts ? opts.groupBy : null;
      let having = opts && 'having' in opts ? opts.having : null;
      let orderBy = opts && 'orderBy' in opts ? opts.orderBy : null;
      let limit = opts && 'limit' in opts ? opts.limit : null;
      let offset = opts && 'offset' in opts ? opts.offset : null;
      return new sql_builder$.SqlBuilder.query(table, {distinct: distinct, columns: columns, where: where, whereArgs: whereArgs, groupBy: groupBy, having: having, orderBy: orderBy, limit: limit, offset: offset});
    }
    static ['_#insert#tearOff'](table, values, opts) {
      let nullColumnHack = opts && 'nullColumnHack' in opts ? opts.nullColumnHack : null;
      let conflictAlgorithm = opts && 'conflictAlgorithm' in opts ? opts.conflictAlgorithm : null;
      return new sql_builder$.SqlBuilder.insert(table, values, {nullColumnHack: nullColumnHack, conflictAlgorithm: conflictAlgorithm});
    }
    static ['_#update#tearOff'](table, values, opts) {
      let where = opts && 'where' in opts ? opts.where : null;
      let whereArgs = opts && 'whereArgs' in opts ? opts.whereArgs : null;
      let conflictAlgorithm = opts && 'conflictAlgorithm' in opts ? opts.conflictAlgorithm : null;
      return new sql_builder$.SqlBuilder.update(table, values, {where: where, whereArgs: whereArgs, conflictAlgorithm: conflictAlgorithm});
    }
    get sql() {
      let t53;
      t53 = this[__SqlBuilder_sql];
      return t53 == null ? dart.throw(new _internal.LateError.fieldNI("sql")) : t53;
    }
    set sql(sql$35param) {
      this[__SqlBuilder_sql] = sql$35param;
    }
    [_escapeName](name) {
      return sql_builder$.escapeName(name);
    }
    [_writeClause](s, name, clause) {
      if (clause != null) {
        s.write(name);
        s.write(clause);
      }
    }
    [_writeColumns](s, columns) {
      let n = columns[$length];
      for (let i = 0; i < n; i = i + 1) {
        let column = columns[$_get](i);
        if (i > 0) {
          s.write(", ");
        }
        s.write(this[_escapeName](column));
      }
      s.write(" ");
    }
  };
  (sql_builder$.SqlBuilder.delete = function(table, opts) {
    let where = opts && 'where' in opts ? opts.where : null;
    let whereArgs = opts && 'whereArgs' in opts ? opts.whereArgs : null;
    this[__SqlBuilder_sql] = null;
    this[$arguments] = null;
    this[hasEscape] = false;
    value_utils.checkWhereArgs(whereArgs);
    let $delete = new core.StringBuffer.new();
    $delete.write("DELETE FROM ");
    $delete.write(this[_escapeName](table));
    this[_writeClause]($delete, " WHERE ", where);
    this.sql = $delete.toString();
    this.arguments = whereArgs != null ? T$.ListOfObjectN().from(whereArgs) : null;
  }).prototype = sql_builder$.SqlBuilder.prototype;
  (sql_builder$.SqlBuilder.query = function(table, opts) {
    let t53;
    let distinct = opts && 'distinct' in opts ? opts.distinct : null;
    let columns = opts && 'columns' in opts ? opts.columns : null;
    let where = opts && 'where' in opts ? opts.where : null;
    let whereArgs = opts && 'whereArgs' in opts ? opts.whereArgs : null;
    let groupBy = opts && 'groupBy' in opts ? opts.groupBy : null;
    let having = opts && 'having' in opts ? opts.having : null;
    let orderBy = opts && 'orderBy' in opts ? opts.orderBy : null;
    let limit = opts && 'limit' in opts ? opts.limit : null;
    let offset = opts && 'offset' in opts ? opts.offset : null;
    this[__SqlBuilder_sql] = null;
    this[$arguments] = null;
    this[hasEscape] = false;
    if (groupBy == null && having != null) {
      dart.throw(new core.ArgumentError.new("HAVING clauses are only permitted when using a groupBy clause"));
    }
    value_utils.checkWhereArgs(whereArgs);
    let query = new core.StringBuffer.new();
    query.write("SELECT ");
    if (distinct === true) {
      query.write("DISTINCT ");
    }
    if (columns != null && columns[$isNotEmpty]) {
      this[_writeColumns](query, columns);
    } else {
      query.write("* ");
    }
    query.write("FROM ");
    query.write(this[_escapeName](table));
    this[_writeClause](query, " WHERE ", where);
    this[_writeClause](query, " GROUP BY ", groupBy);
    this[_writeClause](query, " HAVING ", having);
    this[_writeClause](query, " ORDER BY ", orderBy);
    if (limit != null || offset != null) {
      this[_writeClause](query, " LIMIT ", dart.toString((t53 = limit, t53 == null ? -1 : t53)));
    }
    if (offset != null) {
      this[_writeClause](query, " OFFSET ", dart.toString(offset));
    }
    this.sql = query.toString();
    this.arguments = whereArgs != null ? T$.ListOfObjectN().from(whereArgs) : null;
  }).prototype = sql_builder$.SqlBuilder.prototype;
  (sql_builder$.SqlBuilder.insert = function(table, values, opts) {
    let nullColumnHack = opts && 'nullColumnHack' in opts ? opts.nullColumnHack : null;
    let conflictAlgorithm = opts && 'conflictAlgorithm' in opts ? opts.conflictAlgorithm : null;
    this[__SqlBuilder_sql] = null;
    this[$arguments] = null;
    this[hasEscape] = false;
    let insert = new core.StringBuffer.new();
    insert.write("INSERT");
    if (conflictAlgorithm != null) {
      insert.write(" " + sql_builder$._conflictValues[$_get](conflictAlgorithm.index));
    }
    insert.write(" INTO ");
    insert.write(this[_escapeName](table));
    insert.write(" (");
    let bindArgs = null;
    let size = values[$length];
    if (size > 0) {
      let sbValues = new core.StringBuffer.new(") VALUES (");
      bindArgs = T$.JSArrayOfObjectN().of([]);
      let i = 0;
      values[$forEach](dart.fn((colName, value) => {
        let t53;
        if ((t53 = i, i = t53 + 1, t53) > 0) {
          insert.write(", ");
          sbValues.write(", ");
        }
        insert.write(this[_escapeName](colName));
        if (value == null) {
          sbValues.write("NULL");
        } else {
          value_utils.checkNonNullValue(value);
          dart.nullCheck(bindArgs)[$add](value);
          sbValues.write("?");
        }
      }, T$.StringAndObjectNTovoid()));
      insert.write(sbValues);
    } else {
      if (nullColumnHack == null) {
        dart.throw(new core.ArgumentError.new("nullColumnHack required when inserting no data"));
      }
      insert.write(dart.str(nullColumnHack) + ") VALUES (NULL");
    }
    insert.write(")");
    this.sql = insert.toString();
    this.arguments = bindArgs;
  }).prototype = sql_builder$.SqlBuilder.prototype;
  (sql_builder$.SqlBuilder.update = function(table, values, opts) {
    let t53;
    let where = opts && 'where' in opts ? opts.where : null;
    let whereArgs = opts && 'whereArgs' in opts ? opts.whereArgs : null;
    let conflictAlgorithm = opts && 'conflictAlgorithm' in opts ? opts.conflictAlgorithm : null;
    this[__SqlBuilder_sql] = null;
    this[$arguments] = null;
    this[hasEscape] = false;
    if (values[$isEmpty]) {
      dart.throw(new core.ArgumentError.new("Empty values"));
    }
    value_utils.checkWhereArgs(whereArgs);
    let update = new core.StringBuffer.new();
    update.write("UPDATE");
    if (conflictAlgorithm != null) {
      update.write(" " + sql_builder$._conflictValues[$_get](conflictAlgorithm.index));
    }
    update.write(" " + this[_escapeName](table));
    update.write(" SET ");
    let bindArgs = T$.JSArrayOfObjectN().of([]);
    let i = 0;
    for (let colName of values[$keys]) {
      update.write((t53 = i, i = t53 + 1, t53) > 0 ? ", " : "");
      update.write(this[_escapeName](colName));
      let value = values[$_get](colName);
      if (value != null) {
        value_utils.checkNonNullValue(value);
        bindArgs[$add](value);
        update.write(" = ?");
      } else {
        update.write(" = NULL");
      }
    }
    if (whereArgs != null) {
      bindArgs[$addAll](whereArgs);
    }
    this[_writeClause](update, " WHERE ", where);
    this.sql = update.toString();
    this.arguments = bindArgs;
  }).prototype = sql_builder$.SqlBuilder.prototype;
  dart.addTypeTests(sql_builder$.SqlBuilder);
  dart.addTypeCaches(sql_builder$.SqlBuilder);
  dart.setMethodSignature(sql_builder$.SqlBuilder, () => ({
    __proto__: dart.getMethods(sql_builder$.SqlBuilder.__proto__),
    [_escapeName]: dart.fnType(core.String, [core.String]),
    [_writeClause]: dart.fnType(dart.void, [core.StringBuffer, core.String, dart.nullable(core.String)]),
    [_writeColumns]: dart.fnType(dart.void, [core.StringBuffer, core.List$(core.String)])
  }));
  dart.setGetterSignature(sql_builder$.SqlBuilder, () => ({
    __proto__: dart.getGetters(sql_builder$.SqlBuilder.__proto__),
    sql: core.String
  }));
  dart.setSetterSignature(sql_builder$.SqlBuilder, () => ({
    __proto__: dart.getSetters(sql_builder$.SqlBuilder.__proto__),
    sql: core.String
  }));
  dart.setLibraryUri(sql_builder$.SqlBuilder, I[14]);
  dart.setFieldSignature(sql_builder$.SqlBuilder, () => ({
    __proto__: dart.getFields(sql_builder$.SqlBuilder.__proto__),
    [__SqlBuilder_sql]: dart.fieldType(dart.nullable(core.String)),
    arguments: dart.fieldType(dart.nullable(core.List$(dart.nullable(core.Object)))),
    hasEscape: dart.fieldType(core.bool)
  }));
  sql_builder$.isEscapedName = function isEscapedName(name) {
    if (name.length >= 2) {
      let codeUnits = name[$codeUnits];
      if (sql_builder$._areCodeUnitsEscaped(codeUnits)) {
        return sql_builder$.escapeNames.contains(name[$substring](1, name.length - 1)[$toLowerCase]());
      }
    }
    return false;
  };
  sql_builder$._doEscape = function _doEscape(name) {
    return "\"" + name + "\"";
  };
  sql_builder$.escapeName = function escapeName(name) {
    if (sql_builder$.escapeNames.contains(name[$toLowerCase]())) {
      return sql_builder$._doEscape(name);
    }
    return name;
  };
  sql_builder$.unescapeName = function unescapeName(name) {
    if (sql_builder$.isEscapedName(name)) {
      return name[$substring](1, name.length - 1);
    }
    return name;
  };
  sql_builder$.escapeEntityName = function escapeEntityName(name) {
    if (sql_builder$._entityNameNeedEscape(name)) {
      return sql_builder$._doEscape(name);
    }
    return name;
  };
  sql_builder$._isDigit = function _isDigit(codeUnit) {
    return codeUnit >= 48 && codeUnit <= 57;
  };
  sql_builder$._isAlphaOrUnderscore = function _isAlphaOrUnderscore(codeUnit) {
    return codeUnit >= 97 && codeUnit <= 122 || codeUnit >= 65 && codeUnit <= 90 || codeUnit === 95;
  };
  sql_builder$._areCodeUnitsEscaped = function _areCodeUnitsEscaped(codeUnits) {
    if (codeUnits[$isNotEmpty]) {
      let first = codeUnits[$first];
      switch (first) {
        case 34:
        case 96:
          {
            let last = codeUnits[$last];
            return last === first;
          }
        case 39:
      }
    }
    return false;
  };
  sql_builder$._entityNameNeedEscape = function _entityNameNeedEscape(name) {
    if (sql_builder$.escapeNames.contains(name[$toLowerCase]())) {
      return true;
    }
    let codeUnits = name[$codeUnits];
    if (!sql_builder$._isAlphaOrUnderscore(codeUnits[$first])) {
      return true;
    }
    for (let i = 1; i < codeUnits[$length]; i = i + 1) {
      let codeUnit = codeUnits[$_get](i);
      if (!sql_builder$._isAlphaOrUnderscore(codeUnit) && !sql_builder$._isDigit(codeUnit)) {
        return true;
      }
    }
    return false;
  };
  sql_builder$.unescapeValueKeyName = function unescapeValueKeyName(name) {
    let codeUnits = name[$codeUnits];
    if (sql_builder$._areCodeUnitsEscaped(codeUnits)) {
      return name[$substring](1, name.length - 1);
    }
    return name;
  };
  dart.defineLazy(sql_builder$, {
    /*sql_builder$._conflictValues*/get _conflictValues() {
      return T$.JSArrayOfString().of(["OR ROLLBACK", "OR ABORT", "OR FAIL", "OR IGNORE", "OR REPLACE"]);
    },
    /*sql_builder$._lowercaseA*/get _lowercaseA() {
      return 97;
    },
    /*sql_builder$._lowercaseZ*/get _lowercaseZ() {
      return 122;
    },
    /*sql_builder$._underscore*/get _underscore() {
      return 95;
    },
    /*sql_builder$._digit0*/get _digit0() {
      return 48;
    },
    /*sql_builder$._digit9*/get _digit9() {
      return 57;
    },
    /*sql_builder$._backtick*/get _backtick() {
      return 96;
    },
    /*sql_builder$._doubleQuote*/get _doubleQuote() {
      return 34;
    },
    /*sql_builder$._singleQuote*/get _singleQuote() {
      return 39;
    },
    /*sql_builder$._uppercaseA*/get _uppercaseA() {
      return 65;
    },
    /*sql_builder$._uppercaseZ*/get _uppercaseZ() {
      return 90;
    },
    /*sql_builder$.escapeNames*/get escapeNames() {
      return T$.LinkedHashSetOfString().from(["add", "all", "alter", "and", "as", "autoincrement", "between", "case", "check", "collate", "commit", "constraint", "create", "default", "deferrable", "delete", "distinct", "drop", "else", "escape", "except", "exists", "foreign", "from", "group", "having", "if", "in", "index", "insert", "intersect", "into", "is", "isnull", "join", "limit", "not", "notnull", "null", "on", "or", "order", "primary", "references", "select", "set", "table", "then", "to", "transaction", "union", "unique", "update", "using", "values", "when", "where"]);
    }
  }, false);
  dev_utils$.devPrint = function devPrint(object) {
    core.print(object);
  };
  dev_utils$.devWarning = function devWarning(T, value) {
    return value;
  };
  database_factory_ffi_web.ffiMethodCallhandleInIsolate = function ffiMethodCallhandleInIsolate(methodCall, opts) {
    let ffiInit = opts && 'ffiInit' in opts ? opts.ffiInit : null;
    return dart.throw(new core.UnsupportedError.new("ffiMethodCallhandleInIsolate unsupported on the web"));
  };
  database_factory_ffi_web.ffiMethodCallHandleNoIsolate = function ffiMethodCallHandleNoIsolate(methodCall) {
    return dart.throw(new core.UnsupportedError.new("ffiMethodCallHandleNoIsolate unsupported on the web"));
  };
  dart.defineLazy(database_factory_ffi_web, {
    /*database_factory_ffi_web.databaseFactoryFfiImpl*/get databaseFactoryFfiImpl() {
      return dart.throw(new core.UnsupportedError.new("Unsupported on the web, use sqflite_common_ffi_web"));
    },
    set databaseFactoryFfiImpl(value) {},
    /*database_factory_ffi_web.databaseFactoryFfiNoIsolateImpl*/get databaseFactoryFfiNoIsolateImpl() {
      return dart.throw(new core.UnsupportedError.new("Unsupported on the web, use sqflite_common_ffi_web"));
    },
    set databaseFactoryFfiNoIsolateImpl(value) {}
  }, false);
  synchronized.Lock = class Lock extends core.Object {
    static new(opts) {
      let reentrant = opts && 'reentrant' in opts ? opts.reentrant : false;
      if (reentrant === true) {
        return new reentrant_lock.ReentrantLock.new();
      } else {
        return new basic_lock.BasicLock.new();
      }
    }
    static ['_#new#tearOff'](opts) {
      let reentrant = opts && 'reentrant' in opts ? opts.reentrant : false;
      return synchronized.Lock.new({reentrant: reentrant});
    }
  };
  (synchronized.Lock[dart.mixinNew] = function() {
  }).prototype = synchronized.Lock.prototype;
  dart.addTypeTests(synchronized.Lock);
  dart.addTypeCaches(synchronized.Lock);
  dart.setStaticMethodSignature(synchronized.Lock, () => ['new']);
  dart.setLibraryUri(synchronized.Lock, I[15]);
  path_utils.isInMemoryDatabasePath = function isInMemoryDatabasePath(path) {
    if (path === ":memory:") {
      return true;
    }
    if (path_utils.isFileUriDatabasePath(path)) {
      if (path[$substring]("file:".length) === ":memory:") {
        return true;
      }
    }
    return false;
  };
  path_utils.isFileUriDatabasePath = function isFileUriDatabasePath(path) {
    return path[$startsWith]("file:");
  };
  dart.defineLazy(path_utils, {
    /*path_utils._fileUriPrefix*/get _fileUriPrefix() {
      return "file:";
    }
  }, false);
  batch.SqfliteBatchMixin = class SqfliteBatchMixin extends core.Object {};
  batch.SqfliteBatchMixin[dart.mixinOn] = Object => class SqfliteBatchMixin extends Object {
    insert(table, values, opts) {
      let nullColumnHack = opts && 'nullColumnHack' in opts ? opts.nullColumnHack : null;
      let conflictAlgorithm = opts && 'conflictAlgorithm' in opts ? opts.conflictAlgorithm : null;
      let builder = new sql_builder$.SqlBuilder.insert(table, values, {nullColumnHack: nullColumnHack, conflictAlgorithm: conflictAlgorithm});
      return this.rawInsert(builder.sql, builder.arguments);
    }
    query(table, opts) {
      let distinct = opts && 'distinct' in opts ? opts.distinct : null;
      let columns = opts && 'columns' in opts ? opts.columns : null;
      let where = opts && 'where' in opts ? opts.where : null;
      let whereArgs = opts && 'whereArgs' in opts ? opts.whereArgs : null;
      let groupBy = opts && 'groupBy' in opts ? opts.groupBy : null;
      let having = opts && 'having' in opts ? opts.having : null;
      let orderBy = opts && 'orderBy' in opts ? opts.orderBy : null;
      let limit = opts && 'limit' in opts ? opts.limit : null;
      let offset = opts && 'offset' in opts ? opts.offset : null;
      let builder = new sql_builder$.SqlBuilder.query(table, {distinct: distinct, columns: columns, where: where, whereArgs: whereArgs, groupBy: groupBy, having: having, orderBy: orderBy, limit: limit, offset: offset});
      return this.rawQuery(builder.sql, builder.arguments);
    }
    update(table, values, opts) {
      let where = opts && 'where' in opts ? opts.where : null;
      let whereArgs = opts && 'whereArgs' in opts ? opts.whereArgs : null;
      let conflictAlgorithm = opts && 'conflictAlgorithm' in opts ? opts.conflictAlgorithm : null;
      let builder = new sql_builder$.SqlBuilder.update(table, values, {where: where, whereArgs: whereArgs, conflictAlgorithm: conflictAlgorithm});
      return this.rawUpdate(builder.sql, builder.arguments);
    }
    delete(table, opts) {
      let where = opts && 'where' in opts ? opts.where : null;
      let whereArgs = opts && 'whereArgs' in opts ? opts.whereArgs : null;
      let builder = new sql_builder$.SqlBuilder.delete(table, {where: where, whereArgs: whereArgs});
      return this.rawDelete(builder.sql, builder.arguments);
    }
  };
  (batch.SqfliteBatchMixin[dart.mixinNew] = function() {
  }).prototype = batch.SqfliteBatchMixin.prototype;
  dart.addTypeTests(batch.SqfliteBatchMixin);
  dart.addTypeCaches(batch.SqfliteBatchMixin);
  batch.SqfliteBatchMixin[dart.implements] = () => [sqlite_api$.Batch, core.Object];
  dart.setMethodSignature(batch.SqfliteBatchMixin, () => ({
    __proto__: dart.getMethods(batch.SqfliteBatchMixin.__proto__),
    insert: dart.fnType(dart.void, [core.String, core.Map$(core.String, dart.nullable(core.Object))], {conflictAlgorithm: dart.nullable(sql_builder$.ConflictAlgorithm), nullColumnHack: dart.nullable(core.String)}, {}),
    query: dart.fnType(dart.void, [core.String], {columns: dart.nullable(core.List$(core.String)), distinct: dart.nullable(core.bool), groupBy: dart.nullable(core.String), having: dart.nullable(core.String), limit: dart.nullable(core.int), offset: dart.nullable(core.int), orderBy: dart.nullable(core.String), where: dart.nullable(core.String), whereArgs: dart.nullable(core.List$(dart.nullable(core.Object)))}, {}),
    update: dart.fnType(dart.void, [core.String, core.Map$(core.String, dart.nullable(core.Object))], {conflictAlgorithm: dart.nullable(sql_builder$.ConflictAlgorithm), where: dart.nullable(core.String), whereArgs: dart.nullable(core.List$(dart.nullable(core.Object)))}, {}),
    delete: dart.fnType(dart.void, [core.String], {where: dart.nullable(core.String), whereArgs: dart.nullable(core.List$(dart.nullable(core.Object)))}, {})
  }));
  dart.setLibraryUri(batch.SqfliteBatchMixin, I[16]);
  var method$ = dart.privateName(batch, "SqfliteBatchOperation.method");
  var _getOperationParam = dart.privateName(batch, "_getOperationParam");
  var type$ = dart.privateName(sql_command, "SqfliteSqlCommand.type");
  var sql$0 = dart.privateName(sql_command, "SqfliteSqlCommand.sql");
  var $arguments$ = dart.privateName(sql_command, "SqfliteSqlCommand.arguments");
  sql_command.SqfliteSqlCommand = class SqfliteSqlCommand extends core.Object {
    get type() {
      return this[type$];
    }
    set type(value) {
      super.type = value;
    }
    get sql() {
      return this[sql$0];
    }
    set sql(value) {
      super.sql = value;
    }
    get arguments() {
      return this[$arguments$];
    }
    set arguments(value) {
      super.arguments = value;
    }
    static ['_#new#tearOff'](type, sql, $arguments) {
      return new sql_command.SqfliteSqlCommand.new(type, sql, $arguments);
    }
  };
  (sql_command.SqfliteSqlCommand.new = function(type, sql, $arguments) {
    this[type$] = type;
    this[sql$0] = sql;
    this[$arguments$] = $arguments;
    ;
  }).prototype = sql_command.SqfliteSqlCommand.prototype;
  dart.addTypeTests(sql_command.SqfliteSqlCommand);
  dart.addTypeCaches(sql_command.SqfliteSqlCommand);
  dart.setLibraryUri(sql_command.SqfliteSqlCommand, I[17]);
  dart.setFieldSignature(sql_command.SqfliteSqlCommand, () => ({
    __proto__: dart.getFields(sql_command.SqfliteSqlCommand.__proto__),
    type: dart.finalFieldType(sql_command.SqliteSqlCommandType),
    sql: dart.finalFieldType(core.String),
    arguments: dart.finalFieldType(dart.nullable(core.List$(dart.nullable(core.Object))))
  }));
  batch.SqfliteBatchOperation = class SqfliteBatchOperation extends sql_command.SqfliteSqlCommand {
    get method() {
      return this[method$];
    }
    set method(value) {
      super.method = value;
    }
    [_getOperationParam]() {
      let map = (() => {
        let t53 = new (T$.IdentityMapOfString$ObjectN()).new();
        t53[$_set]("method", this.method);
        t53[$_set]("sql", this.sql);
        if (this.arguments != null) t53[$_set]("arguments", this.arguments);
        return t53;
      })();
      if (this.type === sql_command.SqliteSqlCommandType.execute) {
        let inTransaction = utils$0.getSqlInTransactionArgument(this.sql);
        if (inTransaction != null) {
          map[$_set]("inTransaction", inTransaction);
        }
      }
      return map;
    }
    static ['_#new#tearOff'](type, method, sql, $arguments) {
      return new batch.SqfliteBatchOperation.new(type, method, sql, $arguments);
    }
  };
  (batch.SqfliteBatchOperation.new = function(type, method, sql, $arguments) {
    this[method$] = method;
    batch.SqfliteBatchOperation.__proto__.new.call(this, type, sql, $arguments);
    ;
  }).prototype = batch.SqfliteBatchOperation.prototype;
  dart.addTypeTests(batch.SqfliteBatchOperation);
  dart.addTypeCaches(batch.SqfliteBatchOperation);
  dart.setMethodSignature(batch.SqfliteBatchOperation, () => ({
    __proto__: dart.getMethods(batch.SqfliteBatchOperation.__proto__),
    [_getOperationParam]: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [])
  }));
  dart.setLibraryUri(batch.SqfliteBatchOperation, I[16]);
  dart.setFieldSignature(batch.SqfliteBatchOperation, () => ({
    __proto__: dart.getFields(batch.SqfliteBatchOperation.__proto__),
    method: dart.finalFieldType(core.String)
  }));
  var operations = dart.privateName(batch, "SqfliteBatch.operations");
  const Object_SqfliteBatchMixin$36 = class Object_SqfliteBatchMixin extends core.Object {};
  (Object_SqfliteBatchMixin$36.new = function() {
  }).prototype = Object_SqfliteBatchMixin$36.prototype;
  dart.applyMixin(Object_SqfliteBatchMixin$36, batch.SqfliteBatchMixin);
  batch.SqfliteBatch = class SqfliteBatch extends Object_SqfliteBatchMixin$36 {
    get operations() {
      return this[operations];
    }
    set operations(value) {
      super.operations = value;
    }
    getOperationsParam() {
      return this.operations[$map](T$.MapOfString$ObjectN(), dart.fn(e => e[_getOperationParam](), T$.SqfliteBatchOperationToMapOfString$ObjectN()))[$toList]();
    }
    rawInsert(sql, $arguments = null) {
      this.operations[$add](new batch.SqfliteBatchOperation.new(sql_command.SqliteSqlCommandType.insert, "insert", sql, $arguments));
    }
    rawQuery(sql, $arguments = null) {
      this.operations[$add](new batch.SqfliteBatchOperation.new(sql_command.SqliteSqlCommandType.query, "query", sql, $arguments));
    }
    rawUpdate(sql, $arguments = null) {
      this.operations[$add](new batch.SqfliteBatchOperation.new(sql_command.SqliteSqlCommandType.update, "update", sql, $arguments));
    }
    rawDelete(sql, $arguments = null) {
      this.operations[$add](new batch.SqfliteBatchOperation.new(sql_command.SqliteSqlCommandType.delete, "update", sql, $arguments));
    }
    execute(sql, $arguments = null) {
      this.operations[$add](new batch.SqfliteBatchOperation.new(sql_command.SqliteSqlCommandType.execute, "execute", sql, $arguments));
    }
    get length() {
      return this.operations[$length];
    }
  };
  (batch.SqfliteBatch.new = function() {
    this[operations] = T$.JSArrayOfSqfliteBatchOperation().of([]);
    ;
  }).prototype = batch.SqfliteBatch.prototype;
  dart.addTypeTests(batch.SqfliteBatch);
  dart.addTypeCaches(batch.SqfliteBatch);
  batch.SqfliteBatch[dart.implements] = () => [sqlite_api$.Batch];
  dart.setMethodSignature(batch.SqfliteBatch, () => ({
    __proto__: dart.getMethods(batch.SqfliteBatch.__proto__),
    getOperationsParam: dart.fnType(core.List$(core.Map$(core.String, dart.nullable(core.Object))), []),
    rawInsert: dart.fnType(dart.void, [core.String], [dart.nullable(core.List$(dart.nullable(core.Object)))]),
    rawQuery: dart.fnType(dart.void, [core.String], [dart.nullable(core.List$(dart.nullable(core.Object)))]),
    rawUpdate: dart.fnType(dart.void, [core.String], [dart.nullable(core.List$(dart.nullable(core.Object)))]),
    rawDelete: dart.fnType(dart.void, [core.String], [dart.nullable(core.List$(dart.nullable(core.Object)))]),
    execute: dart.fnType(dart.void, [core.String], [dart.nullable(core.List$(dart.nullable(core.Object)))])
  }));
  dart.setGetterSignature(batch.SqfliteBatch, () => ({
    __proto__: dart.getGetters(batch.SqfliteBatch.__proto__),
    length: core.int
  }));
  dart.setLibraryUri(batch.SqfliteBatch, I[16]);
  dart.setFieldSignature(batch.SqfliteBatch, () => ({
    __proto__: dart.getFields(batch.SqfliteBatch.__proto__),
    operations: dart.finalFieldType(core.List$(batch.SqfliteBatchOperation))
  }));
  var database$1 = dart.privateName(batch, "SqfliteDatabaseBatch.database");
  batch.SqfliteDatabaseBatch = class SqfliteDatabaseBatch extends batch.SqfliteBatch {
    get database() {
      return this[database$1];
    }
    set database(value) {
      super.database = value;
    }
    static ['_#new#tearOff'](database) {
      return new batch.SqfliteDatabaseBatch.new(database);
    }
    commit(opts) {
      let exclusive = opts && 'exclusive' in opts ? opts.exclusive : null;
      let noResult = opts && 'noResult' in opts ? opts.noResult : null;
      let continueOnError = opts && 'continueOnError' in opts ? opts.continueOnError : null;
      this.database.checkNotClosed();
      return this.database.transaction(T$.ListOfObjectN(), dart.fn(txn => {
        let sqfliteTransaction = transaction.SqfliteTransaction.as(txn);
        return this.database.txnApplyBatch(sqfliteTransaction, this, {noResult: noResult, continueOnError: continueOnError});
      }, T$.TransactionToFutureOfListOfObjectN()), {exclusive: exclusive});
    }
    apply(opts) {
      let noResult = opts && 'noResult' in opts ? opts.noResult : null;
      let continueOnError = opts && 'continueOnError' in opts ? opts.continueOnError : null;
      return this.database.txnApplyBatch(null, this, {noResult: noResult, continueOnError: continueOnError});
    }
  };
  (batch.SqfliteDatabaseBatch.new = function(database) {
    this[database$1] = database;
    batch.SqfliteDatabaseBatch.__proto__.new.call(this);
    ;
  }).prototype = batch.SqfliteDatabaseBatch.prototype;
  dart.addTypeTests(batch.SqfliteDatabaseBatch);
  dart.addTypeCaches(batch.SqfliteDatabaseBatch);
  dart.setMethodSignature(batch.SqfliteDatabaseBatch, () => ({
    __proto__: dart.getMethods(batch.SqfliteDatabaseBatch.__proto__),
    commit: dart.fnType(async.Future$(core.List$(dart.nullable(core.Object))), [], {continueOnError: dart.nullable(core.bool), exclusive: dart.nullable(core.bool), noResult: dart.nullable(core.bool)}, {}),
    apply: dart.fnType(async.Future$(core.List$(dart.nullable(core.Object))), [], {continueOnError: dart.nullable(core.bool), noResult: dart.nullable(core.bool)}, {})
  }));
  dart.setLibraryUri(batch.SqfliteDatabaseBatch, I[16]);
  dart.setFieldSignature(batch.SqfliteDatabaseBatch, () => ({
    __proto__: dart.getFields(batch.SqfliteDatabaseBatch.__proto__),
    database: dart.finalFieldType(database$.SqfliteDatabase)
  }));
  var transaction$ = dart.privateName(batch, "SqfliteTransactionBatch.transaction");
  batch.SqfliteTransactionBatch = class SqfliteTransactionBatch extends batch.SqfliteBatch {
    get transaction() {
      return this[transaction$];
    }
    set transaction(value) {
      super.transaction = value;
    }
    static ['_#new#tearOff'](transaction) {
      return new batch.SqfliteTransactionBatch.new(transaction);
    }
    commit(opts) {
      let exclusive = opts && 'exclusive' in opts ? opts.exclusive : null;
      let noResult = opts && 'noResult' in opts ? opts.noResult : null;
      let continueOnError = opts && 'continueOnError' in opts ? opts.continueOnError : null;
      if (exclusive != null) {
        dart.throw(new core.ArgumentError.value(exclusive, "exclusive", "must not be set when commiting a batch in a transaction"));
      }
      return this.apply({noResult: noResult, continueOnError: continueOnError});
    }
    apply(opts) {
      let noResult = opts && 'noResult' in opts ? opts.noResult : null;
      let continueOnError = opts && 'continueOnError' in opts ? opts.continueOnError : null;
      return this.transaction.database.txnApplyBatch(this.transaction, this, {noResult: noResult, continueOnError: continueOnError});
    }
  };
  (batch.SqfliteTransactionBatch.new = function(transaction) {
    this[transaction$] = transaction;
    batch.SqfliteTransactionBatch.__proto__.new.call(this);
    ;
  }).prototype = batch.SqfliteTransactionBatch.prototype;
  dart.addTypeTests(batch.SqfliteTransactionBatch);
  dart.addTypeCaches(batch.SqfliteTransactionBatch);
  dart.setMethodSignature(batch.SqfliteTransactionBatch, () => ({
    __proto__: dart.getMethods(batch.SqfliteTransactionBatch.__proto__),
    commit: dart.fnType(async.Future$(core.List$(dart.nullable(core.Object))), [], {continueOnError: dart.nullable(core.bool), exclusive: dart.nullable(core.bool), noResult: dart.nullable(core.bool)}, {}),
    apply: dart.fnType(async.Future$(core.List$(dart.nullable(core.Object))), [], {continueOnError: dart.nullable(core.bool), noResult: dart.nullable(core.bool)}, {})
  }));
  dart.setLibraryUri(batch.SqfliteTransactionBatch, I[16]);
  dart.setFieldSignature(batch.SqfliteTransactionBatch, () => ({
    __proto__: dart.getFields(batch.SqfliteTransactionBatch.__proto__),
    transaction: dart.finalFieldType(transaction.SqfliteTransaction)
  }));
  var txn$ = dart.privateName(cursor, "SqfliteQueryCursor.txn");
  var closed = dart.privateName(cursor, "SqfliteQueryCursor.closed");
  var cursorId$ = dart.privateName(cursor, "SqfliteQueryCursor.cursorId");
  var resultList$ = dart.privateName(cursor, "SqfliteQueryCursor.resultList");
  var currentIndex = dart.privateName(cursor, "SqfliteQueryCursor.currentIndex");
  var _database$ = dart.privateName(cursor, "_database");
  cursor.SqfliteQueryCursor = class SqfliteQueryCursor extends core.Object {
    get txn() {
      return this[txn$];
    }
    set txn(value) {
      super.txn = value;
    }
    get closed() {
      return this[closed];
    }
    set closed(value) {
      this[closed] = value;
    }
    get cursorId() {
      return this[cursorId$];
    }
    set cursorId(value) {
      this[cursorId$] = value;
    }
    get resultList() {
      return this[resultList$];
    }
    set resultList(value) {
      this[resultList$] = value;
    }
    get currentIndex() {
      return this[currentIndex];
    }
    set currentIndex(value) {
      this[currentIndex] = value;
    }
    static ['_#new#tearOff'](_database, txn, cursorId, resultList) {
      return new cursor.SqfliteQueryCursor.new(_database, txn, cursorId, resultList);
    }
    get current() {
      return this[_database$].txnQueryCursorGetCurrent(this.txn, this);
    }
    moveNext() {
      return this[_database$].txnQueryCursorMoveNext(this.txn, this);
    }
    close() {
      return this[_database$].txnQueryCursorClose(this.txn, this);
    }
  };
  (cursor.SqfliteQueryCursor.new = function(_database, txn, cursorId, resultList) {
    this[closed] = false;
    this[currentIndex] = -1;
    this[_database$] = _database;
    this[txn$] = txn;
    this[cursorId$] = cursorId;
    this[resultList$] = resultList;
    ;
  }).prototype = cursor.SqfliteQueryCursor.prototype;
  dart.addTypeTests(cursor.SqfliteQueryCursor);
  dart.addTypeCaches(cursor.SqfliteQueryCursor);
  cursor.SqfliteQueryCursor[dart.implements] = () => [sqlite_api$.QueryCursor];
  dart.setMethodSignature(cursor.SqfliteQueryCursor, () => ({
    __proto__: dart.getMethods(cursor.SqfliteQueryCursor.__proto__),
    moveNext: dart.fnType(async.Future$(core.bool), []),
    close: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setGetterSignature(cursor.SqfliteQueryCursor, () => ({
    __proto__: dart.getGetters(cursor.SqfliteQueryCursor.__proto__),
    current: core.Map$(core.String, dart.nullable(core.Object))
  }));
  dart.setLibraryUri(cursor.SqfliteQueryCursor, I[18]);
  dart.setFieldSignature(cursor.SqfliteQueryCursor, () => ({
    __proto__: dart.getFields(cursor.SqfliteQueryCursor.__proto__),
    [_database$]: dart.finalFieldType(database$.SqfliteDatabase),
    txn: dart.finalFieldType(dart.nullable(transaction.SqfliteTransaction)),
    closed: dart.fieldType(core.bool),
    cursorId: dart.fieldType(dart.nullable(core.int)),
    resultList: dart.fieldType(core.List$(core.Map$(core.String, dart.nullable(core.Object)))),
    currentIndex: dart.fieldType(core.int)
  }));
  var _list = dart.privateName(collection_utils, "_list");
  const _is_PluginList_default = Symbol('_is_PluginList_default');
  collection_utils.PluginList$ = dart.generic(T => {
    class PluginList extends collection.ListBase$(T) {
      get rawList() {
        return this[_list];
      }
      rawElementAt(index) {
        return this[_list][$_get](index);
      }
      get length() {
        return this[_list][$length];
      }
      set length(newLength) {
        dart.throw(new core.UnsupportedError.new("read-only"));
      }
      _set(index, value$) {
        let value = value$;
        T.as(value);
        dart.throw(new core.UnsupportedError.new("read-only"));
        return value$;
      }
    }
    (PluginList.from = function(list) {
      this[_list] = list;
      ;
    }).prototype = PluginList.prototype;
    dart.addTypeTests(PluginList);
    PluginList.prototype[_is_PluginList_default] = true;
    dart.addTypeCaches(PluginList);
    dart.setMethodSignature(PluginList, () => ({
      __proto__: dart.getMethods(PluginList.__proto__),
      rawElementAt: dart.fnType(dart.dynamic, [core.int]),
      _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(PluginList, () => ({
      __proto__: dart.getGetters(PluginList.__proto__),
      rawList: core.List,
      length: core.int,
      [$length]: core.int
    }));
    dart.setSetterSignature(PluginList, () => ({
      __proto__: dart.getSetters(PluginList.__proto__),
      length: core.int,
      [$length]: core.int
    }));
    dart.setLibraryUri(PluginList, I[19]);
    dart.setFieldSignature(PluginList, () => ({
      __proto__: dart.getFields(PluginList.__proto__),
      [_list]: dart.finalFieldType(core.List)
    }));
    dart.defineExtensionMethods(PluginList, ['_set']);
    dart.defineExtensionAccessors(PluginList, ['length']);
    return PluginList;
  });
  collection_utils.PluginList = collection_utils.PluginList$();
  dart.addTypeTests(collection_utils.PluginList, _is_PluginList_default);
  collection_utils.Rows = class Rows extends collection_utils.PluginList$(core.Map$(core.String, dart.nullable(core.Object))) {
    static ['_#from#tearOff'](list) {
      return new collection_utils.Rows.from(list);
    }
    _get(index) {
      let item = core.Map.as(this.rawList[$_get](index));
      return item[$cast](core.String, T$.ObjectN());
    }
  };
  (collection_utils.Rows.from = function(list) {
    collection_utils.Rows.__proto__.from.call(this, list);
    ;
  }).prototype = collection_utils.Rows.prototype;
  dart.addTypeTests(collection_utils.Rows);
  dart.addTypeCaches(collection_utils.Rows);
  dart.setMethodSignature(collection_utils.Rows, () => ({
    __proto__: dart.getMethods(collection_utils.Rows.__proto__),
    _get: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [core.int]),
    [$_get]: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [core.int])
  }));
  dart.setLibraryUri(collection_utils.Rows, I[19]);
  dart.defineExtensionMethods(collection_utils.Rows, ['_get']);
  var _rows = dart.privateName(collection_utils, "_rows");
  var _columns = dart.privateName(collection_utils, "_columns");
  var _keys = dart.privateName(collection_utils, "_keys");
  var __QueryResultSet__columnIndexMap = dart.privateName(collection_utils, "_#QueryResultSet#_columnIndexMap");
  var _columnIndexMap = dart.privateName(collection_utils, "_columnIndexMap");
  collection_utils.QueryResultSet = class QueryResultSet extends collection.ListBase$(core.Map$(core.String, dart.nullable(core.Object))) {
    static ['_#new#tearOff'](rawColumns, rawRows) {
      return new collection_utils.QueryResultSet.new(rawColumns, rawRows);
    }
    get [_columnIndexMap]() {
      let t54;
      t54 = this[__QueryResultSet__columnIndexMap];
      return t54 == null ? dart.throw(new _internal.LateError.fieldNI("_columnIndexMap")) : t54;
    }
    set [_columnIndexMap](_columnIndexMap$35param) {
      this[__QueryResultSet__columnIndexMap] = _columnIndexMap$35param;
    }
    get length() {
      let t54, t54$;
      t54$ = (t54 = this[_rows], t54 == null ? null : t54[$length]);
      return t54$ == null ? 0 : t54$;
    }
    _get(index) {
      return new collection_utils.QueryRow.new(this, dart.nullCheck(this[_rows])[$_get](index));
    }
    _set(index, value$) {
      let value = value$;
      T$.MapOfString$ObjectN().as(value);
      dart.throw(new core.UnsupportedError.new("read-only"));
      return value$;
    }
    set length(newLength) {
      dart.throw(new core.UnsupportedError.new("read-only"));
    }
    columnIndex(name) {
      return this[_columnIndexMap][$_get](dart.nullCheck(name));
    }
    get keys() {
      let t54;
      t54 = this[_keys];
      return t54 == null ? this[_keys] = dart.nullCheck(this[_columns])[$toSet]()[$toList]({growable: false}) : t54;
    }
  };
  (collection_utils.QueryResultSet.new = function(rawColumns, rawRows) {
    let t54, t54$;
    this[_rows] = null;
    this[_columns] = null;
    this[_keys] = null;
    this[__QueryResultSet__columnIndexMap] = null;
    this[_columns] = (t54 = rawColumns, t54 == null ? null : t54[$cast](core.String));
    this[_rows] = (t54$ = rawRows, t54$ == null ? null : t54$[$cast](core.List));
    if (this[_columns] != null) {
      this[_columnIndexMap] = new (T$.IdentityMapOfString$int()).new();
      for (let i = 0; i < dart.nullCheck(this[_columns])[$length]; i = i + 1) {
        this[_columnIndexMap][$_set](dart.nullCheck(this[_columns])[$_get](i), i);
      }
    }
  }).prototype = collection_utils.QueryResultSet.prototype;
  dart.addTypeTests(collection_utils.QueryResultSet);
  dart.addTypeCaches(collection_utils.QueryResultSet);
  dart.setMethodSignature(collection_utils.QueryResultSet, () => ({
    __proto__: dart.getMethods(collection_utils.QueryResultSet.__proto__),
    _get: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [core.int]),
    [$_get]: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [core.int]),
    _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    columnIndex: dart.fnType(dart.nullable(core.int), [dart.nullable(core.String)])
  }));
  dart.setGetterSignature(collection_utils.QueryResultSet, () => ({
    __proto__: dart.getGetters(collection_utils.QueryResultSet.__proto__),
    [_columnIndexMap]: core.Map$(core.String, core.int),
    length: core.int,
    [$length]: core.int,
    keys: core.List$(core.String)
  }));
  dart.setSetterSignature(collection_utils.QueryResultSet, () => ({
    __proto__: dart.getSetters(collection_utils.QueryResultSet.__proto__),
    [_columnIndexMap]: core.Map$(core.String, core.int),
    length: core.int,
    [$length]: core.int
  }));
  dart.setLibraryUri(collection_utils.QueryResultSet, I[19]);
  dart.setFieldSignature(collection_utils.QueryResultSet, () => ({
    __proto__: dart.getFields(collection_utils.QueryResultSet.__proto__),
    [_rows]: dart.fieldType(dart.nullable(core.List$(core.List))),
    [_columns]: dart.fieldType(dart.nullable(core.List$(core.String))),
    [_keys]: dart.fieldType(dart.nullable(core.List$(core.String))),
    [__QueryResultSet__columnIndexMap]: dart.fieldType(dart.nullable(core.Map$(core.String, core.int)))
  }));
  dart.defineExtensionMethods(collection_utils.QueryResultSet, ['_get', '_set']);
  dart.defineExtensionAccessors(collection_utils.QueryResultSet, ['length']);
  var queryResultSet$ = dart.privateName(collection_utils, "QueryRow.queryResultSet");
  var row$ = dart.privateName(collection_utils, "QueryRow.row");
  collection_utils.QueryRow = class QueryRow extends collection.MapBase$(core.String, dart.dynamic) {
    get queryResultSet() {
      return this[queryResultSet$];
    }
    set queryResultSet(value) {
      super.queryResultSet = value;
    }
    get row() {
      return this[row$];
    }
    set row(value) {
      super.row = value;
    }
    static ['_#new#tearOff'](queryResultSet, row) {
      return new collection_utils.QueryRow.new(queryResultSet, row);
    }
    _get(key) {
      let stringKey = T$.StringN().as(key);
      let columnIndex = this.queryResultSet.columnIndex(stringKey);
      if (columnIndex != null) {
        return this.row[$_get](columnIndex);
      }
      return null;
    }
    _set(key, value$) {
      let value = value$;
      core.String.as(key);
      dart.throw(new core.UnsupportedError.new("read-only"));
      return value$;
    }
    clear() {
      dart.throw(new core.UnsupportedError.new("read-only"));
    }
    get keys() {
      return this.queryResultSet.keys;
    }
    remove(key) {
      dart.throw(new core.UnsupportedError.new("read-only"));
    }
  };
  (collection_utils.QueryRow.new = function(queryResultSet, row) {
    this[queryResultSet$] = queryResultSet;
    this[row$] = row;
    ;
  }).prototype = collection_utils.QueryRow.prototype;
  dart.addTypeTests(collection_utils.QueryRow);
  dart.addTypeCaches(collection_utils.QueryRow);
  dart.setMethodSignature(collection_utils.QueryRow, () => ({
    __proto__: dart.getMethods(collection_utils.QueryRow.__proto__),
    _get: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
    [$_get]: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
    _set: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    [$_set]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    clear: dart.fnType(dart.void, []),
    [$clear]: dart.fnType(dart.void, []),
    remove: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
    [$remove]: dart.fnType(dart.dynamic, [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(collection_utils.QueryRow, () => ({
    __proto__: dart.getGetters(collection_utils.QueryRow.__proto__),
    keys: core.Iterable$(core.String),
    [$keys]: core.Iterable$(core.String)
  }));
  dart.setLibraryUri(collection_utils.QueryRow, I[19]);
  dart.setFieldSignature(collection_utils.QueryRow, () => ({
    __proto__: dart.getFields(collection_utils.QueryRow.__proto__),
    queryResultSet: dart.finalFieldType(collection_utils.QueryResultSet),
    row: dart.finalFieldType(core.List)
  }));
  dart.defineExtensionMethods(collection_utils.QueryRow, ['_get', '_set', 'clear', 'remove']);
  dart.defineExtensionAccessors(collection_utils.QueryRow, ['keys']);
  var result$0 = dart.privateName(collection_utils, "BatchResult.result");
  collection_utils.BatchResult = class BatchResult extends core.Object {
    get result() {
      return this[result$0];
    }
    set result(value) {
      super.result = value;
    }
    static ['_#new#tearOff'](result) {
      return new collection_utils.BatchResult.new(result);
    }
  };
  (collection_utils.BatchResult.new = function(result) {
    this[result$0] = result;
    ;
  }).prototype = collection_utils.BatchResult.prototype;
  dart.addTypeTests(collection_utils.BatchResult);
  dart.addTypeCaches(collection_utils.BatchResult);
  dart.setLibraryUri(collection_utils.BatchResult, I[19]);
  dart.setFieldSignature(collection_utils.BatchResult, () => ({
    __proto__: dart.getFields(collection_utils.BatchResult.__proto__),
    result: dart.finalFieldType(dart.dynamic)
  }));
  collection_utils.BatchResults = class BatchResults extends collection_utils.PluginList {
    static ['_#from#tearOff'](list) {
      return new collection_utils.BatchResults.from(list);
    }
    _get(index) {
      let rawMap = core.Map.as(this[_list][$_get](index));
      return collection_utils.fromRawOperationResult(rawMap);
    }
  };
  (collection_utils.BatchResults.from = function(list) {
    collection_utils.BatchResults.__proto__.from.call(this, list);
    ;
  }).prototype = collection_utils.BatchResults.prototype;
  dart.addTypeTests(collection_utils.BatchResults);
  dart.addTypeCaches(collection_utils.BatchResults);
  dart.setMethodSignature(collection_utils.BatchResults, () => ({
    __proto__: dart.getMethods(collection_utils.BatchResults.__proto__),
    _get: dart.fnType(dart.dynamic, [core.int]),
    [$_get]: dart.fnType(dart.dynamic, [core.int])
  }));
  dart.setLibraryUri(collection_utils.BatchResults, I[19]);
  dart.defineExtensionMethods(collection_utils.BatchResults, ['_get']);
  collection_utils.queryResultSetFromMap = function queryResultSetFromMap(queryResultSetMap) {
    let columns = T$.ListN().as(queryResultSetMap[$_get]("columns"));
    let rows = T$.ListN().as(queryResultSetMap[$_get]("rows"));
    return new collection_utils.QueryResultSet.new(columns, rows);
  };
  collection_utils.databaseExceptionFromOperationError = function databaseExceptionFromOperationError(errorMap) {
    let message = T$.StringN().as(errorMap[$_get]("message"));
    return new exception.SqfliteDatabaseException.new(message, errorMap[$_get]("data"), {resultCode: T$.intN().as(errorMap[$_get]("resultCode"))});
  };
  collection_utils.fromRawOperationResult = function fromRawOperationResult(rawOperationResultMap) {
    let errorMap = T$.MapN().as(rawOperationResultMap[$_get]("error"));
    if (errorMap != null) {
      return collection_utils.databaseExceptionFromOperationError(errorMap);
    }
    let successResult = rawOperationResultMap[$_get]("result");
    if (core.Map.is(successResult)) {
      return collection_utils.queryResultToList(successResult);
    } else if (core.List.is(successResult)) {
      return collection_utils.queryResultToList(successResult);
    }
    return successResult;
  };
  collection_utils.queryResultToList = function queryResultToList(queryResult) {
    if (core.Map.is(queryResult)) {
      return collection_utils.queryResultSetFromMap(queryResult);
    }
    if (core.List.is(queryResult)) {
      let rows = new collection_utils.Rows.from(queryResult);
      return rows;
    }
    dart.throw(new core.UnsupportedError.new("Unsupported queryResult type " + dart.str(queryResult)));
  };
  collection_utils.queryResultCursorId = function queryResultCursorId(queryResult) {
    if (core.Map.is(queryResult)) {
      return T$.intN().as(queryResult[$_get]("cursorId"));
    }
    dart.throw(new core.UnsupportedError.new("Unsupported queryResult type " + dart.str(queryResult)));
  };
  value_utils._checkArg = function _checkArg(arg) {
    let t54;
    if (!(typeof arg == 'string') && !(typeof arg == 'number') && !typed_data.Uint8List.is(arg)) {
      {
        if (core.BigInt.is(arg)) {
          return;
        }
      }
      let type = dart.runtimeType(arg).toString();
      let text = "*** WARNING ***\n\nInvalid argument " + dart.str(arg) + " with type " + type + ".\nOnly num, String and Uint8List are supported. See https://github.com/tekartik/sqflite/blob/master/sqflite/doc/supported_types.md for details\n\nThis will throw an exception in the future. For now it is displayed once per type.\n\n    ";
      if (value_utils.checkThrowException) {
        dart.throw(new core.ArgumentError.new(text));
      } else {
        let printed = (t54 = value_utils._debugCheckPrinted[$_get](type), t54 == null ? false : t54);
        if (!printed) {
          value_utils._debugCheckPrinted[$_set](type, true);
          core.print(text);
        }
      }
    }
  };
  value_utils.checkNonNullValue = function checkNonNullValue(value) {
    if (env_utils.isDebug) {
      value_utils._checkArg(value);
    }
  };
  value_utils.checkRawArgs = function checkRawArgs(args) {
    if (env_utils.isDebug && args != null) {
      for (let arg of args) {
        if (arg != null) {
          value_utils._checkArg(arg);
        }
      }
    }
  };
  value_utils.checkWhereArgs = function checkWhereArgs(args) {
    if (env_utils.isDebug && args != null) {
      for (let arg of args) {
        value_utils._checkArg(arg);
      }
    }
  };
  dart.defineLazy(value_utils, {
    /*value_utils.checkThrowException*/get checkThrowException() {
      return false;
    },
    set checkThrowException(value) {},
    /*value_utils._debugCheckPrinted*/get _debugCheckPrinted() {
      return new (T$.IdentityMapOfString$bool()).new();
    },
    set _debugCheckPrinted(value) {}
  }, false);
  arg_utils._argumentToStringTruncate = function _argumentToStringTruncate(argument) {
    if (argument == null) {
      return null;
    }
    let text = dart.toString(argument);
    if (text.length > 50) {
      return text[$substring](0, 50) + "...";
    }
    return text;
  };
  arg_utils.argumentToString = function argumentToString(argument) {
    if (typed_data.Uint8List.is(argument)) {
      return "Blob(" + dart.str(argument[$length]) + ")";
    }
    return arg_utils._argumentToStringTruncate(argument);
  };
  arg_utils.argumentsToString = function argumentsToString($arguments) {
    return "[" + $arguments[$map](T$.StringN(), dart.fn(e => arg_utils.argumentToString(e), T$.ObjectNToStringN()))[$join](", ") + "]";
  };
  arg_utils.sqlArgumentsToString = function sqlArgumentsToString(sql, $arguments) {
    let t54, t54$;
    return sql + (dart.test((t54$ = (t54 = $arguments, t54 == null ? null : t54[$isNotEmpty]), t54$ == null ? false : t54$)) ? " " + arg_utils.argumentsToString(dart.nullCheck($arguments)) : "");
  };
  sqflite_logger.SqfliteDatabaseFactoryLoggerType = class SqfliteDatabaseFactoryLoggerType extends core._Enum {
    [_enumToString]() {
      return "SqfliteDatabaseFactoryLoggerType." + this[_name];
    }
  };
  (sqflite_logger.SqfliteDatabaseFactoryLoggerType.new = function(index, name) {
    sqflite_logger.SqfliteDatabaseFactoryLoggerType.__proto__.new.call(this, index, name);
    ;
  }).prototype = sqflite_logger.SqfliteDatabaseFactoryLoggerType.prototype;
  dart.addTypeTests(sqflite_logger.SqfliteDatabaseFactoryLoggerType);
  dart.addTypeCaches(sqflite_logger.SqfliteDatabaseFactoryLoggerType);
  dart.setMethodSignature(sqflite_logger.SqfliteDatabaseFactoryLoggerType, () => ({
    __proto__: dart.getMethods(sqflite_logger.SqfliteDatabaseFactoryLoggerType.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(sqflite_logger.SqfliteDatabaseFactoryLoggerType, I[20]);
  dart.setStaticFieldSignature(sqflite_logger.SqfliteDatabaseFactoryLoggerType, () => ['values', 'all', 'invoke']);
  dart.defineLazy(sqflite_logger.SqfliteDatabaseFactoryLoggerType, {
    /*sqflite_logger.SqfliteDatabaseFactoryLoggerType.values*/get values() {
      return C[17] || CT.C17;
    },
    /*sqflite_logger.SqfliteDatabaseFactoryLoggerType.all*/get all() {
      return C[18] || CT.C18;
    },
    /*sqflite_logger.SqfliteDatabaseFactoryLoggerType.invoke*/get invoke() {
      return C[19] || CT.C19;
    }
  }, false);
  sqflite_logger.SqfliteLoggerCommand = class SqfliteLoggerCommand extends core.Object {};
  (sqflite_logger.SqfliteLoggerCommand.new = function() {
    ;
  }).prototype = sqflite_logger.SqfliteLoggerCommand.prototype;
  dart.addTypeTests(sqflite_logger.SqfliteLoggerCommand);
  dart.addTypeCaches(sqflite_logger.SqfliteLoggerCommand);
  dart.setLibraryUri(sqflite_logger.SqfliteLoggerCommand, I[20]);
  sqflite_logger.SqfliteLoggerEvent = class SqfliteLoggerEvent extends core.Object {};
  (sqflite_logger.SqfliteLoggerEvent.new = function() {
    ;
  }).prototype = sqflite_logger.SqfliteLoggerEvent.prototype;
  dart.addTypeTests(sqflite_logger.SqfliteLoggerEvent);
  dart.addTypeCaches(sqflite_logger.SqfliteLoggerEvent);
  sqflite_logger.SqfliteLoggerEvent[dart.implements] = () => [sqflite_logger.SqfliteLoggerCommand];
  dart.setLibraryUri(sqflite_logger.SqfliteLoggerEvent, I[20]);
  sqflite_logger.SqfliteLoggerEventView = class SqfliteLoggerEventView extends core.Object {};
  (sqflite_logger.SqfliteLoggerEventView.new = function() {
    ;
  }).prototype = sqflite_logger.SqfliteLoggerEventView.prototype;
  dart.addTypeTests(sqflite_logger.SqfliteLoggerEventView);
  dart.addTypeCaches(sqflite_logger.SqfliteLoggerEventView);
  sqflite_logger.SqfliteLoggerEventView[dart.implements] = () => [sqflite_logger.SqfliteLoggerEvent];
  dart.setLibraryUri(sqflite_logger.SqfliteLoggerEventView, I[20]);
  var ___SqfliteLoggerEvent_error = dart.privateName(sqflite_logger, "_#_SqfliteLoggerEvent#error");
  var ___SqfliteLoggerEvent_error_isSet = dart.privateName(sqflite_logger, "_#_SqfliteLoggerEvent#error#isSet");
  var ___SqfliteLoggerEvent_sw = dart.privateName(sqflite_logger, "_#_SqfliteLoggerEvent#sw");
  var ___SqfliteLoggerEvent_sw_isSet = dart.privateName(sqflite_logger, "_#_SqfliteLoggerEvent#sw#isSet");
  sqflite_logger._SqfliteLoggerEvent = class _SqfliteLoggerEvent extends core.Object {
    get error() {
      return this[___SqfliteLoggerEvent_error_isSet] ? this[___SqfliteLoggerEvent_error] : dart.throw(new _internal.LateError.fieldNI("error"));
    }
    set error(error$35param) {
      if (this[___SqfliteLoggerEvent_error_isSet])
        dart.throw(new _internal.LateError.fieldAI("error"));
      else {
        this[___SqfliteLoggerEvent_error_isSet] = true;
        this[___SqfliteLoggerEvent_error] = error$35param;
      }
    }
    get sw() {
      return this[___SqfliteLoggerEvent_sw_isSet] ? this[___SqfliteLoggerEvent_sw] : dart.throw(new _internal.LateError.fieldNI("sw"));
    }
    set sw(sw$35param) {
      if (this[___SqfliteLoggerEvent_sw_isSet])
        dart.throw(new _internal.LateError.fieldAI("sw"));
      else {
        this[___SqfliteLoggerEvent_sw_isSet] = true;
        this[___SqfliteLoggerEvent_sw] = sw$35param;
      }
    }
    toMap() {
      return (() => {
        let t56 = new (T$.IdentityMapOfString$ObjectN()).new();
        if (this.sw != null) t56[$_set]("sw", dart.str(dart.nullCheck(this.sw).elapsed));
        if (this.error != null) t56[$_set]("error", this.error);
        return t56;
      })();
    }
    toString() {
      return sqflite_logger['SqfliteLoggerEventInternalExt|toLogString'](this, this.toMap());
    }
  };
  (sqflite_logger._SqfliteLoggerEvent.new = function(sw, error) {
    this[___SqfliteLoggerEvent_error] = null;
    this[___SqfliteLoggerEvent_error_isSet] = false;
    this[___SqfliteLoggerEvent_sw] = null;
    this[___SqfliteLoggerEvent_sw_isSet] = false;
    this[___SqfliteLoggerEvent_sw_isSet] = true;
    this[___SqfliteLoggerEvent_sw] = sw;
    this[___SqfliteLoggerEvent_error_isSet] = true;
    this[___SqfliteLoggerEvent_error] = error;
    ;
  }).prototype = sqflite_logger._SqfliteLoggerEvent.prototype;
  (sqflite_logger._SqfliteLoggerEvent.__ = function() {
    this[___SqfliteLoggerEvent_error] = null;
    this[___SqfliteLoggerEvent_error_isSet] = false;
    this[___SqfliteLoggerEvent_sw] = null;
    this[___SqfliteLoggerEvent_sw_isSet] = false;
    ;
  }).prototype = sqflite_logger._SqfliteLoggerEvent.prototype;
  dart.addTypeTests(sqflite_logger._SqfliteLoggerEvent);
  dart.addTypeCaches(sqflite_logger._SqfliteLoggerEvent);
  sqflite_logger._SqfliteLoggerEvent[dart.implements] = () => [sqflite_logger.SqfliteLoggerEvent, sqflite_logger.SqfliteLoggerEventView];
  dart.setMethodSignature(sqflite_logger._SqfliteLoggerEvent, () => ({
    __proto__: dart.getMethods(sqflite_logger._SqfliteLoggerEvent.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [])
  }));
  dart.setGetterSignature(sqflite_logger._SqfliteLoggerEvent, () => ({
    __proto__: dart.getGetters(sqflite_logger._SqfliteLoggerEvent.__proto__),
    error: dart.nullable(core.Object),
    sw: dart.nullable(core.Stopwatch)
  }));
  dart.setSetterSignature(sqflite_logger._SqfliteLoggerEvent, () => ({
    __proto__: dart.getSetters(sqflite_logger._SqfliteLoggerEvent.__proto__),
    error: dart.nullable(core.Object),
    sw: dart.nullable(core.Stopwatch)
  }));
  dart.setLibraryUri(sqflite_logger._SqfliteLoggerEvent, I[20]);
  dart.setFieldSignature(sqflite_logger._SqfliteLoggerEvent, () => ({
    __proto__: dart.getFields(sqflite_logger._SqfliteLoggerEvent.__proto__),
    [___SqfliteLoggerEvent_error]: dart.fieldType(dart.nullable(core.Object)),
    [___SqfliteLoggerEvent_error_isSet]: dart.fieldType(core.bool),
    [___SqfliteLoggerEvent_sw]: dart.fieldType(dart.nullable(core.Stopwatch)),
    [___SqfliteLoggerEvent_sw_isSet]: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(sqflite_logger._SqfliteLoggerEvent, ['toString']);
  sqflite_logger.SqfliteLoggerInvokeEvent = class SqfliteLoggerInvokeEvent extends sqflite_logger.SqfliteLoggerEvent {};
  (sqflite_logger.SqfliteLoggerInvokeEvent.new = function() {
    ;
  }).prototype = sqflite_logger.SqfliteLoggerInvokeEvent.prototype;
  dart.addTypeTests(sqflite_logger.SqfliteLoggerInvokeEvent);
  dart.addTypeCaches(sqflite_logger.SqfliteLoggerInvokeEvent);
  dart.setLibraryUri(sqflite_logger.SqfliteLoggerInvokeEvent, I[20]);
  sqflite_logger.SqfliteLoggerDatabaseDeleteEvent = class SqfliteLoggerDatabaseDeleteEvent extends sqflite_logger.SqfliteLoggerEvent {};
  (sqflite_logger.SqfliteLoggerDatabaseDeleteEvent.new = function() {
    ;
  }).prototype = sqflite_logger.SqfliteLoggerDatabaseDeleteEvent.prototype;
  dart.addTypeTests(sqflite_logger.SqfliteLoggerDatabaseDeleteEvent);
  dart.addTypeCaches(sqflite_logger.SqfliteLoggerDatabaseDeleteEvent);
  dart.setLibraryUri(sqflite_logger.SqfliteLoggerDatabaseDeleteEvent, I[20]);
  sqflite_logger.SqfliteLoggerDatabaseOpenEvent = class SqfliteLoggerDatabaseOpenEvent extends sqflite_logger.SqfliteLoggerEvent {};
  (sqflite_logger.SqfliteLoggerDatabaseOpenEvent.new = function() {
    ;
  }).prototype = sqflite_logger.SqfliteLoggerDatabaseOpenEvent.prototype;
  dart.addTypeTests(sqflite_logger.SqfliteLoggerDatabaseOpenEvent);
  dart.addTypeCaches(sqflite_logger.SqfliteLoggerDatabaseOpenEvent);
  dart.setLibraryUri(sqflite_logger.SqfliteLoggerDatabaseOpenEvent, I[20]);
  sqflite_logger.SqfliteLoggerDatabaseCloseEvent = class SqfliteLoggerDatabaseCloseEvent extends sqflite_logger.SqfliteLoggerEvent {};
  (sqflite_logger.SqfliteLoggerDatabaseCloseEvent.new = function() {
    ;
  }).prototype = sqflite_logger.SqfliteLoggerDatabaseCloseEvent.prototype;
  dart.addTypeTests(sqflite_logger.SqfliteLoggerDatabaseCloseEvent);
  dart.addTypeCaches(sqflite_logger.SqfliteLoggerDatabaseCloseEvent);
  dart.setLibraryUri(sqflite_logger.SqfliteLoggerDatabaseCloseEvent, I[20]);
  sqflite_logger.SqfliteLoggerDatabaseEvent = class SqfliteLoggerDatabaseEvent extends core.Object {};
  (sqflite_logger.SqfliteLoggerDatabaseEvent.new = function() {
    ;
  }).prototype = sqflite_logger.SqfliteLoggerDatabaseEvent.prototype;
  dart.addTypeTests(sqflite_logger.SqfliteLoggerDatabaseEvent);
  dart.addTypeCaches(sqflite_logger.SqfliteLoggerDatabaseEvent);
  sqflite_logger.SqfliteLoggerDatabaseEvent[dart.implements] = () => [sqflite_logger.SqfliteLoggerEvent];
  dart.setLibraryUri(sqflite_logger.SqfliteLoggerDatabaseEvent, I[20]);
  const _is_SqfliteLoggerSqlEvent_default = Symbol('_is_SqfliteLoggerSqlEvent_default');
  sqflite_logger.SqfliteLoggerSqlEvent$ = dart.generic(T => {
    class SqfliteLoggerSqlEvent extends sqflite_logger.SqfliteLoggerDatabaseEvent {}
    (SqfliteLoggerSqlEvent.new = function() {
      ;
    }).prototype = SqfliteLoggerSqlEvent.prototype;
    dart.addTypeTests(SqfliteLoggerSqlEvent);
    SqfliteLoggerSqlEvent.prototype[_is_SqfliteLoggerSqlEvent_default] = true;
    dart.addTypeCaches(SqfliteLoggerSqlEvent);
    SqfliteLoggerSqlEvent[dart.implements] = () => [sqflite_logger.SqfliteLoggerSqlCommand$(T)];
    dart.setLibraryUri(SqfliteLoggerSqlEvent, I[20]);
    return SqfliteLoggerSqlEvent;
  });
  sqflite_logger.SqfliteLoggerSqlEvent = sqflite_logger.SqfliteLoggerSqlEvent$();
  dart.addTypeTests(sqflite_logger.SqfliteLoggerSqlEvent, _is_SqfliteLoggerSqlEvent_default);
  const _is_SqfliteLoggerSqlCommand_default = Symbol('_is_SqfliteLoggerSqlCommand_default');
  sqflite_logger.SqfliteLoggerSqlCommand$ = dart.generic(T => {
    class SqfliteLoggerSqlCommand extends core.Object {}
    (SqfliteLoggerSqlCommand.new = function() {
      ;
    }).prototype = SqfliteLoggerSqlCommand.prototype;
    dart.addTypeTests(SqfliteLoggerSqlCommand);
    SqfliteLoggerSqlCommand.prototype[_is_SqfliteLoggerSqlCommand_default] = true;
    dart.addTypeCaches(SqfliteLoggerSqlCommand);
    SqfliteLoggerSqlCommand[dart.implements] = () => [sqflite_logger.SqfliteLoggerCommand];
    dart.setLibraryUri(SqfliteLoggerSqlCommand, I[20]);
    return SqfliteLoggerSqlCommand;
  });
  sqflite_logger.SqfliteLoggerSqlCommand = sqflite_logger.SqfliteLoggerSqlCommand$();
  dart.addTypeTests(sqflite_logger.SqfliteLoggerSqlCommand, _is_SqfliteLoggerSqlCommand_default);
  sqflite_logger.SqfliteLoggerBatchEvent = class SqfliteLoggerBatchEvent extends sqflite_logger.SqfliteLoggerDatabaseEvent {};
  (sqflite_logger.SqfliteLoggerBatchEvent.new = function() {
    ;
  }).prototype = sqflite_logger.SqfliteLoggerBatchEvent.prototype;
  dart.addTypeTests(sqflite_logger.SqfliteLoggerBatchEvent);
  dart.addTypeCaches(sqflite_logger.SqfliteLoggerBatchEvent);
  dart.setLibraryUri(sqflite_logger.SqfliteLoggerBatchEvent, I[20]);
  const _is_SqfliteLoggerBatchOperation_default = Symbol('_is_SqfliteLoggerBatchOperation_default');
  sqflite_logger.SqfliteLoggerBatchOperation$ = dart.generic(T => {
    class SqfliteLoggerBatchOperation extends core.Object {}
    (SqfliteLoggerBatchOperation.new = function() {
      ;
    }).prototype = SqfliteLoggerBatchOperation.prototype;
    dart.addTypeTests(SqfliteLoggerBatchOperation);
    SqfliteLoggerBatchOperation.prototype[_is_SqfliteLoggerBatchOperation_default] = true;
    dart.addTypeCaches(SqfliteLoggerBatchOperation);
    SqfliteLoggerBatchOperation[dart.implements] = () => [sqflite_logger.SqfliteLoggerSqlCommand$(T)];
    dart.setLibraryUri(SqfliteLoggerBatchOperation, I[20]);
    return SqfliteLoggerBatchOperation;
  });
  sqflite_logger.SqfliteLoggerBatchOperation = sqflite_logger.SqfliteLoggerBatchOperation$();
  dart.addTypeTests(sqflite_logger.SqfliteLoggerBatchOperation, _is_SqfliteLoggerBatchOperation_default);
  var _$35_SqfliteLoggerSqlCommandMixin$35type = dart.privateName(sqflite_logger, "_SqfliteLoggerSqlCommandMixin._#_SqfliteLoggerSqlCommandMixin#type");
  var _$35_SqfliteLoggerSqlCommandMixin$35sql = dart.privateName(sqflite_logger, "_SqfliteLoggerSqlCommandMixin._#_SqfliteLoggerSqlCommandMixin#sql");
  var _$35_SqfliteLoggerSqlCommandMixin$35arguments = dart.privateName(sqflite_logger, "_SqfliteLoggerSqlCommandMixin._#_SqfliteLoggerSqlCommandMixin#arguments");
  var _$35_SqfliteLoggerSqlCommandMixin$35arguments$35isSet = dart.privateName(sqflite_logger, "_SqfliteLoggerSqlCommandMixin._#_SqfliteLoggerSqlCommandMixin#arguments#isSet");
  var _$35_SqfliteLoggerSqlCommandMixin$35result = dart.privateName(sqflite_logger, "_SqfliteLoggerSqlCommandMixin._#_SqfliteLoggerSqlCommandMixin#result");
  var _$35_SqfliteLoggerSqlCommandMixin$35result$35isSet = dart.privateName(sqflite_logger, "_SqfliteLoggerSqlCommandMixin._#_SqfliteLoggerSqlCommandMixin#result#isSet");
  var ___SqfliteLoggerSqlCommandMixin_type = dart.privateName(sqflite_logger, "_#_SqfliteLoggerSqlCommandMixin#type");
  var ___SqfliteLoggerSqlCommandMixin_sql = dart.privateName(sqflite_logger, "_#_SqfliteLoggerSqlCommandMixin#sql");
  var ___SqfliteLoggerSqlCommandMixin_arguments = dart.privateName(sqflite_logger, "_#_SqfliteLoggerSqlCommandMixin#arguments");
  var ___SqfliteLoggerSqlCommandMixin_arguments_isSet = dart.privateName(sqflite_logger, "_#_SqfliteLoggerSqlCommandMixin#arguments#isSet");
  var ___SqfliteLoggerSqlCommandMixin_result = dart.privateName(sqflite_logger, "_#_SqfliteLoggerSqlCommandMixin#result");
  var ___SqfliteLoggerSqlCommandMixin_result_isSet = dart.privateName(sqflite_logger, "_#_SqfliteLoggerSqlCommandMixin#result#isSet");
  var _typeAsText = dart.privateName(sqflite_logger, "_typeAsText");
  const _is__SqfliteLoggerSqlCommandMixin_default = Symbol('_is__SqfliteLoggerSqlCommandMixin_default');
  sqflite_logger._SqfliteLoggerSqlCommandMixin$ = dart.generic(T => {
    class _SqfliteLoggerSqlCommandMixin extends core.Object {}
    _SqfliteLoggerSqlCommandMixin[dart.mixinOn] = Object => class _SqfliteLoggerSqlCommandMixin extends Object {
      get [___SqfliteLoggerSqlCommandMixin_type]() {
        return this[_$35_SqfliteLoggerSqlCommandMixin$35type];
      }
      set [___SqfliteLoggerSqlCommandMixin_type](value) {
        this[_$35_SqfliteLoggerSqlCommandMixin$35type] = value;
      }
      get [___SqfliteLoggerSqlCommandMixin_sql]() {
        return this[_$35_SqfliteLoggerSqlCommandMixin$35sql];
      }
      set [___SqfliteLoggerSqlCommandMixin_sql](value) {
        this[_$35_SqfliteLoggerSqlCommandMixin$35sql] = value;
      }
      get [___SqfliteLoggerSqlCommandMixin_arguments]() {
        return this[_$35_SqfliteLoggerSqlCommandMixin$35arguments];
      }
      set [___SqfliteLoggerSqlCommandMixin_arguments](value) {
        this[_$35_SqfliteLoggerSqlCommandMixin$35arguments] = value;
      }
      get [___SqfliteLoggerSqlCommandMixin_arguments_isSet]() {
        return this[_$35_SqfliteLoggerSqlCommandMixin$35arguments$35isSet];
      }
      set [___SqfliteLoggerSqlCommandMixin_arguments_isSet](value) {
        this[_$35_SqfliteLoggerSqlCommandMixin$35arguments$35isSet] = value;
      }
      get [___SqfliteLoggerSqlCommandMixin_result]() {
        return this[_$35_SqfliteLoggerSqlCommandMixin$35result];
      }
      set [___SqfliteLoggerSqlCommandMixin_result](value) {
        this[_$35_SqfliteLoggerSqlCommandMixin$35result] = value;
      }
      get [___SqfliteLoggerSqlCommandMixin_result_isSet]() {
        return this[_$35_SqfliteLoggerSqlCommandMixin$35result$35isSet];
      }
      set [___SqfliteLoggerSqlCommandMixin_result_isSet](value) {
        this[_$35_SqfliteLoggerSqlCommandMixin$35result$35isSet] = value;
      }
      get type() {
        let t57;
        t57 = this[___SqfliteLoggerSqlCommandMixin_type];
        return t57 == null ? dart.throw(new _internal.LateError.fieldNI("type")) : t57;
      }
      set type(type$35param) {
        if (this[___SqfliteLoggerSqlCommandMixin_type] == null)
          this[___SqfliteLoggerSqlCommandMixin_type] = type$35param;
        else
          dart.throw(new _internal.LateError.fieldAI("type"));
      }
      get sql() {
        let t57;
        t57 = this[___SqfliteLoggerSqlCommandMixin_sql];
        return t57 == null ? dart.throw(new _internal.LateError.fieldNI("sql")) : t57;
      }
      set sql(sql$35param) {
        if (this[___SqfliteLoggerSqlCommandMixin_sql] == null)
          this[___SqfliteLoggerSqlCommandMixin_sql] = sql$35param;
        else
          dart.throw(new _internal.LateError.fieldAI("sql"));
      }
      get arguments() {
        return this[___SqfliteLoggerSqlCommandMixin_arguments_isSet] ? this[___SqfliteLoggerSqlCommandMixin_arguments] : dart.throw(new _internal.LateError.fieldNI("arguments"));
      }
      set arguments(arguments$35param) {
        if (this[___SqfliteLoggerSqlCommandMixin_arguments_isSet])
          dart.throw(new _internal.LateError.fieldAI("arguments"));
        else {
          this[___SqfliteLoggerSqlCommandMixin_arguments_isSet] = true;
          this[___SqfliteLoggerSqlCommandMixin_arguments] = arguments$35param;
        }
      }
      get result() {
        return this[___SqfliteLoggerSqlCommandMixin_result_isSet] ? this[___SqfliteLoggerSqlCommandMixin_result] : dart.throw(new _internal.LateError.fieldNI("result"));
      }
      set result(result$35param) {
        if (this[___SqfliteLoggerSqlCommandMixin_result_isSet])
          dart.throw(new _internal.LateError.fieldAI("result"));
        else {
          this[___SqfliteLoggerSqlCommandMixin_result_isSet] = true;
          this[___SqfliteLoggerSqlCommandMixin_result] = result$35param;
        }
      }
      get [_typeAsText]() {
        return this.type.toString()[$split](".")[$last];
      }
    };
    (_SqfliteLoggerSqlCommandMixin[dart.mixinNew] = function() {
      this[_$35_SqfliteLoggerSqlCommandMixin$35type] = null;
      this[_$35_SqfliteLoggerSqlCommandMixin$35sql] = null;
      this[_$35_SqfliteLoggerSqlCommandMixin$35arguments] = null;
      this[_$35_SqfliteLoggerSqlCommandMixin$35arguments$35isSet] = false;
      this[_$35_SqfliteLoggerSqlCommandMixin$35result] = null;
      this[_$35_SqfliteLoggerSqlCommandMixin$35result$35isSet] = false;
    }).prototype = _SqfliteLoggerSqlCommandMixin.prototype;
    dart.addTypeTests(_SqfliteLoggerSqlCommandMixin);
    _SqfliteLoggerSqlCommandMixin.prototype[_is__SqfliteLoggerSqlCommandMixin_default] = true;
    dart.addTypeCaches(_SqfliteLoggerSqlCommandMixin);
    _SqfliteLoggerSqlCommandMixin[dart.implements] = () => [sqflite_logger.SqfliteLoggerSqlCommand$(T), core.Object];
    dart.setGetterSignature(_SqfliteLoggerSqlCommandMixin, () => ({
      __proto__: dart.getGetters(_SqfliteLoggerSqlCommandMixin.__proto__),
      type: sql_command.SqliteSqlCommandType,
      sql: core.String,
      arguments: dart.nullable(core.Object),
      result: dart.nullable(T),
      [_typeAsText]: core.String
    }));
    dart.setSetterSignature(_SqfliteLoggerSqlCommandMixin, () => ({
      __proto__: dart.getSetters(_SqfliteLoggerSqlCommandMixin.__proto__),
      type: sql_command.SqliteSqlCommandType,
      sql: core.String,
      arguments: dart.nullable(core.Object),
      result: dart.nullable(T)
    }));
    dart.setLibraryUri(_SqfliteLoggerSqlCommandMixin, I[20]);
    dart.setFieldSignature(_SqfliteLoggerSqlCommandMixin, () => ({
      __proto__: dart.getFields(_SqfliteLoggerSqlCommandMixin.__proto__),
      [___SqfliteLoggerSqlCommandMixin_type]: dart.fieldType(dart.nullable(sql_command.SqliteSqlCommandType)),
      [___SqfliteLoggerSqlCommandMixin_sql]: dart.fieldType(dart.nullable(core.String)),
      [___SqfliteLoggerSqlCommandMixin_arguments]: dart.fieldType(dart.nullable(core.Object)),
      [___SqfliteLoggerSqlCommandMixin_arguments_isSet]: dart.fieldType(core.bool),
      [___SqfliteLoggerSqlCommandMixin_result]: dart.fieldType(dart.nullable(T)),
      [___SqfliteLoggerSqlCommandMixin_result_isSet]: dart.fieldType(core.bool)
    }));
    return _SqfliteLoggerSqlCommandMixin;
  });
  sqflite_logger._SqfliteLoggerSqlCommandMixin = sqflite_logger._SqfliteLoggerSqlCommandMixin$();
  dart.addTypeTests(sqflite_logger._SqfliteLoggerSqlCommandMixin, _is__SqfliteLoggerSqlCommandMixin_default);
  var ___SqfliteLoggerDatabaseEvent__client = dart.privateName(sqflite_logger, "_#_SqfliteLoggerDatabaseEvent#_client");
  var ___SqfliteLoggerDatabaseEvent_txnId = dart.privateName(sqflite_logger, "_#_SqfliteLoggerDatabaseEvent#txnId");
  var ___SqfliteLoggerDatabaseEvent_txnId_isSet = dart.privateName(sqflite_logger, "_#_SqfliteLoggerDatabaseEvent#txnId#isSet");
  var _client = dart.privateName(sqflite_logger, "_client");
  var _databasePrefixMap = dart.privateName(sqflite_logger, "_databasePrefixMap");
  sqflite_logger._SqfliteLoggerDatabaseEvent = class _SqfliteLoggerDatabaseEvent extends sqflite_logger._SqfliteLoggerEvent {
    get [_client]() {
      let t57;
      t57 = this[___SqfliteLoggerDatabaseEvent__client];
      return t57 == null ? dart.throw(new _internal.LateError.fieldNI("_client")) : t57;
    }
    set [_client](_client$35param) {
      if (this[___SqfliteLoggerDatabaseEvent__client] == null)
        this[___SqfliteLoggerDatabaseEvent__client] = _client$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_client"));
    }
    get client() {
      return this[_client];
    }
    set client(client) {
      let t57;
      this[_client] = client;
      this.txnId = (t57 = database_mixin.SqfliteDatabaseExecutorMixin.as(client).txn, t57 == null ? null : t57.transactionId);
    }
    get [_databasePrefixMap]() {
      return (() => {
        let t57 = new (T$.IdentityMapOfString$ObjectN()).new();
        if (database$.SqfliteDatabase.is(this.client.database)) t57[$_set]("db", database$.SqfliteDatabase.as(this.client.database).id);
        if (this.txnId != null) t57[$_set]("txn", this.txnId);
        return t57;
      })();
    }
    get txnId() {
      return this[___SqfliteLoggerDatabaseEvent_txnId_isSet] ? this[___SqfliteLoggerDatabaseEvent_txnId] : dart.throw(new _internal.LateError.fieldNI("txnId"));
    }
    set txnId(txnId$35param) {
      this[___SqfliteLoggerDatabaseEvent_txnId_isSet] = true;
      this[___SqfliteLoggerDatabaseEvent_txnId] = txnId$35param;
    }
    toMap() {
      return (() => {
        let t58 = T$.LinkedHashMapOfString$ObjectN().of(this[_databasePrefixMap]);
        t58[$addAll](super.toMap());
        return t58;
      })();
    }
  };
  (sqflite_logger._SqfliteLoggerDatabaseEvent.new = function(sw, client, error) {
    this[___SqfliteLoggerDatabaseEvent__client] = null;
    this[___SqfliteLoggerDatabaseEvent_txnId] = null;
    this[___SqfliteLoggerDatabaseEvent_txnId_isSet] = false;
    sqflite_logger._SqfliteLoggerDatabaseEvent.__proto__.new.call(this, sw, error);
    this.client = client;
  }).prototype = sqflite_logger._SqfliteLoggerDatabaseEvent.prototype;
  (sqflite_logger._SqfliteLoggerDatabaseEvent.__ = function() {
    this[___SqfliteLoggerDatabaseEvent__client] = null;
    this[___SqfliteLoggerDatabaseEvent_txnId] = null;
    this[___SqfliteLoggerDatabaseEvent_txnId_isSet] = false;
    sqflite_logger._SqfliteLoggerDatabaseEvent.__proto__.__.call(this);
    ;
  }).prototype = sqflite_logger._SqfliteLoggerDatabaseEvent.prototype;
  dart.addTypeTests(sqflite_logger._SqfliteLoggerDatabaseEvent);
  dart.addTypeCaches(sqflite_logger._SqfliteLoggerDatabaseEvent);
  sqflite_logger._SqfliteLoggerDatabaseEvent[dart.implements] = () => [sqflite_logger.SqfliteLoggerDatabaseEvent];
  dart.setGetterSignature(sqflite_logger._SqfliteLoggerDatabaseEvent, () => ({
    __proto__: dart.getGetters(sqflite_logger._SqfliteLoggerDatabaseEvent.__proto__),
    [_client]: sqlite_api$.DatabaseExecutor,
    client: sqlite_api$.DatabaseExecutor,
    [_databasePrefixMap]: core.Map$(core.String, dart.nullable(core.Object)),
    txnId: dart.nullable(core.int)
  }));
  dart.setSetterSignature(sqflite_logger._SqfliteLoggerDatabaseEvent, () => ({
    __proto__: dart.getSetters(sqflite_logger._SqfliteLoggerDatabaseEvent.__proto__),
    [_client]: sqlite_api$.DatabaseExecutor,
    client: sqlite_api$.DatabaseExecutor,
    txnId: dart.nullable(core.int)
  }));
  dart.setLibraryUri(sqflite_logger._SqfliteLoggerDatabaseEvent, I[20]);
  dart.setFieldSignature(sqflite_logger._SqfliteLoggerDatabaseEvent, () => ({
    __proto__: dart.getFields(sqflite_logger._SqfliteLoggerDatabaseEvent.__proto__),
    [___SqfliteLoggerDatabaseEvent__client]: dart.fieldType(dart.nullable(sqlite_api$.DatabaseExecutor)),
    [___SqfliteLoggerDatabaseEvent_txnId]: dart.fieldType(dart.nullable(core.int)),
    [___SqfliteLoggerDatabaseEvent_txnId_isSet]: dart.fieldType(core.bool)
  }));
  sqflite_logger.SqfliteLoggerSqlCommandExecute = class SqfliteLoggerSqlCommandExecute extends sqflite_logger.SqfliteLoggerSqlCommand$(dart.void) {};
  (sqflite_logger.SqfliteLoggerSqlCommandExecute.new = function() {
    ;
  }).prototype = sqflite_logger.SqfliteLoggerSqlCommandExecute.prototype;
  dart.addTypeTests(sqflite_logger.SqfliteLoggerSqlCommandExecute);
  dart.addTypeCaches(sqflite_logger.SqfliteLoggerSqlCommandExecute);
  dart.setLibraryUri(sqflite_logger.SqfliteLoggerSqlCommandExecute, I[20]);
  sqflite_logger.SqfliteLoggerSqlCommandInsert = class SqfliteLoggerSqlCommandInsert extends sqflite_logger.SqfliteLoggerSqlCommand$(core.int) {};
  (sqflite_logger.SqfliteLoggerSqlCommandInsert.new = function() {
    ;
  }).prototype = sqflite_logger.SqfliteLoggerSqlCommandInsert.prototype;
  dart.addTypeTests(sqflite_logger.SqfliteLoggerSqlCommandInsert);
  dart.addTypeCaches(sqflite_logger.SqfliteLoggerSqlCommandInsert);
  dart.setLibraryUri(sqflite_logger.SqfliteLoggerSqlCommandInsert, I[20]);
  sqflite_logger.SqfliteLoggerSqlCommandUpdate = class SqfliteLoggerSqlCommandUpdate extends sqflite_logger.SqfliteLoggerSqlCommand$(core.int) {};
  (sqflite_logger.SqfliteLoggerSqlCommandUpdate.new = function() {
    ;
  }).prototype = sqflite_logger.SqfliteLoggerSqlCommandUpdate.prototype;
  dart.addTypeTests(sqflite_logger.SqfliteLoggerSqlCommandUpdate);
  dart.addTypeCaches(sqflite_logger.SqfliteLoggerSqlCommandUpdate);
  dart.setLibraryUri(sqflite_logger.SqfliteLoggerSqlCommandUpdate, I[20]);
  sqflite_logger.SqfliteLoggerSqlCommandDelete = class SqfliteLoggerSqlCommandDelete extends sqflite_logger.SqfliteLoggerSqlCommand$(core.int) {};
  (sqflite_logger.SqfliteLoggerSqlCommandDelete.new = function() {
    ;
  }).prototype = sqflite_logger.SqfliteLoggerSqlCommandDelete.prototype;
  dart.addTypeTests(sqflite_logger.SqfliteLoggerSqlCommandDelete);
  dart.addTypeCaches(sqflite_logger.SqfliteLoggerSqlCommandDelete);
  dart.setLibraryUri(sqflite_logger.SqfliteLoggerSqlCommandDelete, I[20]);
  sqflite_logger.SqfliteLoggerSqlCommandQuery = class SqfliteLoggerSqlCommandQuery extends sqflite_logger.SqfliteLoggerSqlCommand$(core.List$(core.Map$(core.String, dart.nullable(core.Object)))) {};
  (sqflite_logger.SqfliteLoggerSqlCommandQuery.new = function() {
    ;
  }).prototype = sqflite_logger.SqfliteLoggerSqlCommandQuery.prototype;
  dart.addTypeTests(sqflite_logger.SqfliteLoggerSqlCommandQuery);
  dart.addTypeCaches(sqflite_logger.SqfliteLoggerSqlCommandQuery);
  dart.setLibraryUri(sqflite_logger.SqfliteLoggerSqlCommandQuery, I[20]);
  sqflite_logger._SqfliteLoggerSqlCommandInsertMixin = class _SqfliteLoggerSqlCommandInsertMixin extends core.Object {};
  sqflite_logger._SqfliteLoggerSqlCommandInsertMixin[dart.mixinOn] = Object => class _SqfliteLoggerSqlCommandInsertMixin extends Object {
    get name() {
      return "insert";
    }
  };
  (sqflite_logger._SqfliteLoggerSqlCommandInsertMixin[dart.mixinNew] = function() {
  }).prototype = sqflite_logger._SqfliteLoggerSqlCommandInsertMixin.prototype;
  dart.addTypeTests(sqflite_logger._SqfliteLoggerSqlCommandInsertMixin);
  dart.addTypeCaches(sqflite_logger._SqfliteLoggerSqlCommandInsertMixin);
  sqflite_logger._SqfliteLoggerSqlCommandInsertMixin[dart.implements] = () => [core.Object];
  dart.setGetterSignature(sqflite_logger._SqfliteLoggerSqlCommandInsertMixin, () => ({
    __proto__: dart.getGetters(sqflite_logger._SqfliteLoggerSqlCommandInsertMixin.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(sqflite_logger._SqfliteLoggerSqlCommandInsertMixin, I[20]);
  sqflite_logger._SqfliteLoggerSqlCommandExecuteMixin = class _SqfliteLoggerSqlCommandExecuteMixin extends core.Object {};
  sqflite_logger._SqfliteLoggerSqlCommandExecuteMixin[dart.mixinOn] = Object => class _SqfliteLoggerSqlCommandExecuteMixin extends Object {
    get name() {
      return "execute";
    }
  };
  (sqflite_logger._SqfliteLoggerSqlCommandExecuteMixin[dart.mixinNew] = function() {
  }).prototype = sqflite_logger._SqfliteLoggerSqlCommandExecuteMixin.prototype;
  dart.addTypeTests(sqflite_logger._SqfliteLoggerSqlCommandExecuteMixin);
  dart.addTypeCaches(sqflite_logger._SqfliteLoggerSqlCommandExecuteMixin);
  sqflite_logger._SqfliteLoggerSqlCommandExecuteMixin[dart.implements] = () => [core.Object];
  dart.setGetterSignature(sqflite_logger._SqfliteLoggerSqlCommandExecuteMixin, () => ({
    __proto__: dart.getGetters(sqflite_logger._SqfliteLoggerSqlCommandExecuteMixin.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(sqflite_logger._SqfliteLoggerSqlCommandExecuteMixin, I[20]);
  sqflite_logger._SqfliteLoggerSqlCommandUpdateMixin = class _SqfliteLoggerSqlCommandUpdateMixin extends core.Object {};
  sqflite_logger._SqfliteLoggerSqlCommandUpdateMixin[dart.mixinOn] = Object => class _SqfliteLoggerSqlCommandUpdateMixin extends Object {
    get name() {
      return "update";
    }
  };
  (sqflite_logger._SqfliteLoggerSqlCommandUpdateMixin[dart.mixinNew] = function() {
  }).prototype = sqflite_logger._SqfliteLoggerSqlCommandUpdateMixin.prototype;
  dart.addTypeTests(sqflite_logger._SqfliteLoggerSqlCommandUpdateMixin);
  dart.addTypeCaches(sqflite_logger._SqfliteLoggerSqlCommandUpdateMixin);
  sqflite_logger._SqfliteLoggerSqlCommandUpdateMixin[dart.implements] = () => [core.Object];
  dart.setGetterSignature(sqflite_logger._SqfliteLoggerSqlCommandUpdateMixin, () => ({
    __proto__: dart.getGetters(sqflite_logger._SqfliteLoggerSqlCommandUpdateMixin.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(sqflite_logger._SqfliteLoggerSqlCommandUpdateMixin, I[20]);
  sqflite_logger._SqfliteLoggerSqlCommandDeleteMixin = class _SqfliteLoggerSqlCommandDeleteMixin extends core.Object {};
  sqflite_logger._SqfliteLoggerSqlCommandDeleteMixin[dart.mixinOn] = Object => class _SqfliteLoggerSqlCommandDeleteMixin extends Object {
    get name() {
      return "delete";
    }
  };
  (sqflite_logger._SqfliteLoggerSqlCommandDeleteMixin[dart.mixinNew] = function() {
  }).prototype = sqflite_logger._SqfliteLoggerSqlCommandDeleteMixin.prototype;
  dart.addTypeTests(sqflite_logger._SqfliteLoggerSqlCommandDeleteMixin);
  dart.addTypeCaches(sqflite_logger._SqfliteLoggerSqlCommandDeleteMixin);
  sqflite_logger._SqfliteLoggerSqlCommandDeleteMixin[dart.implements] = () => [core.Object];
  dart.setGetterSignature(sqflite_logger._SqfliteLoggerSqlCommandDeleteMixin, () => ({
    __proto__: dart.getGetters(sqflite_logger._SqfliteLoggerSqlCommandDeleteMixin.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(sqflite_logger._SqfliteLoggerSqlCommandDeleteMixin, I[20]);
  sqflite_logger._SqfliteLoggerSqlCommandQueryMixin = class _SqfliteLoggerSqlCommandQueryMixin extends core.Object {};
  sqflite_logger._SqfliteLoggerSqlCommandQueryMixin[dart.mixinOn] = Object => class _SqfliteLoggerSqlCommandQueryMixin extends Object {
    get name() {
      return "query";
    }
  };
  (sqflite_logger._SqfliteLoggerSqlCommandQueryMixin[dart.mixinNew] = function() {
  }).prototype = sqflite_logger._SqfliteLoggerSqlCommandQueryMixin.prototype;
  dart.addTypeTests(sqflite_logger._SqfliteLoggerSqlCommandQueryMixin);
  dart.addTypeCaches(sqflite_logger._SqfliteLoggerSqlCommandQueryMixin);
  sqflite_logger._SqfliteLoggerSqlCommandQueryMixin[dart.implements] = () => [core.Object];
  dart.setGetterSignature(sqflite_logger._SqfliteLoggerSqlCommandQueryMixin, () => ({
    __proto__: dart.getGetters(sqflite_logger._SqfliteLoggerSqlCommandQueryMixin.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(sqflite_logger._SqfliteLoggerSqlCommandQueryMixin, I[20]);
  const _is__SqfliteLoggerSqlEvent_default = Symbol('_is__SqfliteLoggerSqlEvent_default');
  sqflite_logger._SqfliteLoggerSqlEvent$ = dart.generic(T => {
    const _SqfliteLoggerDatabaseEvent__SqfliteLoggerSqlCommandMixin$36 = class _SqfliteLoggerDatabaseEvent__SqfliteLoggerSqlCommandMixin extends sqflite_logger._SqfliteLoggerDatabaseEvent {};
    (_SqfliteLoggerDatabaseEvent__SqfliteLoggerSqlCommandMixin$36.new = function(sw, client, error) {
      sqflite_logger._SqfliteLoggerSqlCommandMixin$(T)[dart.mixinNew].call(this);
      _SqfliteLoggerDatabaseEvent__SqfliteLoggerSqlCommandMixin$36.__proto__.new.call(this, sw, client, error);
    }).prototype = _SqfliteLoggerDatabaseEvent__SqfliteLoggerSqlCommandMixin$36.prototype;
    (_SqfliteLoggerDatabaseEvent__SqfliteLoggerSqlCommandMixin$36.__ = function() {
      sqflite_logger._SqfliteLoggerSqlCommandMixin$(T)[dart.mixinNew].call(this);
      _SqfliteLoggerDatabaseEvent__SqfliteLoggerSqlCommandMixin$36.__proto__.__.call(this);
    }).prototype = _SqfliteLoggerDatabaseEvent__SqfliteLoggerSqlCommandMixin$36.prototype;
    dart.applyMixin(_SqfliteLoggerDatabaseEvent__SqfliteLoggerSqlCommandMixin$36, sqflite_logger._SqfliteLoggerSqlCommandMixin$(T));
    class _SqfliteLoggerSqlEvent extends _SqfliteLoggerDatabaseEvent__SqfliteLoggerSqlCommandMixin$36 {
      static fromDynamic(sw, client, type, sql, $arguments, result, error) {
        let event = null;
        switch (type) {
          case C[20] || CT.C20:
            {
              event = new sqflite_logger._SqfliteLoggerSqlEventExecute.new();
              break;
            }
          case C[21] || CT.C21:
            {
              event = new sqflite_logger._SqfliteLoggerSqlEventInsert.new();
              break;
            }
          case C[22] || CT.C22:
            {
              event = new sqflite_logger._SqfliteLoggerSqlEventUpdate.new();
              break;
            }
          case C[23] || CT.C23:
            {
              event = new sqflite_logger._SqfliteLoggerSqlEventDelete.new();
              break;
            }
          case C[24] || CT.C24:
            {
              event = new sqflite_logger._SqfliteLoggerSqlEventQuery.new();
              break;
            }
        }
        event.type = type;
        event.sql = sql;
        event.arguments = $arguments;
        event.result = result;
        event.error = error;
        event.sw = sw;
        event.client = client;
        return event;
      }
      toMap() {
        return (() => {
          let t59 = T$.LinkedHashMapOfString$ObjectN().of(this[_databasePrefixMap]);
          t59[$_set]("sql", this.sql);
          if (this.arguments != null) t59[$_set]("arguments", this.arguments);
          if (this.result != null) t59[$_set]("result", this.result);
          t59[$addAll](super.toMap());
          return t59;
        })();
      }
      toString() {
        return this[_typeAsText] + "(" + super.toString() + ")";
      }
    }
    (_SqfliteLoggerSqlEvent.new = function() {
      _SqfliteLoggerSqlEvent.__proto__.__.call(this);
      ;
    }).prototype = _SqfliteLoggerSqlEvent.prototype;
    dart.addTypeTests(_SqfliteLoggerSqlEvent);
    _SqfliteLoggerSqlEvent.prototype[_is__SqfliteLoggerSqlEvent_default] = true;
    dart.addTypeCaches(_SqfliteLoggerSqlEvent);
    _SqfliteLoggerSqlEvent[dart.implements] = () => [sqflite_logger.SqfliteLoggerSqlEvent$(T)];
    dart.setStaticMethodSignature(_SqfliteLoggerSqlEvent, () => ['fromDynamic']);
    dart.setLibraryUri(_SqfliteLoggerSqlEvent, I[20]);
    dart.defineExtensionMethods(_SqfliteLoggerSqlEvent, ['toString']);
    return _SqfliteLoggerSqlEvent;
  });
  sqflite_logger._SqfliteLoggerSqlEvent = sqflite_logger._SqfliteLoggerSqlEvent$();
  dart.addTypeTests(sqflite_logger._SqfliteLoggerSqlEvent, _is__SqfliteLoggerSqlEvent_default);
  const _SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandInsertMixin$36 = class _SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandInsertMixin extends sqflite_logger._SqfliteLoggerSqlEvent$(core.int) {};
  (_SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandInsertMixin$36.new = function() {
    _SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandInsertMixin$36.__proto__.new.call(this);
  }).prototype = _SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandInsertMixin$36.prototype;
  dart.applyMixin(_SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandInsertMixin$36, sqflite_logger._SqfliteLoggerSqlCommandInsertMixin);
  sqflite_logger._SqfliteLoggerSqlEventInsert = class _SqfliteLoggerSqlEventInsert extends _SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandInsertMixin$36 {
    static ['_#new#tearOff']() {
      return new sqflite_logger._SqfliteLoggerSqlEventInsert.new();
    }
  };
  (sqflite_logger._SqfliteLoggerSqlEventInsert.new = function() {
    sqflite_logger._SqfliteLoggerSqlEventInsert.__proto__.new.call(this);
    ;
  }).prototype = sqflite_logger._SqfliteLoggerSqlEventInsert.prototype;
  dart.addTypeTests(sqflite_logger._SqfliteLoggerSqlEventInsert);
  dart.addTypeCaches(sqflite_logger._SqfliteLoggerSqlEventInsert);
  sqflite_logger._SqfliteLoggerSqlEventInsert[dart.implements] = () => [sqflite_logger.SqfliteLoggerSqlCommandInsert];
  dart.setLibraryUri(sqflite_logger._SqfliteLoggerSqlEventInsert, I[20]);
  const _SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandExecuteMixin$36 = class _SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandExecuteMixin extends sqflite_logger._SqfliteLoggerSqlEvent$(dart.void) {};
  (_SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandExecuteMixin$36.new = function() {
    _SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandExecuteMixin$36.__proto__.new.call(this);
  }).prototype = _SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandExecuteMixin$36.prototype;
  dart.applyMixin(_SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandExecuteMixin$36, sqflite_logger._SqfliteLoggerSqlCommandExecuteMixin);
  sqflite_logger._SqfliteLoggerSqlEventExecute = class _SqfliteLoggerSqlEventExecute extends _SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandExecuteMixin$36 {
    static ['_#new#tearOff']() {
      return new sqflite_logger._SqfliteLoggerSqlEventExecute.new();
    }
  };
  (sqflite_logger._SqfliteLoggerSqlEventExecute.new = function() {
    sqflite_logger._SqfliteLoggerSqlEventExecute.__proto__.new.call(this);
    ;
  }).prototype = sqflite_logger._SqfliteLoggerSqlEventExecute.prototype;
  dart.addTypeTests(sqflite_logger._SqfliteLoggerSqlEventExecute);
  dart.addTypeCaches(sqflite_logger._SqfliteLoggerSqlEventExecute);
  sqflite_logger._SqfliteLoggerSqlEventExecute[dart.implements] = () => [sqflite_logger.SqfliteLoggerSqlCommandExecute];
  dart.setLibraryUri(sqflite_logger._SqfliteLoggerSqlEventExecute, I[20]);
  const _SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandUpdateMixin$36 = class _SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandUpdateMixin extends sqflite_logger._SqfliteLoggerSqlEvent$(core.int) {};
  (_SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandUpdateMixin$36.new = function() {
    _SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandUpdateMixin$36.__proto__.new.call(this);
  }).prototype = _SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandUpdateMixin$36.prototype;
  dart.applyMixin(_SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandUpdateMixin$36, sqflite_logger._SqfliteLoggerSqlCommandUpdateMixin);
  sqflite_logger._SqfliteLoggerSqlEventUpdate = class _SqfliteLoggerSqlEventUpdate extends _SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandUpdateMixin$36 {
    static ['_#new#tearOff']() {
      return new sqflite_logger._SqfliteLoggerSqlEventUpdate.new();
    }
  };
  (sqflite_logger._SqfliteLoggerSqlEventUpdate.new = function() {
    sqflite_logger._SqfliteLoggerSqlEventUpdate.__proto__.new.call(this);
    ;
  }).prototype = sqflite_logger._SqfliteLoggerSqlEventUpdate.prototype;
  dart.addTypeTests(sqflite_logger._SqfliteLoggerSqlEventUpdate);
  dart.addTypeCaches(sqflite_logger._SqfliteLoggerSqlEventUpdate);
  sqflite_logger._SqfliteLoggerSqlEventUpdate[dart.implements] = () => [sqflite_logger.SqfliteLoggerSqlCommandUpdate];
  dart.setLibraryUri(sqflite_logger._SqfliteLoggerSqlEventUpdate, I[20]);
  const _SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandDeleteMixin$36 = class _SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandDeleteMixin extends sqflite_logger._SqfliteLoggerSqlEvent$(core.int) {};
  (_SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandDeleteMixin$36.new = function() {
    _SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandDeleteMixin$36.__proto__.new.call(this);
  }).prototype = _SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandDeleteMixin$36.prototype;
  dart.applyMixin(_SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandDeleteMixin$36, sqflite_logger._SqfliteLoggerSqlCommandDeleteMixin);
  sqflite_logger._SqfliteLoggerSqlEventDelete = class _SqfliteLoggerSqlEventDelete extends _SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandDeleteMixin$36 {
    static ['_#new#tearOff']() {
      return new sqflite_logger._SqfliteLoggerSqlEventDelete.new();
    }
  };
  (sqflite_logger._SqfliteLoggerSqlEventDelete.new = function() {
    sqflite_logger._SqfliteLoggerSqlEventDelete.__proto__.new.call(this);
    ;
  }).prototype = sqflite_logger._SqfliteLoggerSqlEventDelete.prototype;
  dart.addTypeTests(sqflite_logger._SqfliteLoggerSqlEventDelete);
  dart.addTypeCaches(sqflite_logger._SqfliteLoggerSqlEventDelete);
  sqflite_logger._SqfliteLoggerSqlEventDelete[dart.implements] = () => [sqflite_logger.SqfliteLoggerSqlCommandDelete];
  dart.setLibraryUri(sqflite_logger._SqfliteLoggerSqlEventDelete, I[20]);
  const _SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandQueryMixin$36 = class _SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandQueryMixin extends sqflite_logger._SqfliteLoggerSqlEvent$(core.List$(core.Map$(core.String, dart.nullable(core.Object)))) {};
  (_SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandQueryMixin$36.new = function() {
    _SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandQueryMixin$36.__proto__.new.call(this);
  }).prototype = _SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandQueryMixin$36.prototype;
  dart.applyMixin(_SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandQueryMixin$36, sqflite_logger._SqfliteLoggerSqlCommandQueryMixin);
  sqflite_logger._SqfliteLoggerSqlEventQuery = class _SqfliteLoggerSqlEventQuery extends _SqfliteLoggerSqlEvent__SqfliteLoggerSqlCommandQueryMixin$36 {
    static ['_#new#tearOff']() {
      return new sqflite_logger._SqfliteLoggerSqlEventQuery.new();
    }
  };
  (sqflite_logger._SqfliteLoggerSqlEventQuery.new = function() {
    sqflite_logger._SqfliteLoggerSqlEventQuery.__proto__.new.call(this);
    ;
  }).prototype = sqflite_logger._SqfliteLoggerSqlEventQuery.prototype;
  dart.addTypeTests(sqflite_logger._SqfliteLoggerSqlEventQuery);
  dart.addTypeCaches(sqflite_logger._SqfliteLoggerSqlEventQuery);
  sqflite_logger._SqfliteLoggerSqlEventQuery[dart.implements] = () => [sqflite_logger.SqfliteLoggerSqlCommandQuery];
  dart.setLibraryUri(sqflite_logger._SqfliteLoggerSqlEventQuery, I[20]);
  sqflite_logger._SqfliteLoggerBatchEvent = class _SqfliteLoggerBatchEvent extends sqflite_logger._SqfliteLoggerDatabaseEvent {
    get name() {
      return "batch";
    }
    static ['_#new#tearOff'](sw, client, operations, error) {
      return new sqflite_logger._SqfliteLoggerBatchEvent.new(sw, client, operations, error);
    }
    toMap() {
      return (() => {
        let t60 = T$.LinkedHashMapOfString$ObjectN().of(this[_databasePrefixMap]);
        t60[$_set]("operations", this.operations[$map](T$.MapOfString$ObjectN(), dart.fn(e => sqflite_logger._SqfliteLoggerBatchOperation.as(e).toMap(), T$.SqfliteLoggerBatchOperationToMapOfString$ObjectN()))[$toList]());
        t60[$addAll](super.toMap());
        return t60;
      })();
    }
  };
  (sqflite_logger._SqfliteLoggerBatchEvent.new = function(sw, client, operations, error) {
    this.operations = operations;
    sqflite_logger._SqfliteLoggerBatchEvent.__proto__.new.call(this, sw, client, error);
    ;
  }).prototype = sqflite_logger._SqfliteLoggerBatchEvent.prototype;
  dart.addTypeTests(sqflite_logger._SqfliteLoggerBatchEvent);
  dart.addTypeCaches(sqflite_logger._SqfliteLoggerBatchEvent);
  sqflite_logger._SqfliteLoggerBatchEvent[dart.implements] = () => [sqflite_logger.SqfliteLoggerBatchEvent];
  dart.setGetterSignature(sqflite_logger._SqfliteLoggerBatchEvent, () => ({
    __proto__: dart.getGetters(sqflite_logger._SqfliteLoggerBatchEvent.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(sqflite_logger._SqfliteLoggerBatchEvent, I[20]);
  dart.setFieldSignature(sqflite_logger._SqfliteLoggerBatchEvent, () => ({
    __proto__: dart.getFields(sqflite_logger._SqfliteLoggerBatchEvent.__proto__),
    operations: dart.finalFieldType(core.List$(sqflite_logger.SqfliteLoggerBatchOperation))
  }));
  var ___SqfliteLoggerBatchOperation_error = dart.privateName(sqflite_logger, "_#_SqfliteLoggerBatchOperation#error");
  var ___SqfliteLoggerBatchOperation_error_isSet = dart.privateName(sqflite_logger, "_#_SqfliteLoggerBatchOperation#error#isSet");
  const _is__SqfliteLoggerBatchOperation_default = Symbol('_is__SqfliteLoggerBatchOperation_default');
  sqflite_logger._SqfliteLoggerBatchOperation$ = dart.generic(T => {
    const Object__SqfliteLoggerSqlCommandMixin$36 = class Object__SqfliteLoggerSqlCommandMixin extends core.Object {};
    (Object__SqfliteLoggerSqlCommandMixin$36.new = function() {
      sqflite_logger._SqfliteLoggerSqlCommandMixin$(T)[dart.mixinNew].call(this);
    }).prototype = Object__SqfliteLoggerSqlCommandMixin$36.prototype;
    dart.applyMixin(Object__SqfliteLoggerSqlCommandMixin$36, sqflite_logger._SqfliteLoggerSqlCommandMixin$(T));
    class _SqfliteLoggerBatchOperation extends Object__SqfliteLoggerSqlCommandMixin$36 {
      get error() {
        return this[___SqfliteLoggerBatchOperation_error_isSet] ? this[___SqfliteLoggerBatchOperation_error] : dart.throw(new _internal.LateError.fieldNI("error"));
      }
      set error(error$35param) {
        if (this[___SqfliteLoggerBatchOperation_error_isSet])
          dart.throw(new _internal.LateError.fieldAI("error"));
        else {
          this[___SqfliteLoggerBatchOperation_error_isSet] = true;
          this[___SqfliteLoggerBatchOperation_error] = error$35param;
        }
      }
      static fromDynamic(type, sql, $arguments, result, error) {
        let operation = null;
        switch (type) {
          case C[20] || CT.C20:
            {
              operation = new sqflite_logger._SqfliteLoggerBatchExecuteOperation.new();
              break;
            }
          case C[21] || CT.C21:
            {
              operation = new sqflite_logger._SqfliteLoggerBatchInsertOperation.new();
              break;
            }
          case C[22] || CT.C22:
            {
              operation = new sqflite_logger._SqfliteLoggerBatchUpdateOperation.new();
              break;
            }
          case C[23] || CT.C23:
            {
              operation = new sqflite_logger._SqfliteLoggerBatchDeleteOperation.new();
              break;
            }
          case C[24] || CT.C24:
            {
              operation = new sqflite_logger._SqfliteLoggerBatchQueryOperation.new();
              break;
            }
        }
        operation.type = type;
        operation.sql = sql;
        operation.arguments = $arguments;
        operation.result = result;
        operation.error = error;
        return operation;
      }
      toMap() {
        let map = (() => {
          let t61 = new (T$.IdentityMapOfString$ObjectN()).new();
          t61[$_set]("sql", this.sql);
          if (this.arguments != null) t61[$_set]("arguments", this.arguments);
          if (this.result != null) t61[$_set]("result", this.result);
          if (this.error != null) t61[$_set]("error", this.error);
          return t61;
        })();
        return map;
      }
      toString() {
        return this[_typeAsText] + "(" + sqflite_logger.logTruncate(this.toMap()[$toString]()) + ")";
      }
    }
    (_SqfliteLoggerBatchOperation.new = function() {
      this[___SqfliteLoggerBatchOperation_error] = null;
      this[___SqfliteLoggerBatchOperation_error_isSet] = false;
      _SqfliteLoggerBatchOperation.__proto__.new.call(this);
      ;
    }).prototype = _SqfliteLoggerBatchOperation.prototype;
    dart.addTypeTests(_SqfliteLoggerBatchOperation);
    _SqfliteLoggerBatchOperation.prototype[_is__SqfliteLoggerBatchOperation_default] = true;
    dart.addTypeCaches(_SqfliteLoggerBatchOperation);
    _SqfliteLoggerBatchOperation[dart.implements] = () => [sqflite_logger.SqfliteLoggerBatchOperation$(T)];
    dart.setMethodSignature(_SqfliteLoggerBatchOperation, () => ({
      __proto__: dart.getMethods(_SqfliteLoggerBatchOperation.__proto__),
      toMap: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [])
    }));
    dart.setStaticMethodSignature(_SqfliteLoggerBatchOperation, () => ['fromDynamic']);
    dart.setGetterSignature(_SqfliteLoggerBatchOperation, () => ({
      __proto__: dart.getGetters(_SqfliteLoggerBatchOperation.__proto__),
      error: dart.nullable(core.Object)
    }));
    dart.setSetterSignature(_SqfliteLoggerBatchOperation, () => ({
      __proto__: dart.getSetters(_SqfliteLoggerBatchOperation.__proto__),
      error: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(_SqfliteLoggerBatchOperation, I[20]);
    dart.setFieldSignature(_SqfliteLoggerBatchOperation, () => ({
      __proto__: dart.getFields(_SqfliteLoggerBatchOperation.__proto__),
      [___SqfliteLoggerBatchOperation_error]: dart.fieldType(dart.nullable(core.Object)),
      [___SqfliteLoggerBatchOperation_error_isSet]: dart.fieldType(core.bool)
    }));
    dart.defineExtensionMethods(_SqfliteLoggerBatchOperation, ['toString']);
    return _SqfliteLoggerBatchOperation;
  });
  sqflite_logger._SqfliteLoggerBatchOperation = sqflite_logger._SqfliteLoggerBatchOperation$();
  dart.addTypeTests(sqflite_logger._SqfliteLoggerBatchOperation, _is__SqfliteLoggerBatchOperation_default);
  const _SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandInsertMixin$36 = class _SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandInsertMixin extends sqflite_logger._SqfliteLoggerBatchOperation$(core.int) {};
  (_SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandInsertMixin$36.new = function() {
    _SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandInsertMixin$36.__proto__.new.call(this);
  }).prototype = _SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandInsertMixin$36.prototype;
  dart.applyMixin(_SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandInsertMixin$36, sqflite_logger._SqfliteLoggerSqlCommandInsertMixin);
  sqflite_logger._SqfliteLoggerBatchInsertOperation = class _SqfliteLoggerBatchInsertOperation extends _SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandInsertMixin$36 {
    static ['_#new#tearOff']() {
      return new sqflite_logger._SqfliteLoggerBatchInsertOperation.new();
    }
  };
  (sqflite_logger._SqfliteLoggerBatchInsertOperation.new = function() {
    sqflite_logger._SqfliteLoggerBatchInsertOperation.__proto__.new.call(this);
    ;
  }).prototype = sqflite_logger._SqfliteLoggerBatchInsertOperation.prototype;
  dart.addTypeTests(sqflite_logger._SqfliteLoggerBatchInsertOperation);
  dart.addTypeCaches(sqflite_logger._SqfliteLoggerBatchInsertOperation);
  sqflite_logger._SqfliteLoggerBatchInsertOperation[dart.implements] = () => [sqflite_logger.SqfliteLoggerSqlCommandInsert];
  dart.setLibraryUri(sqflite_logger._SqfliteLoggerBatchInsertOperation, I[20]);
  const _SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandUpdateMixin$36 = class _SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandUpdateMixin extends sqflite_logger._SqfliteLoggerBatchOperation$(core.int) {};
  (_SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandUpdateMixin$36.new = function() {
    _SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandUpdateMixin$36.__proto__.new.call(this);
  }).prototype = _SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandUpdateMixin$36.prototype;
  dart.applyMixin(_SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandUpdateMixin$36, sqflite_logger._SqfliteLoggerSqlCommandUpdateMixin);
  sqflite_logger._SqfliteLoggerBatchUpdateOperation = class _SqfliteLoggerBatchUpdateOperation extends _SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandUpdateMixin$36 {
    static ['_#new#tearOff']() {
      return new sqflite_logger._SqfliteLoggerBatchUpdateOperation.new();
    }
  };
  (sqflite_logger._SqfliteLoggerBatchUpdateOperation.new = function() {
    sqflite_logger._SqfliteLoggerBatchUpdateOperation.__proto__.new.call(this);
    ;
  }).prototype = sqflite_logger._SqfliteLoggerBatchUpdateOperation.prototype;
  dart.addTypeTests(sqflite_logger._SqfliteLoggerBatchUpdateOperation);
  dart.addTypeCaches(sqflite_logger._SqfliteLoggerBatchUpdateOperation);
  sqflite_logger._SqfliteLoggerBatchUpdateOperation[dart.implements] = () => [sqflite_logger.SqfliteLoggerSqlCommandUpdate];
  dart.setLibraryUri(sqflite_logger._SqfliteLoggerBatchUpdateOperation, I[20]);
  const _SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandDeleteMixin$36 = class _SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandDeleteMixin extends sqflite_logger._SqfliteLoggerBatchOperation$(core.int) {};
  (_SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandDeleteMixin$36.new = function() {
    _SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandDeleteMixin$36.__proto__.new.call(this);
  }).prototype = _SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandDeleteMixin$36.prototype;
  dart.applyMixin(_SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandDeleteMixin$36, sqflite_logger._SqfliteLoggerSqlCommandDeleteMixin);
  sqflite_logger._SqfliteLoggerBatchDeleteOperation = class _SqfliteLoggerBatchDeleteOperation extends _SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandDeleteMixin$36 {
    static ['_#new#tearOff']() {
      return new sqflite_logger._SqfliteLoggerBatchDeleteOperation.new();
    }
  };
  (sqflite_logger._SqfliteLoggerBatchDeleteOperation.new = function() {
    sqflite_logger._SqfliteLoggerBatchDeleteOperation.__proto__.new.call(this);
    ;
  }).prototype = sqflite_logger._SqfliteLoggerBatchDeleteOperation.prototype;
  dart.addTypeTests(sqflite_logger._SqfliteLoggerBatchDeleteOperation);
  dart.addTypeCaches(sqflite_logger._SqfliteLoggerBatchDeleteOperation);
  sqflite_logger._SqfliteLoggerBatchDeleteOperation[dart.implements] = () => [sqflite_logger.SqfliteLoggerSqlCommandDelete];
  dart.setLibraryUri(sqflite_logger._SqfliteLoggerBatchDeleteOperation, I[20]);
  const _SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandExecuteMixin$36 = class _SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandExecuteMixin extends sqflite_logger._SqfliteLoggerBatchOperation$(dart.void) {};
  (_SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandExecuteMixin$36.new = function() {
    _SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandExecuteMixin$36.__proto__.new.call(this);
  }).prototype = _SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandExecuteMixin$36.prototype;
  dart.applyMixin(_SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandExecuteMixin$36, sqflite_logger._SqfliteLoggerSqlCommandExecuteMixin);
  sqflite_logger._SqfliteLoggerBatchExecuteOperation = class _SqfliteLoggerBatchExecuteOperation extends _SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandExecuteMixin$36 {
    static ['_#new#tearOff']() {
      return new sqflite_logger._SqfliteLoggerBatchExecuteOperation.new();
    }
  };
  (sqflite_logger._SqfliteLoggerBatchExecuteOperation.new = function() {
    sqflite_logger._SqfliteLoggerBatchExecuteOperation.__proto__.new.call(this);
    ;
  }).prototype = sqflite_logger._SqfliteLoggerBatchExecuteOperation.prototype;
  dart.addTypeTests(sqflite_logger._SqfliteLoggerBatchExecuteOperation);
  dart.addTypeCaches(sqflite_logger._SqfliteLoggerBatchExecuteOperation);
  sqflite_logger._SqfliteLoggerBatchExecuteOperation[dart.implements] = () => [sqflite_logger.SqfliteLoggerSqlCommandExecute];
  dart.setLibraryUri(sqflite_logger._SqfliteLoggerBatchExecuteOperation, I[20]);
  const _SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandQueryMixin$36 = class _SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandQueryMixin extends sqflite_logger._SqfliteLoggerBatchOperation$(core.List$(core.Map$(core.String, dart.nullable(core.Object)))) {};
  (_SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandQueryMixin$36.new = function() {
    _SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandQueryMixin$36.__proto__.new.call(this);
  }).prototype = _SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandQueryMixin$36.prototype;
  dart.applyMixin(_SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandQueryMixin$36, sqflite_logger._SqfliteLoggerSqlCommandQueryMixin);
  sqflite_logger._SqfliteLoggerBatchQueryOperation = class _SqfliteLoggerBatchQueryOperation extends _SqfliteLoggerBatchOperation__SqfliteLoggerSqlCommandQueryMixin$36 {
    static ['_#new#tearOff']() {
      return new sqflite_logger._SqfliteLoggerBatchQueryOperation.new();
    }
  };
  (sqflite_logger._SqfliteLoggerBatchQueryOperation.new = function() {
    sqflite_logger._SqfliteLoggerBatchQueryOperation.__proto__.new.call(this);
    ;
  }).prototype = sqflite_logger._SqfliteLoggerBatchQueryOperation.prototype;
  dart.addTypeTests(sqflite_logger._SqfliteLoggerBatchQueryOperation);
  dart.addTypeCaches(sqflite_logger._SqfliteLoggerBatchQueryOperation);
  sqflite_logger._SqfliteLoggerBatchQueryOperation[dart.implements] = () => [sqflite_logger.SqfliteLoggerSqlCommandQuery];
  dart.setLibraryUri(sqflite_logger._SqfliteLoggerBatchQueryOperation, I[20]);
  sqflite_logger._SqfliteLoggerDatabaseDeleteEvent = class _SqfliteLoggerDatabaseDeleteEvent extends sqflite_logger._SqfliteLoggerEvent {
    toMap() {
      return new (T$.IdentityMapOfString$ObjectN()).from(["path", this.path]);
    }
    static ['_#new#tearOff'](sw, path, error) {
      return new sqflite_logger._SqfliteLoggerDatabaseDeleteEvent.new(sw, path, error);
    }
    get name() {
      return "deleteDatabase";
    }
  };
  (sqflite_logger._SqfliteLoggerDatabaseDeleteEvent.new = function(sw, path, error) {
    this.path = path;
    sqflite_logger._SqfliteLoggerDatabaseDeleteEvent.__proto__.new.call(this, sw, error);
    ;
  }).prototype = sqflite_logger._SqfliteLoggerDatabaseDeleteEvent.prototype;
  dart.addTypeTests(sqflite_logger._SqfliteLoggerDatabaseDeleteEvent);
  dart.addTypeCaches(sqflite_logger._SqfliteLoggerDatabaseDeleteEvent);
  sqflite_logger._SqfliteLoggerDatabaseDeleteEvent[dart.implements] = () => [sqflite_logger.SqfliteLoggerDatabaseDeleteEvent];
  dart.setGetterSignature(sqflite_logger._SqfliteLoggerDatabaseDeleteEvent, () => ({
    __proto__: dart.getGetters(sqflite_logger._SqfliteLoggerDatabaseDeleteEvent.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(sqflite_logger._SqfliteLoggerDatabaseDeleteEvent, I[20]);
  dart.setFieldSignature(sqflite_logger._SqfliteLoggerDatabaseDeleteEvent, () => ({
    __proto__: dart.getFields(sqflite_logger._SqfliteLoggerDatabaseDeleteEvent.__proto__),
    path: dart.finalFieldType(core.String)
  }));
  sqflite_logger._SqfliteLoggerDatabaseOpenEvent = class _SqfliteLoggerDatabaseOpenEvent extends sqflite_logger._SqfliteLoggerEvent {
    toMap() {
      let t63;
      return (() => {
        let t62 = new (T$.IdentityMapOfString$ObjectN()).new();
        t62[$_set]("path", this.path);
        if (this.options != null) t62[$_set]("options", sqflite_logger['OpenDatabaseOptionsLogger|toMap'](dart.nullCheck(this.options)));
        if ((t63 = this.db, t63 == null ? null : t63.id) != null) t62[$_set]("id", dart.nullCheck(this.db).id);
        t62[$addAll](super.toMap());
        return t62;
      })();
    }
    static ['_#new#tearOff'](sw, path, options, db, error) {
      return new sqflite_logger._SqfliteLoggerDatabaseOpenEvent.new(sw, path, options, db, error);
    }
    get name() {
      return "openDatabase";
    }
  };
  (sqflite_logger._SqfliteLoggerDatabaseOpenEvent.new = function(sw, path, options, db, error) {
    this.path = path;
    this.options = options;
    this.db = db;
    sqflite_logger._SqfliteLoggerDatabaseOpenEvent.__proto__.new.call(this, sw, error);
    ;
  }).prototype = sqflite_logger._SqfliteLoggerDatabaseOpenEvent.prototype;
  dart.addTypeTests(sqflite_logger._SqfliteLoggerDatabaseOpenEvent);
  dart.addTypeCaches(sqflite_logger._SqfliteLoggerDatabaseOpenEvent);
  sqflite_logger._SqfliteLoggerDatabaseOpenEvent[dart.implements] = () => [sqflite_logger.SqfliteLoggerDatabaseOpenEvent];
  dart.setGetterSignature(sqflite_logger._SqfliteLoggerDatabaseOpenEvent, () => ({
    __proto__: dart.getGetters(sqflite_logger._SqfliteLoggerDatabaseOpenEvent.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(sqflite_logger._SqfliteLoggerDatabaseOpenEvent, I[20]);
  dart.setFieldSignature(sqflite_logger._SqfliteLoggerDatabaseOpenEvent, () => ({
    __proto__: dart.getFields(sqflite_logger._SqfliteLoggerDatabaseOpenEvent.__proto__),
    db: dart.finalFieldType(dart.nullable(database$.SqfliteDatabase)),
    options: dart.finalFieldType(dart.nullable(sqlite_api$.OpenDatabaseOptions)),
    path: dart.finalFieldType(core.String)
  }));
  sqflite_logger._SqfliteLoggerDatabaseCloseEvent = class _SqfliteLoggerDatabaseCloseEvent extends sqflite_logger._SqfliteLoggerDatabaseEvent {
    toMap() {
      return (() => {
        let t63 = T$.LinkedHashMapOfString$ObjectN().of(this[_databasePrefixMap]);
        t63[$addAll](super.toMap());
        return t63;
      })();
    }
    static ['_#new#tearOff'](sw, db, error) {
      return new sqflite_logger._SqfliteLoggerDatabaseCloseEvent.new(sw, db, error);
    }
    get name() {
      return "closeDatabase";
    }
    get db() {
      return this.client.database;
    }
  };
  (sqflite_logger._SqfliteLoggerDatabaseCloseEvent.new = function(sw, db, error) {
    sqflite_logger._SqfliteLoggerDatabaseCloseEvent.__proto__.new.call(this, sw, db, error);
    ;
  }).prototype = sqflite_logger._SqfliteLoggerDatabaseCloseEvent.prototype;
  dart.addTypeTests(sqflite_logger._SqfliteLoggerDatabaseCloseEvent);
  dart.addTypeCaches(sqflite_logger._SqfliteLoggerDatabaseCloseEvent);
  sqflite_logger._SqfliteLoggerDatabaseCloseEvent[dart.implements] = () => [sqflite_logger.SqfliteLoggerDatabaseCloseEvent];
  dart.setGetterSignature(sqflite_logger._SqfliteLoggerDatabaseCloseEvent, () => ({
    __proto__: dart.getGetters(sqflite_logger._SqfliteLoggerDatabaseCloseEvent.__proto__),
    name: core.String,
    db: sqlite_api$.Database
  }));
  dart.setLibraryUri(sqflite_logger._SqfliteLoggerDatabaseCloseEvent, I[20]);
  sqflite_logger._SqfliteLoggerInvokeEvent = class _SqfliteLoggerInvokeEvent extends sqflite_logger._SqfliteLoggerEvent {
    toMap() {
      return (() => {
        let t64 = new (T$.IdentityMapOfString$ObjectN()).new();
        t64[$_set]("method", this.method);
        if (this.arguments != null) t64[$_set]("arguments", this.arguments);
        if (this.result != null) t64[$_set]("result", this.result);
        t64[$addAll](super.toMap());
        return t64;
      })();
    }
    static ['_#new#tearOff'](sw, method, $arguments, result, error) {
      return new sqflite_logger._SqfliteLoggerInvokeEvent.new(sw, method, $arguments, result, error);
    }
    get name() {
      return "invoke";
    }
  };
  (sqflite_logger._SqfliteLoggerInvokeEvent.new = function(sw, method, $arguments, result, error) {
    this.method = method;
    this.arguments = $arguments;
    this.result = result;
    sqflite_logger._SqfliteLoggerInvokeEvent.__proto__.new.call(this, sw, error);
    ;
  }).prototype = sqflite_logger._SqfliteLoggerInvokeEvent.prototype;
  dart.addTypeTests(sqflite_logger._SqfliteLoggerInvokeEvent);
  dart.addTypeCaches(sqflite_logger._SqfliteLoggerInvokeEvent);
  sqflite_logger._SqfliteLoggerInvokeEvent[dart.implements] = () => [sqflite_logger.SqfliteLoggerInvokeEvent];
  dart.setGetterSignature(sqflite_logger._SqfliteLoggerInvokeEvent, () => ({
    __proto__: dart.getGetters(sqflite_logger._SqfliteLoggerInvokeEvent.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(sqflite_logger._SqfliteLoggerInvokeEvent, I[20]);
  dart.setFieldSignature(sqflite_logger._SqfliteLoggerInvokeEvent, () => ({
    __proto__: dart.getFields(sqflite_logger._SqfliteLoggerInvokeEvent.__proto__),
    result: dart.finalFieldType(dart.nullable(core.Object)),
    arguments: dart.finalFieldType(dart.nullable(core.Object)),
    method: dart.finalFieldType(core.String)
  }));
  var result = dart.privateName(sqflite_logger, "_EventInfo.result");
  const _is__EventInfo_default = Symbol('_is__EventInfo_default');
  sqflite_logger._EventInfo$ = dart.generic(T => {
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    class _EventInfo extends core.Object {
      get result() {
        return this[result];
      }
      set result(value) {
        this[result] = __t$TN().as(value);
      }
      throwOrResult() {
        if (this.error != null) {
          if (env_utils.isDebug && this.stackTrace != null) {
            core.print(this.stackTrace);
          }
          dart.throw(dart.nullCheck(this.error));
        }
        return T.as(this.result);
      }
      static ['_#new#tearOff'](T) {
        return new (sqflite_logger._EventInfo$(T)).new();
      }
    }
    (_EventInfo.new = function() {
      let t65;
      this.error = null;
      this.stackTrace = null;
      this[result] = null;
      this.sw = (t65 = new core.Stopwatch.new(), (() => {
        t65.start();
        return t65;
      })());
      ;
    }).prototype = _EventInfo.prototype;
    dart.addTypeTests(_EventInfo);
    _EventInfo.prototype[_is__EventInfo_default] = true;
    dart.addTypeCaches(_EventInfo);
    dart.setMethodSignature(_EventInfo, () => ({
      __proto__: dart.getMethods(_EventInfo.__proto__),
      throwOrResult: dart.fnType(T, [])
    }));
    dart.setLibraryUri(_EventInfo, I[20]);
    dart.setFieldSignature(_EventInfo, () => ({
      __proto__: dart.getFields(_EventInfo.__proto__),
      error: dart.fieldType(dart.nullable(core.Object)),
      stackTrace: dart.fieldType(dart.nullable(core.StackTrace)),
      result: dart.fieldType(dart.nullable(T)),
      sw: dart.finalFieldType(core.Stopwatch)
    }));
    return _EventInfo;
  });
  sqflite_logger._EventInfo = sqflite_logger._EventInfo$();
  dart.addTypeTests(sqflite_logger._EventInfo, _is__EventInfo_default);
  var __SqfliteLoggerOptions_log = dart.privateName(sqflite_logger, "_#SqfliteLoggerOptions#log");
  var __SqfliteLoggerOptions_type = dart.privateName(sqflite_logger, "_#SqfliteLoggerOptions#type");
  sqflite_logger.SqfliteLoggerOptions = class SqfliteLoggerOptions extends core.Object {
    get log() {
      let t65;
      t65 = this[__SqfliteLoggerOptions_log];
      return t65 == null ? dart.throw(new _internal.LateError.fieldNI("log")) : t65;
    }
    set log(log$35param) {
      if (this[__SqfliteLoggerOptions_log] == null)
        this[__SqfliteLoggerOptions_log] = log$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("log"));
    }
    get type() {
      let t65;
      t65 = this[__SqfliteLoggerOptions_type];
      return t65 == null ? dart.throw(new _internal.LateError.fieldNI("type")) : t65;
    }
    set type(type$35param) {
      if (this[__SqfliteLoggerOptions_type] == null)
        this[__SqfliteLoggerOptions_type] = type$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("type"));
    }
    static ['_#new#tearOff'](opts) {
      let log = opts && 'log' in opts ? opts.log : null;
      let type = opts && 'type' in opts ? opts.type : null;
      return new sqflite_logger.SqfliteLoggerOptions.new({log: log, type: type});
    }
  };
  (sqflite_logger.SqfliteLoggerOptions.new = function(opts) {
    let t65, t65$;
    let log = opts && 'log' in opts ? opts.log : null;
    let type = opts && 'type' in opts ? opts.type : null;
    this[__SqfliteLoggerOptions_log] = null;
    this[__SqfliteLoggerOptions_type] = null;
    this.log = (t65 = log, t65 == null ? C[25] || CT.C25 : t65);
    this.type = (t65$ = type, t65$ == null ? sqflite_logger._typeDefault : t65$);
  }).prototype = sqflite_logger.SqfliteLoggerOptions.prototype;
  dart.addTypeTests(sqflite_logger.SqfliteLoggerOptions);
  dart.addTypeCaches(sqflite_logger.SqfliteLoggerOptions);
  dart.setGetterSignature(sqflite_logger.SqfliteLoggerOptions, () => ({
    __proto__: dart.getGetters(sqflite_logger.SqfliteLoggerOptions.__proto__),
    log: dart.fnType(dart.void, [sqflite_logger.SqfliteLoggerEvent]),
    type: sqflite_logger.SqfliteDatabaseFactoryLoggerType
  }));
  dart.setSetterSignature(sqflite_logger.SqfliteLoggerOptions, () => ({
    __proto__: dart.getSetters(sqflite_logger.SqfliteLoggerOptions.__proto__),
    log: dart.fnType(dart.void, [sqflite_logger.SqfliteLoggerEvent]),
    type: sqflite_logger.SqfliteDatabaseFactoryLoggerType
  }));
  dart.setLibraryUri(sqflite_logger.SqfliteLoggerOptions, I[20]);
  dart.setFieldSignature(sqflite_logger.SqfliteLoggerOptions, () => ({
    __proto__: dart.getFields(sqflite_logger.SqfliteLoggerOptions.__proto__),
    [__SqfliteLoggerOptions_log]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [sqflite_logger.SqfliteLoggerEvent]))),
    [__SqfliteLoggerOptions_type]: dart.fieldType(dart.nullable(sqflite_logger.SqfliteDatabaseFactoryLoggerType))
  }));
  var _delegate$ = dart.privateName(sqflite_logger, "_delegate");
  sqflite_logger.SqfliteDatabaseFactoryLogger = class SqfliteDatabaseFactoryLogger extends core.Object {
    static new(factory, opts) {
      let t65;
      let options = opts && 'options' in opts ? opts.options : null;
      let delegate = factory;
      if (sqflite_logger.SqfliteDatabaseFactoryLogger.is(factory)) {
        delegate = sqflite_logger._SqfliteDatabaseFactoryLogger.as(factory)[_delegate$];
      }
      return new sqflite_logger._SqfliteDatabaseFactoryLogger.new(factory$.SqfliteDatabaseFactory.as(delegate), (t65 = options, t65 == null ? new sqflite_logger.SqfliteLoggerOptions.new() : t65));
    }
    static ['_#new#tearOff'](factory, opts) {
      let options = opts && 'options' in opts ? opts.options : null;
      return sqflite_logger.SqfliteDatabaseFactoryLogger.new(factory, {options: options});
    }
  };
  (sqflite_logger.SqfliteDatabaseFactoryLogger[dart.mixinNew] = function() {
  }).prototype = sqflite_logger.SqfliteDatabaseFactoryLogger.prototype;
  dart.addTypeTests(sqflite_logger.SqfliteDatabaseFactoryLogger);
  dart.addTypeCaches(sqflite_logger.SqfliteDatabaseFactoryLogger);
  sqflite_logger.SqfliteDatabaseFactoryLogger[dart.implements] = () => [factory$.SqfliteDatabaseFactory];
  dart.setStaticMethodSignature(sqflite_logger.SqfliteDatabaseFactoryLogger, () => ['new']);
  dart.setLibraryUri(sqflite_logger.SqfliteDatabaseFactoryLogger, I[20]);
  var _executor = dart.privateName(sqflite_logger, "_executor");
  sqflite_logger._SqfliteDatabaseExecutorLoggerMixin = class _SqfliteDatabaseExecutorLoggerMixin extends core.Object {};
  sqflite_logger._SqfliteDatabaseExecutorLoggerMixin[dart.mixinOn] = Object => class _SqfliteDatabaseExecutorLoggerMixin extends Object {
    [_executor](txn) {
      let t65, t65$;
      t65$ = (t65 = txn, t65 == null ? this.txn : t65);
      return t65$ == null ? this : t65$;
    }
  };
  (sqflite_logger._SqfliteDatabaseExecutorLoggerMixin[dart.mixinNew] = function() {
  }).prototype = sqflite_logger._SqfliteDatabaseExecutorLoggerMixin.prototype;
  dart.addTypeTests(sqflite_logger._SqfliteDatabaseExecutorLoggerMixin);
  dart.addTypeCaches(sqflite_logger._SqfliteDatabaseExecutorLoggerMixin);
  sqflite_logger._SqfliteDatabaseExecutorLoggerMixin[dart.implements] = () => [database$.SqfliteDatabaseExecutor, core.Object];
  dart.setMethodSignature(sqflite_logger._SqfliteDatabaseExecutorLoggerMixin, () => ({
    __proto__: dart.getMethods(sqflite_logger._SqfliteDatabaseExecutorLoggerMixin.__proto__),
    [_executor]: dart.fnType(database$.SqfliteDatabaseExecutor, [dart.nullable(transaction.SqfliteTransaction)])
  }));
  dart.setLibraryUri(sqflite_logger._SqfliteDatabaseExecutorLoggerMixin, I[20]);
  var ___SqfliteDatabaseLogger__factory = dart.privateName(sqflite_logger, "_#_SqfliteDatabaseLogger#_factory");
  var _factory = dart.privateName(sqflite_logger, "_factory");
  var _options$ = dart.privateName(sqflite_logger, "_options");
  var _log = dart.privateName(sqflite_logger, "_log");
  var _needLogAll = dart.privateName(sqflite_logger, "_needLogAll");
  var _wrap = dart.privateName(sqflite_logger, "_wrap");
  var _txnWrapSql = dart.privateName(sqflite_logger, "_txnWrapSql");
  const openDatabase$ = Symbol("openDatabase");
  const close = Symbol("close");
  const txnApplyBatch = Symbol("txnApplyBatch");
  const txnRawQuery = Symbol("txnRawQuery");
  const txnRawDelete = Symbol("txnRawDelete");
  const txnRawUpdate = Symbol("txnRawUpdate");
  const txnRawInsert = Symbol("txnRawInsert");
  const SqfliteDatabaseBase__SqfliteDatabaseExecutorLoggerMixin$36 = class SqfliteDatabaseBase__SqfliteDatabaseExecutorLoggerMixin extends database_mixin.SqfliteDatabaseBase {};
  (SqfliteDatabaseBase__SqfliteDatabaseExecutorLoggerMixin$36.new = function(openHelper, path, opts) {
    SqfliteDatabaseBase__SqfliteDatabaseExecutorLoggerMixin$36.__proto__.new.call(this, openHelper, path, opts);
  }).prototype = SqfliteDatabaseBase__SqfliteDatabaseExecutorLoggerMixin$36.prototype;
  dart.applyMixin(SqfliteDatabaseBase__SqfliteDatabaseExecutorLoggerMixin$36, sqflite_logger._SqfliteDatabaseExecutorLoggerMixin);
  sqflite_logger._SqfliteDatabaseLogger = class _SqfliteDatabaseLogger extends SqfliteDatabaseBase__SqfliteDatabaseExecutorLoggerMixin$36 {
    get [_factory]() {
      let t65;
      t65 = this[___SqfliteDatabaseLogger__factory];
      return t65 == null ? dart.throw(new _internal.LateError.fieldNI("_factory")) : t65;
    }
    set [_factory](_factory$35param) {
      if (this[___SqfliteDatabaseLogger__factory] == null)
        this[___SqfliteDatabaseLogger__factory] = _factory$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_factory"));
    }
    get [_options$]() {
      return this[_factory][_options$];
    }
    get factory() {
      return this[_factory];
    }
    static ['_#new#tearOff'](openHelper, path, opts) {
      let options = opts && 'options' in opts ? opts.options : null;
      return new sqflite_logger._SqfliteDatabaseLogger.new(openHelper, path, {options: options});
    }
    [_log](event) {
      let t66, t65;
      t65 = this[_options$];
      t66 = event;
      return t65.log(t66);
    }
    get [_needLogAll]() {
      return this[_options$].type === sqflite_logger.SqfliteDatabaseFactoryLoggerType.all;
    }
    openDatabase() {
      return async.async(core.int, (function* openDatabase() {
        let t66, t65;
        const doOpenDatabase = () => {
          return async.async(core.int, (function* doOpenDatabase() {
            return yield this[openDatabase$]();
          }).bind(this));
        };
        dart.fn(doOpenDatabase, T$.VoidToFutureOfint());
        if (!this[_needLogAll]) {
          return yield doOpenDatabase();
        } else {
          let info = (yield this[_wrap](core.int, doOpenDatabase));
          t65 = this[_options$];
          t66 = new sqflite_logger._SqfliteLoggerDatabaseOpenEvent.new(info.sw, this.path, this.options, this, info.error);
          t65.log(t66);
          return info.throwOrResult();
        }
      }).bind(this));
    }
    close() {
      return async.async(dart.void, (function* close$() {
        const doClose = () => {
          return this[close]();
        };
        dart.fn(doClose, T$.VoidToFutureOfvoid());
        if (this[_needLogAll]) {
          let info = (yield this[_wrap](dart.void, doClose));
          this[_log](new sqflite_logger._SqfliteLoggerDatabaseCloseEvent.new(info.sw, this, info.error));
          info.throwOrResult();
        } else {
          yield doClose();
        }
      }).bind(this));
    }
    txnApplyBatch(txn, batch, opts) {
      let noResult = opts && 'noResult' in opts ? opts.noResult : null;
      let continueOnError = opts && 'continueOnError' in opts ? opts.continueOnError : null;
      return async.async(T$.ListOfObjectN(), (function* txnApplyBatch$() {
        let t66, t65;
        const doApplyBatch = () => {
          return this[txnApplyBatch](txn, batch, {noResult: noResult, continueOnError: continueOnError});
        };
        dart.fn(doApplyBatch, T$.VoidToFutureOfListOfObjectN());
        if (this[_needLogAll]) {
          let info = (yield this[_wrap](T$.ListOfObjectN(), doApplyBatch));
          let logOperations = T$.JSArrayOf_SqfliteLoggerBatchOperation().of([]);
          if (info.error == null) {
            let operations = batch.operations;
            for (let i = 0; i < operations[$length]; i = i + 1) {
              let operation = operations[$_get](i);
              let result = null;
              let error = null;
              if (noResult !== true) {
                let resultOrError = dart.nullCheck(info.result)[$_get](i);
                if (exception.DatabaseException.is(resultOrError)) {
                  error = resultOrError;
                } else {
                  result = resultOrError;
                }
              }
              logOperations[$add](sqflite_logger._SqfliteLoggerBatchOperation.fromDynamic(operation.type, operation.sql, operation.arguments, result, error));
            }
          }
          t65 = this[_options$];
          t66 = new sqflite_logger._SqfliteLoggerBatchEvent.new(info.sw, this[_executor](txn), logOperations, info.error);
          t65.log(t66);
          return info.throwOrResult();
        } else {
          return yield doApplyBatch();
        }
      }).bind(this));
    }
    txnRawQuery(txn, sql, $arguments) {
      return this[_txnWrapSql](T$.ListOfMapOfString$ObjectN(), txn, sql_command.SqliteSqlCommandType.query, sql, $arguments, dart.fn(() => async.async(T$.ListOfMapOfString$ObjectN(), (function*() {
        return this[txnRawQuery](txn, sql, $arguments);
      }).bind(this)), T$.VoidToFutureOfListOfMapOfString$ObjectN()));
    }
    txnRawDelete(txn, sql, $arguments) {
      return this[_txnWrapSql](core.int, txn, sql_command.SqliteSqlCommandType.delete, sql, $arguments, dart.fn(() => async.async(core.int, (function*() {
        return this[txnRawDelete](txn, sql, $arguments);
      }).bind(this)), T$.VoidToFutureOfint()));
    }
    txnRawUpdate(txn, sql, $arguments) {
      return this[_txnWrapSql](core.int, txn, sql_command.SqliteSqlCommandType.update, sql, $arguments, dart.fn(() => async.async(core.int, (function*() {
        return this[txnRawUpdate](txn, sql, $arguments);
      }).bind(this)), T$.VoidToFutureOfint()));
    }
    txnRawInsert(txn, sql, $arguments) {
      return this[_txnWrapSql](core.int, txn, sql_command.SqliteSqlCommandType.insert, sql, $arguments, dart.fn(() => async.async(core.int, (function*() {
        return this[txnRawInsert](txn, sql, $arguments);
      }).bind(this)), T$.VoidToFutureOfint()));
    }
    txnExecute(T, txn, sql, $arguments, opts) {
      let beginTransaction = opts && 'beginTransaction' in opts ? opts.beginTransaction : null;
      return this[_txnWrapSql](T, txn, sql_command.SqliteSqlCommandType.execute, sql, $arguments, dart.fn(() => super.txnExecute(T, txn, sql, $arguments, {beginTransaction: beginTransaction}), dart.fnType(async.Future$(T), [])));
    }
    [_txnWrapSql](T, txn, type, sql, $arguments, action) {
      return async.async(T, (function* _txnWrapSql() {
        let t66, t65;
        if (!this[_needLogAll]) {
          return yield action();
        } else {
          let info = (yield this[_wrap](T, action));
          t65 = this[_options$];
          t66 = sqflite_logger._SqfliteLoggerSqlEvent.fromDynamic(info.sw, this[_executor](txn), type, sql, $arguments, info.result, info.error);
          t65.log(t66);
          return info.throwOrResult();
        }
      }).bind(this));
    }
    [_wrap](T, action) {
      return this[_factory][_wrap](T, action);
    }
    [openDatabase$]() {
      return super.openDatabase();
    }
    [close]() {
      return super.close();
    }
    [txnApplyBatch](txn, batch, opts) {
      return super.txnApplyBatch(txn, batch, opts);
    }
    [txnRawQuery](txn, sql, $arguments) {
      return super.txnRawQuery(txn, sql, $arguments);
    }
    [txnRawDelete](txn, sql, $arguments) {
      return super.txnRawDelete(txn, sql, $arguments);
    }
    [txnRawUpdate](txn, sql, $arguments) {
      return super.txnRawUpdate(txn, sql, $arguments);
    }
    [txnRawInsert](txn, sql, $arguments) {
      return super.txnRawInsert(txn, sql, $arguments);
    }
  };
  (sqflite_logger._SqfliteDatabaseLogger.new = function(openHelper, path, opts) {
    let options = opts && 'options' in opts ? opts.options : null;
    this[___SqfliteDatabaseLogger__factory] = null;
    sqflite_logger._SqfliteDatabaseLogger.__proto__.new.call(this, openHelper, path, {options: options});
    this[_factory] = sqflite_logger._SqfliteDatabaseFactoryLogger.as(openHelper.factory);
  }).prototype = sqflite_logger._SqfliteDatabaseLogger.prototype;
  dart.addTypeTests(sqflite_logger._SqfliteDatabaseLogger);
  dart.addTypeCaches(sqflite_logger._SqfliteDatabaseLogger);
  sqflite_logger._SqfliteDatabaseLogger[dart.implements] = () => [database$.SqfliteDatabase];
  dart.setMethodSignature(sqflite_logger._SqfliteDatabaseLogger, () => ({
    __proto__: dart.getMethods(sqflite_logger._SqfliteDatabaseLogger.__proto__),
    [_log]: dart.fnType(dart.void, [sqflite_logger.SqfliteLoggerEvent]),
    txnExecute: dart.gFnType(T => [async.Future$(T), [dart.nullable(transaction.SqfliteTransaction), core.String, dart.nullable(core.List$(dart.nullable(core.Object)))], {beginTransaction: dart.nullable(core.bool)}, {}], T => [dart.nullable(core.Object)]),
    [_txnWrapSql]: dart.gFnType(T => [async.Future$(T), [dart.nullable(transaction.SqfliteTransaction), sql_command.SqliteSqlCommandType, core.String, dart.nullable(core.List$(dart.nullable(core.Object))), dart.fnType(async.Future$(T), [])]], T => [dart.nullable(core.Object)]),
    [_wrap]: dart.gFnType(T => [async.Future$(sqflite_logger._EventInfo$(T)), [dart.fnType(async.FutureOr$(T), [])]], T => [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(sqflite_logger._SqfliteDatabaseLogger, () => ({
    __proto__: dart.getGetters(sqflite_logger._SqfliteDatabaseLogger.__proto__),
    [_factory]: sqflite_logger._SqfliteDatabaseFactoryLogger,
    [_options$]: sqflite_logger.SqfliteLoggerOptions,
    factory: sqflite_logger._SqfliteDatabaseFactoryLogger,
    [_needLogAll]: core.bool
  }));
  dart.setSetterSignature(sqflite_logger._SqfliteDatabaseLogger, () => ({
    __proto__: dart.getSetters(sqflite_logger._SqfliteDatabaseLogger.__proto__),
    [_factory]: sqflite_logger._SqfliteDatabaseFactoryLogger
  }));
  dart.setLibraryUri(sqflite_logger._SqfliteDatabaseLogger, I[20]);
  dart.setFieldSignature(sqflite_logger._SqfliteDatabaseLogger, () => ({
    __proto__: dart.getFields(sqflite_logger._SqfliteDatabaseLogger.__proto__),
    [___SqfliteDatabaseLogger__factory]: dart.fieldType(dart.nullable(sqflite_logger._SqfliteDatabaseFactoryLogger))
  }));
  const deleteDatabase$ = Symbol("deleteDatabase");
  const Object_SqfliteDatabaseFactoryMixin$36$1 = class Object_SqfliteDatabaseFactoryMixin extends core.Object {};
  (Object_SqfliteDatabaseFactoryMixin$36$1.new = function() {
    factory_mixin.SqfliteDatabaseFactoryMixin[dart.mixinNew].call(this);
  }).prototype = Object_SqfliteDatabaseFactoryMixin$36$1.prototype;
  dart.applyMixin(Object_SqfliteDatabaseFactoryMixin$36$1, factory_mixin.SqfliteDatabaseFactoryMixin);
  sqflite_logger._SqfliteDatabaseFactoryLogger = class _SqfliteDatabaseFactoryLogger extends Object_SqfliteDatabaseFactoryMixin$36$1 {
    static ['_#new#tearOff'](_delegate, _options) {
      return new sqflite_logger._SqfliteDatabaseFactoryLogger.new(_delegate, _options);
    }
    wrapDatabaseException(T, action) {
      return this[_delegate$].wrapDatabaseException(T, action);
    }
    newDatabase(openHelper, path) {
      return new sqflite_logger._SqfliteDatabaseLogger.new(openHelper, path);
    }
    [_wrap](T, action) {
      return async.async(sqflite_logger._EventInfo$(T), function* _wrap() {
        let info = new (sqflite_logger._EventInfo$(T)).new();
        try {
          let result = (yield action());
          info.result = result;
        } catch (e) {
          let error = dart.getThrown(e);
          let stackTrace = dart.stackTrace(e);
          if (core.Object.is(error)) {
            info.error = error;
            if (env_utils.isDebug) {
              info.stackTrace = stackTrace;
            }
          } else
            throw e;
        } finally {
          info.sw.stop();
        }
        return info;
      });
    }
    invokeMethod(T, method, $arguments = null) {
      return async.async(T, (function* invokeMethod() {
        let t67, t66;
        const doInvokeMethod = () => {
          return this[_delegate$].invokeMethod(T, method, $arguments);
        };
        dart.fn(doInvokeMethod, dart.fnType(async.Future$(T), []));
        if (this[_options$].type === sqflite_logger.SqfliteDatabaseFactoryLoggerType.invoke) {
          let info = (yield this[_wrap](T, doInvokeMethod));
          t66 = this[_options$];
          t67 = new sqflite_logger._SqfliteLoggerInvokeEvent.new(info.sw, method, $arguments, info.result, info.error);
          t66.log(t67);
          return info.throwOrResult();
        } else {
          return yield doInvokeMethod();
        }
      }).bind(this));
    }
    deleteDatabase(path) {
      return async.async(dart.void, (function* deleteDatabase() {
        let t67, t66;
        const doDeleteDatabase = () => {
          return this[deleteDatabase$](path);
        };
        dart.fn(doDeleteDatabase, T$.VoidToFutureOfvoid());
        if (this[_options$].type === sqflite_logger.SqfliteDatabaseFactoryLoggerType.all) {
          let info = (yield this[_wrap](dart.void, doDeleteDatabase));
          t66 = this[_options$];
          t67 = new sqflite_logger._SqfliteLoggerDatabaseDeleteEvent.new(info.sw, path, info.error);
          t66.log(t67);
          return info.throwOrResult();
        } else {
          return yield doDeleteDatabase();
        }
      }).bind(this));
    }
    [deleteDatabase$](path) {
      return super.deleteDatabase(path);
    }
  };
  (sqflite_logger._SqfliteDatabaseFactoryLogger.new = function(_delegate, _options) {
    this[_delegate$] = _delegate;
    this[_options$] = _options;
    sqflite_logger._SqfliteDatabaseFactoryLogger.__proto__.new.call(this);
    ;
  }).prototype = sqflite_logger._SqfliteDatabaseFactoryLogger.prototype;
  dart.addTypeTests(sqflite_logger._SqfliteDatabaseFactoryLogger);
  dart.addTypeCaches(sqflite_logger._SqfliteDatabaseFactoryLogger);
  sqflite_logger._SqfliteDatabaseFactoryLogger[dart.implements] = () => [sqflite_logger.SqfliteDatabaseFactoryLogger];
  dart.setMethodSignature(sqflite_logger._SqfliteDatabaseFactoryLogger, () => ({
    __proto__: dart.getMethods(sqflite_logger._SqfliteDatabaseFactoryLogger.__proto__),
    wrapDatabaseException: dart.gFnType(T => [async.Future$(T), [dart.fnType(async.Future$(T), [])]], T => [dart.nullable(core.Object)]),
    newDatabase: dart.fnType(database_mixin.SqfliteDatabaseMixin, [database$.SqfliteDatabaseOpenHelper, core.String]),
    [_wrap]: dart.gFnType(T => [async.Future$(sqflite_logger._EventInfo$(T)), [dart.fnType(async.FutureOr$(T), [])]], T => [dart.nullable(core.Object)]),
    invokeMethod: dart.gFnType(T => [async.Future$(T), [core.String], [dart.nullable(core.Object)]], T => [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(sqflite_logger._SqfliteDatabaseFactoryLogger, I[20]);
  dart.setFieldSignature(sqflite_logger._SqfliteDatabaseFactoryLogger, () => ({
    __proto__: dart.getFields(sqflite_logger._SqfliteDatabaseFactoryLogger.__proto__),
    [_delegate$]: dart.finalFieldType(factory$.SqfliteDatabaseFactory),
    [_options$]: dart.finalFieldType(sqflite_logger.SqfliteLoggerOptions)
  }));
  sqflite_logger.logTruncateAny = function logTruncateAny(value) {
    let t66, t66$;
    return sqflite_logger.logTruncate((t66$ = (t66 = value, t66 == null ? null : dart.toString(t66)), t66$ == null ? "<null>" : t66$));
  };
  sqflite_logger.logTruncate = function logTruncate(text, opts) {
    let len = opts && 'len' in opts ? opts.len : 256;
    if (text.length > len) {
      text = text[$substring](0, len);
    }
    return text;
  };
  sqflite_logger._logDefault = function _logDefault(event) {
    sqflite_logger['SqfliteLoggerEventExt|dump'](event);
  };
  sqflite_logger['OpenDatabaseOptionsLogger|toMap'] = function OpenDatabaseOptionsLogger$124toMap($this) {
    return (() => {
      let t67 = new (T$.IdentityMapOfString$ObjectN()).new();
      t67[$_set]("readOnly", $this.readOnly);
      t67[$_set]("singleInstance", $this.singleInstance);
      if ($this.version != null) t67[$_set]("version", $this.version);
      return t67;
    })();
  };
  sqflite_logger['OpenDatabaseOptionsLogger|get#toMap'] = function OpenDatabaseOptionsLogger$124get$35toMap($this) {
    return dart.fn(() => sqflite_logger['OpenDatabaseOptionsLogger|toMap']($this), T$.VoidToMapOfString$ObjectN());
  };
  sqflite_logger['SqfliteLoggerEventExt|dump'] = function SqfliteLoggerEventExt$124dump($this, opts) {
    let t70, t70$;
    let print = opts && 'print' in opts ? opts.print : null;
    let noStopwatch = opts && 'noStopwatch' in opts ? opts.noStopwatch : null;
    print == null ? print = C[26] || CT.C26 : null;
    if (sqflite_logger.SqfliteLoggerBatchEvent.is($this)) {
      if (dart.test((t70 = noStopwatch, t70 == null ? false : t70))) {
        print(sqflite_logger['SqfliteLoggerEventInternalExt|toLogString']($this, sqflite_logger['SqfliteLoggerEventInternalExt|toMapNoOperationsNoStopwatch']($this)));
      } else {
        print(sqflite_logger['SqfliteLoggerEventInternalExt|toLogString']($this, sqflite_logger['SqfliteLoggerEventInternalExt|toMapNoOperations']($this)));
      }
      for (let operation of sqflite_logger.SqfliteLoggerBatchEvent.as($this).operations) {
        print("  " + dart.str(operation));
      }
    } else {
      if (dart.test((t70$ = noStopwatch, t70$ == null ? false : t70$))) {
        print(sqflite_logger['SqfliteLoggerEventInternalExt|toStringNoStopwatch']($this));
      } else {
        print($this[$toString]());
      }
    }
  };
  sqflite_logger['SqfliteLoggerEventExt|get#dump'] = function SqfliteLoggerEventExt$124get$35dump($this) {
    return dart.fn(opts => {
      let print = opts && 'print' in opts ? opts.print : null;
      let noStopwatch = opts && 'noStopwatch' in opts ? opts.noStopwatch : null;
      return sqflite_logger['SqfliteLoggerEventExt|dump']($this, {print: print, noStopwatch: noStopwatch});
    }, T$.__Tovoid());
  };
  sqflite_logger['SqfliteLoggerEventInternalExt|toMapNoStopwatch'] = function SqfliteLoggerEventInternalExt$124toMapNoStopwatch($this) {
    let t72;
    t72 = T$.LinkedHashMapOfString$ObjectN().from(sqflite_logger.SqfliteLoggerEventView.as($this).toMap());
    return (() => {
      t72[$remove]("sw");
      return t72;
    })();
  };
  sqflite_logger['SqfliteLoggerEventInternalExt|get#toMapNoStopwatch'] = function SqfliteLoggerEventInternalExt$124get$35toMapNoStopwatch($this) {
    return dart.fn(() => sqflite_logger['SqfliteLoggerEventInternalExt|toMapNoStopwatch']($this), T$.VoidToMapOfString$ObjectN());
  };
  sqflite_logger['SqfliteLoggerEventInternalExt|toMapNoOperations'] = function SqfliteLoggerEventInternalExt$124toMapNoOperations($this) {
    let t74;
    t74 = T$.LinkedHashMapOfString$ObjectN().from(sqflite_logger.SqfliteLoggerEventView.as($this).toMap());
    return (() => {
      t74[$remove]("operations");
      return t74;
    })();
  };
  sqflite_logger['SqfliteLoggerEventInternalExt|get#toMapNoOperations'] = function SqfliteLoggerEventInternalExt$124get$35toMapNoOperations($this) {
    return dart.fn(() => sqflite_logger['SqfliteLoggerEventInternalExt|toMapNoOperations']($this), T$.VoidToMapOfString$ObjectN());
  };
  sqflite_logger['SqfliteLoggerEventInternalExt|toMapNoOperationsNoStopwatch'] = function SqfliteLoggerEventInternalExt$124toMapNoOperationsNoStopwatch($this) {
    let t76;
    t76 = sqflite_logger['SqfliteLoggerEventInternalExt|toMapNoStopwatch']($this);
    return (() => {
      t76[$remove]("operations");
      return t76;
    })();
  };
  sqflite_logger['SqfliteLoggerEventInternalExt|get#toMapNoOperationsNoStopwatch'] = function SqfliteLoggerEventInternalExt$124get$35toMapNoOperationsNoStopwatch($this) {
    return dart.fn(() => sqflite_logger['SqfliteLoggerEventInternalExt|toMapNoOperationsNoStopwatch']($this), T$.VoidToMapOfString$ObjectN());
  };
  sqflite_logger['SqfliteLoggerEventInternalExt|toLogString'] = function SqfliteLoggerEventInternalExt$124toLogString($this, data) {
    return sqflite_logger.logTruncate($this.name + ":(" + dart.str(data) + ")");
  };
  sqflite_logger['SqfliteLoggerEventInternalExt|get#toLogString'] = function SqfliteLoggerEventInternalExt$124get$35toLogString($this) {
    return dart.fn(data => sqflite_logger['SqfliteLoggerEventInternalExt|toLogString']($this, data), T$.ObjectNToString());
  };
  sqflite_logger['SqfliteLoggerEventInternalExt|toStringNoStopwatch'] = function SqfliteLoggerEventInternalExt$124toStringNoStopwatch($this) {
    return sqflite_logger['SqfliteLoggerEventInternalExt|toLogString']($this, sqflite_logger['SqfliteLoggerEventInternalExt|toMapNoStopwatch']($this));
  };
  sqflite_logger['SqfliteLoggerEventInternalExt|get#toStringNoStopwatch'] = function SqfliteLoggerEventInternalExt$124get$35toStringNoStopwatch($this) {
    return dart.fn(() => sqflite_logger['SqfliteLoggerEventInternalExt|toStringNoStopwatch']($this), T$.VoidToString());
  };
  sqflite_logger['DatabaseFactoryLoggerDebugExt|debugQuickLoggerWrapper'] = function DatabaseFactoryLoggerDebugExt$124debugQuickLoggerWrapper($this) {
    let factoryWithLogs = sqflite_logger.SqfliteDatabaseFactoryLogger.new($this, {options: new sqflite_logger.SqfliteLoggerOptions.new({type: sqflite_logger.SqfliteDatabaseFactoryLoggerType.all})});
    return factoryWithLogs;
  };
  sqflite_logger['DatabaseFactoryLoggerDebugExt|get#debugQuickLoggerWrapper'] = function DatabaseFactoryLoggerDebugExt$124get$35debugQuickLoggerWrapper($this) {
    return dart.fn(() => sqflite_logger['DatabaseFactoryLoggerDebugExt|debugQuickLoggerWrapper']($this), T$.VoidToDatabaseFactory());
  };
  dart.defineLazy(sqflite_logger, {
    /*sqflite_logger._typeDefault*/get _typeDefault() {
      return sqflite_logger.SqfliteDatabaseFactoryLoggerType.all;
    },
    set _typeDefault(value) {}
  }, false);
  var method$0 = dart.privateName(method_call, "FfiMethodCall.method");
  var $arguments$0 = dart.privateName(method_call, "FfiMethodCall.arguments");
  method_call.FfiMethodCall = class FfiMethodCall extends core.Object {
    get method() {
      return this[method$0];
    }
    set method(value) {
      super.method = value;
    }
    get arguments() {
      return this[$arguments$0];
    }
    set arguments(value) {
      super.arguments = value;
    }
    static ['_#new#tearOff'](method, $arguments = null) {
      return new method_call.FfiMethodCall.new(method, $arguments);
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + this.method + ", " + dart.str(this.arguments) + ")";
    }
    toDataMap() {
      let map = new (T$.IdentityMapOfString$ObjectN()).from(["method", this.method, "arguments", this.arguments]);
      return map;
    }
    static fromDataMap(map) {
      let method = map[$_get]("method");
      let $arguments = map[$_get]("arguments");
      if (method != null) {
        return new method_call.FfiMethodCall.new(core.String.as(method), $arguments);
      }
      return null;
    }
  };
  (method_call.FfiMethodCall.new = function(method, $arguments = null) {
    this[method$0] = method;
    this[$arguments$0] = $arguments;
    ;
  }).prototype = method_call.FfiMethodCall.prototype;
  dart.addTypeTests(method_call.FfiMethodCall);
  dart.addTypeCaches(method_call.FfiMethodCall);
  dart.setMethodSignature(method_call.FfiMethodCall, () => ({
    __proto__: dart.getMethods(method_call.FfiMethodCall.__proto__),
    toDataMap: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [])
  }));
  dart.setStaticMethodSignature(method_call.FfiMethodCall, () => ['fromDataMap']);
  dart.setLibraryUri(method_call.FfiMethodCall, I[21]);
  dart.setFieldSignature(method_call.FfiMethodCall, () => ({
    __proto__: dart.getFields(method_call.FfiMethodCall.__proto__),
    method: dart.finalFieldType(core.String),
    arguments: dart.finalFieldType(dart.nullable(core.Object))
  }));
  dart.defineExtensionMethods(method_call.FfiMethodCall, ['toString']);
  var __FfiMethodResponse_result = dart.privateName(method_call, "_#FfiMethodResponse#result");
  var __FfiMethodResponse_result_isSet = dart.privateName(method_call, "_#FfiMethodResponse#result#isSet");
  var __FfiMethodResponse_error = dart.privateName(method_call, "_#FfiMethodResponse#error");
  var __FfiMethodResponse_error_isSet = dart.privateName(method_call, "_#FfiMethodResponse#error#isSet");
  method_call.FfiMethodResponse = class FfiMethodResponse extends core.Object {
    get result() {
      return this[__FfiMethodResponse_result_isSet] ? this[__FfiMethodResponse_result] : dart.throw(new _internal.LateError.fieldNI("result"));
    }
    set result(result$35param) {
      if (this[__FfiMethodResponse_result_isSet])
        dart.throw(new _internal.LateError.fieldAI("result"));
      else {
        this[__FfiMethodResponse_result_isSet] = true;
        this[__FfiMethodResponse_result] = result$35param;
      }
    }
    get error() {
      return this[__FfiMethodResponse_error_isSet] ? this[__FfiMethodResponse_error] : dart.throw(new _internal.LateError.fieldNI("error"));
    }
    set error(error$35param) {
      if (this[__FfiMethodResponse_error_isSet])
        dart.throw(new _internal.LateError.fieldAI("error"));
      else {
        this[__FfiMethodResponse_error_isSet] = true;
        this[__FfiMethodResponse_error] = error$35param;
      }
    }
    static ['_#new#tearOff'](opts) {
      let result = opts && 'result' in opts ? opts.result : null;
      let error = opts && 'error' in opts ? opts.error : null;
      return new method_call.FfiMethodResponse.new({result: result, error: error});
    }
    static ['_#fromException#tearOff'](e, st = null) {
      return new method_call.FfiMethodResponse.fromException(e, st);
    }
    toDataMap() {
      let map = (() => {
        let t83 = new (T$.IdentityMapOfString$ObjectN()).new();
        if (this.result != null)
          t83[$_set]("result", this.result);
        else if (this.error != null) t83[$_set]("error", this.error);
        return t83;
      })();
      return map;
    }
    static fromDataMap(map) {
      let result = map[$_get]("result");
      let error = map[$_get]("error");
      return new method_call.FfiMethodResponse.new({result: result, error: error});
    }
    toException() {
      let t84, t84$, t84$0, t84$1;
      let errorMap = this.error;
      if (core.Map.is(errorMap)) {
        return new sqflite_ffi_exception.SqfliteFfiException.new({code: (t84 = T$.StringN().as(errorMap[$_get]("code")), t84 == null ? "error" : t84), message: core.String.as(errorMap[$_get]("message")), details: (t84$ = T$.MapN().as(errorMap[$_get]("details")), t84$ == null ? null : t84$[$cast](core.String, T$.ObjectN())), resultCode: T$.intN().as(errorMap[$_get]("resultCode"))});
      } else {
        return new sqflite_ffi_exception.SqfliteFfiException.new({code: "error", message: (t84$1 = (t84$0 = this.error, t84$0 == null ? null : dart.toString(t84$0)), t84$1 == null ? "no info" : t84$1)});
      }
    }
  };
  (method_call.FfiMethodResponse.new = function(opts) {
    let result = opts && 'result' in opts ? opts.result : null;
    let error = opts && 'error' in opts ? opts.error : null;
    this[__FfiMethodResponse_result] = null;
    this[__FfiMethodResponse_result_isSet] = false;
    this[__FfiMethodResponse_error] = null;
    this[__FfiMethodResponse_error_isSet] = false;
    this[__FfiMethodResponse_result_isSet] = true;
    this[__FfiMethodResponse_result] = result;
    this[__FfiMethodResponse_error_isSet] = true;
    this[__FfiMethodResponse_error] = error;
    ;
  }).prototype = method_call.FfiMethodResponse.prototype;
  (method_call.FfiMethodResponse.fromException = function(e, st = null) {
    this[__FfiMethodResponse_result] = null;
    this[__FfiMethodResponse_result_isSet] = false;
    this[__FfiMethodResponse_error] = null;
    this[__FfiMethodResponse_error_isSet] = false;
    let error = new (T$.IdentityMapOfString$ObjectN()).new();
    if (sqflite_ffi_exception.SqfliteFfiException.is(e)) {
      error[$_set]("code", e.code);
      error[$_set]("details", e.details);
      error[$_set]("message", e.message);
      error[$_set]("resultCode", e.getResultCode());
    } else {
      error[$_set]("message", dart.toString(e));
    }
    if (env_utils$.isDebug && st != null) {
      error[$_set]("stackTrace", dart.toString(st));
    }
    this.error = error;
    this.result = null;
  }).prototype = method_call.FfiMethodResponse.prototype;
  dart.addTypeTests(method_call.FfiMethodResponse);
  dart.addTypeCaches(method_call.FfiMethodResponse);
  dart.setMethodSignature(method_call.FfiMethodResponse, () => ({
    __proto__: dart.getMethods(method_call.FfiMethodResponse.__proto__),
    toDataMap: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), []),
    toException: dart.fnType(sqflite_ffi_exception.SqfliteFfiException, [])
  }));
  dart.setStaticMethodSignature(method_call.FfiMethodResponse, () => ['fromDataMap']);
  dart.setGetterSignature(method_call.FfiMethodResponse, () => ({
    __proto__: dart.getGetters(method_call.FfiMethodResponse.__proto__),
    result: dart.nullable(core.Object),
    error: dart.nullable(core.Object)
  }));
  dart.setSetterSignature(method_call.FfiMethodResponse, () => ({
    __proto__: dart.getSetters(method_call.FfiMethodResponse.__proto__),
    result: dart.nullable(core.Object),
    error: dart.nullable(core.Object)
  }));
  dart.setLibraryUri(method_call.FfiMethodResponse, I[21]);
  dart.setFieldSignature(method_call.FfiMethodResponse, () => ({
    __proto__: dart.getFields(method_call.FfiMethodResponse.__proto__),
    [__FfiMethodResponse_result]: dart.fieldType(dart.nullable(core.Object)),
    [__FfiMethodResponse_result_isSet]: dart.fieldType(core.bool),
    [__FfiMethodResponse_error]: dart.fieldType(dart.nullable(core.Object)),
    [__FfiMethodResponse_error_isSet]: dart.fieldType(core.bool)
  }));
  method_call.responseToResultOrThrow = function responseToResultOrThrow(response) {
    if (core.Map.is(response)) {
      let ffiResponse = method_call.FfiMethodResponse.fromDataMap(response);
      if (ffiResponse != null) {
        if (ffiResponse.error != null) {
          dart.throw(ffiResponse.toException());
        }
        return ffiResponse.result;
      }
    }
    return response;
  };
  var last = dart.privateName(basic_lock, "BasicLock.last");
  basic_lock.BasicLock = class BasicLock extends core.Object {
    get last() {
      return this[last];
    }
    set last(value) {
      this[last] = value;
    }
    get locked() {
      return this.last != null;
    }
    synchronized(T, func, opts) {
      let timeout = opts && 'timeout' in opts ? opts.timeout : null;
      return async.async(T, (function* synchronized() {
        let prev = this.last;
        let completer = T$.CompleterOfvoid().sync();
        this.last = completer.future;
        try {
          if (prev != null) {
            if (timeout != null) {
              yield prev.timeout(timeout);
            } else {
              yield prev;
            }
          }
          let result = func();
          if (async.Future.is(result)) {
            return yield result;
          } else {
            return result;
          }
        } finally {
          const complete = () => {
            if (this.last === completer.future) {
              this.last = null;
            }
            completer.complete();
          };
          dart.fn(complete, T$.VoidTovoid());
          if (prev != null && timeout != null) {
            prev.then(core.Null, dart.fn(_ => {
              complete();
            }, T$.dynamicToNull()));
          } else {
            complete();
          }
        }
      }).bind(this));
    }
    toString() {
      return "Lock[" + dart.str(core.identityHashCode(this)) + "]";
    }
    get inLock() {
      return this.locked;
    }
    static ['_#new#tearOff']() {
      return new basic_lock.BasicLock.new();
    }
  };
  (basic_lock.BasicLock.new = function() {
    this[last] = null;
    ;
  }).prototype = basic_lock.BasicLock.prototype;
  dart.addTypeTests(basic_lock.BasicLock);
  dart.addTypeCaches(basic_lock.BasicLock);
  basic_lock.BasicLock[dart.implements] = () => [synchronized.Lock];
  dart.setMethodSignature(basic_lock.BasicLock, () => ({
    __proto__: dart.getMethods(basic_lock.BasicLock.__proto__),
    synchronized: dart.gFnType(T => [async.Future$(T), [dart.fnType(async.FutureOr$(T), [])], {timeout: dart.nullable(core.Duration)}, {}], T => [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(basic_lock.BasicLock, () => ({
    __proto__: dart.getGetters(basic_lock.BasicLock.__proto__),
    locked: core.bool,
    inLock: core.bool
  }));
  dart.setLibraryUri(basic_lock.BasicLock, I[22]);
  dart.setFieldSignature(basic_lock.BasicLock, () => ({
    __proto__: dart.getFields(basic_lock.BasicLock.__proto__),
    last: dart.fieldType(dart.nullable(async.Future))
  }));
  dart.defineExtensionMethods(basic_lock.BasicLock, ['toString']);
  var innerLocks = dart.privateName(reentrant_lock, "ReentrantLock.innerLocks");
  reentrant_lock.ReentrantLock = class ReentrantLock extends core.Object {
    get innerLocks() {
      return this[innerLocks];
    }
    set innerLocks(value) {
      super.innerLocks = value;
    }
    get innerLevel() {
      let t84;
      t84 = T$.intN().as(async.Zone.current._get(this));
      return t84 == null ? 0 : t84;
    }
    synchronized(T, func, opts) {
      let timeout = opts && 'timeout' in opts ? opts.timeout : null;
      return async.async(T, (function* synchronized() {
        let level = this.innerLevel;
        if (level >= this.innerLocks[$length]) {
          dart.throw(new core.StateError.new("This can happen if an inner synchronized block is spawned outside the block it was started from. Make sure the inner synchronized blocks are properly awaited"));
        }
        let lock = this.innerLocks[$_get](level);
        return lock.synchronized(T, dart.fn(() => async.async(T, (function*() {
          this.innerLocks[$add](new basic_lock.BasicLock.new());
          try {
            let result = async.runZoned(async.FutureOr$(T), dart.fn(() => func(), dart.fnType(async.FutureOr$(T), [])), {zoneValues: new (T$.LinkedMapOfObjectN$ObjectN()).from([this, level + 1])});
            if (async.Future.is(result)) {
              return yield result;
            } else {
              return result;
            }
          } finally {
            this.innerLocks[$removeLast]();
          }
        }).bind(this)), dart.fnType(async.Future$(T), [])), {timeout: timeout});
      }).bind(this));
    }
    toString() {
      return "ReentrantLock[" + dart.str(core.identityHashCode(this)) + "]";
    }
    get inZone() {
      return this.innerLevel > 0;
    }
    get inLock() {
      return this.inZone;
    }
    get locked() {
      return this.innerLocks[$length] > 1;
    }
    static ['_#new#tearOff']() {
      return new reentrant_lock.ReentrantLock.new();
    }
  };
  (reentrant_lock.ReentrantLock.new = function() {
    this[innerLocks] = T$.JSArrayOfBasicLock().of([new basic_lock.BasicLock.new()]);
    ;
  }).prototype = reentrant_lock.ReentrantLock.prototype;
  dart.addTypeTests(reentrant_lock.ReentrantLock);
  dart.addTypeCaches(reentrant_lock.ReentrantLock);
  reentrant_lock.ReentrantLock[dart.implements] = () => [synchronized.Lock];
  dart.setMethodSignature(reentrant_lock.ReentrantLock, () => ({
    __proto__: dart.getMethods(reentrant_lock.ReentrantLock.__proto__),
    synchronized: dart.gFnType(T => [async.Future$(T), [dart.fnType(async.FutureOr$(T), [])], {timeout: dart.nullable(core.Duration)}, {}], T => [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(reentrant_lock.ReentrantLock, () => ({
    __proto__: dart.getGetters(reentrant_lock.ReentrantLock.__proto__),
    innerLevel: core.int,
    inZone: core.bool,
    inLock: core.bool,
    locked: core.bool
  }));
  dart.setLibraryUri(reentrant_lock.ReentrantLock, I[23]);
  dart.setFieldSignature(reentrant_lock.ReentrantLock, () => ({
    __proto__: dart.getFields(reentrant_lock.ReentrantLock.__proto__),
    innerLocks: dart.finalFieldType(core.List$(basic_lock.BasicLock))
  }));
  dart.defineExtensionMethods(reentrant_lock.ReentrantLock, ['toString']);
  sql_command.SqliteSqlCommandType = class SqliteSqlCommandType extends core._Enum {
    [_enumToString]() {
      return "SqliteSqlCommandType." + this[_name];
    }
  };
  (sql_command.SqliteSqlCommandType.new = function(index, name) {
    sql_command.SqliteSqlCommandType.__proto__.new.call(this, index, name);
    ;
  }).prototype = sql_command.SqliteSqlCommandType.prototype;
  dart.addTypeTests(sql_command.SqliteSqlCommandType);
  dart.addTypeCaches(sql_command.SqliteSqlCommandType);
  dart.setMethodSignature(sql_command.SqliteSqlCommandType, () => ({
    __proto__: dart.getMethods(sql_command.SqliteSqlCommandType.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(sql_command.SqliteSqlCommandType, I[17]);
  dart.setStaticFieldSignature(sql_command.SqliteSqlCommandType, () => ['values', 'execute', 'insert', 'update', 'delete', 'query']);
  dart.defineLazy(sql_command.SqliteSqlCommandType, {
    /*sql_command.SqliteSqlCommandType.values*/get values() {
      return C[27] || CT.C27;
    },
    /*sql_command.SqliteSqlCommandType.execute*/get execute() {
      return C[20] || CT.C20;
    },
    /*sql_command.SqliteSqlCommandType.insert*/get insert() {
      return C[21] || CT.C21;
    },
    /*sql_command.SqliteSqlCommandType.update*/get update() {
      return C[22] || CT.C22;
    },
    /*sql_command.SqliteSqlCommandType.delete*/get delete() {
      return C[23] || CT.C23;
    },
    /*sql_command.SqliteSqlCommandType.query*/get query() {
      return C[24] || CT.C24;
    }
  }, false);
  dart.copyProperties(env_utils, {
    get isRelease() {
      if (env_utils._isRelease == null) {
        env_utils._isRelease = true;
        if (!dart.fn(() => {
          env_utils._isRelease = false;
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[24], 11, 12, "() {\n      _isRelease = false;\n      return true;\n    }()");
      }
      return dart.nullCheck(env_utils._isRelease);
    },
    get isDebug() {
      return !env_utils.isRelease;
    }
  });
  dart.defineLazy(env_utils, {
    /*env_utils._isRelease*/get _isRelease() {
      return null;
    },
    set _isRelease(value) {},
    /*env_utils.kSqfliteIsWeb*/get kSqfliteIsWeb() {
      return true;
    }
  }, false);
  dart.defineLazy(constant$1, {
    /*constant$1.anyErrorCode*/get anyErrorCode() {
      return "error";
    }
  }, false);
  dart.copyProperties(env_utils$, {
    get isRelease() {
      if (env_utils$._isRelease == null) {
        env_utils$._isRelease = true;
        if (!dart.fn(() => {
          env_utils$._isRelease = false;
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[25], 11, 12, "() {\n      _isRelease = false;\n      return true;\n    }()");
      }
      return dart.nullCheck(env_utils$._isRelease);
    },
    get isDebug() {
      return !env_utils$.isRelease;
    }
  });
  dart.defineLazy(env_utils$, {
    /*env_utils$._isRelease*/get _isRelease() {
      return null;
    },
    set _isRelease(value) {},
    /*env_utils$.isRunningAsJavascript*/get isRunningAsJavascript() {
      return true;
    }
  }, false);
  utils$2.sleep = function sleep(ms) {
    return T$.FutureOfvoid().delayed(new core.Duration.new({milliseconds: ms}));
  };
  utils$2.devPrint = function devPrint$(object) {
    core.print(object);
  };
  var database$2 = dart.privateName(sqflite_ffi_exception, "SqfliteFfiException.database");
  var sql$1 = dart.privateName(sqflite_ffi_exception, "SqfliteFfiException.sql");
  var sqlArguments = dart.privateName(sqflite_ffi_exception, "SqfliteFfiException.sqlArguments");
  var code$ = dart.privateName(sqflite_ffi_exception, "SqfliteFfiException.code");
  var details$ = dart.privateName(sqflite_ffi_exception, "SqfliteFfiException.details");
  var _resultCode$ = dart.privateName(sqflite_ffi_exception, "_resultCode");
  sqflite_ffi_exception.SqfliteFfiException = class SqfliteFfiException extends exception.SqfliteDatabaseException {
    get database() {
      return this[database$2];
    }
    set database(value) {
      this[database$2] = value;
    }
    get sql() {
      return this[sql$1];
    }
    set sql(value) {
      this[sql$1] = value;
    }
    get sqlArguments() {
      return this[sqlArguments];
    }
    set sqlArguments(value) {
      this[sqlArguments] = value;
    }
    get code() {
      return this[code$];
    }
    set code(value) {
      super.code = value;
    }
    get details() {
      return this[details$];
    }
    set details(value) {
      this[details$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let code = opts && 'code' in opts ? opts.code : null;
      let message = opts && 'message' in opts ? opts.message : null;
      let details = opts && 'details' in opts ? opts.details : null;
      let resultCode = opts && 'resultCode' in opts ? opts.resultCode : null;
      return new sqflite_ffi_exception.SqfliteFfiException.new({code: code, message: message, details: details, resultCode: resultCode});
    }
    get [_resultCode$]() {
      return this.getResultCode();
    }
    toString() {
      let t86, t86$;
      let map = new (T$.IdentityMapOfString$ObjectN()).new();
      if (this.details != null) {
        if (core.Map.is(this.details)) {
          let detailsMap = T$.LinkedHashMapOfString$ObjectN().from(dart.nullCheck(this.details))[$cast](core.String, T$.ObjectN());
          detailsMap[$remove]("arguments");
          detailsMap[$remove]("sql");
          if (detailsMap[$isNotEmpty]) {
            map[$_set]("details", detailsMap);
          }
        } else {
          map[$_set]("details", this.details);
        }
      }
      let sb = new core.StringBuffer.new();
      sb.write("SqfliteFfiException(" + this.code + (this[_resultCode$] == null ? "" : ": " + dart.str(this[_resultCode$]) + ", ") + ", " + dart.str(this.message) + "})");
      if (this.sql != null) {
        sb.write(" sql " + dart.str(this.sql));
        if (dart.test((t86$ = (t86 = this.sqlArguments, t86 == null ? null : t86[$isNotEmpty]), t86$ == null ? false : t86$))) {
          sb.write(" args " + arg_utils.argumentsToString(dart.nullCheck(this.sqlArguments)));
        }
      } else {
        sb.write(" " + super.toString());
      }
      if (map[$isNotEmpty]) {
        sb.write(" " + dart.str(map));
      }
      return sb.toString();
    }
  };
  (sqflite_ffi_exception.SqfliteFfiException.new = function(opts) {
    let code = opts && 'code' in opts ? opts.code : null;
    let message = opts && 'message' in opts ? opts.message : null;
    let details = opts && 'details' in opts ? opts.details : null;
    let resultCode = opts && 'resultCode' in opts ? opts.resultCode : null;
    this[database$2] = null;
    this[sql$1] = null;
    this[sqlArguments] = null;
    this[code$] = code;
    this[details$] = details;
    sqflite_ffi_exception.SqfliteFfiException.__proto__.new.call(this, message, details, {resultCode: resultCode});
    ;
  }).prototype = sqflite_ffi_exception.SqfliteFfiException.prototype;
  dart.addTypeTests(sqflite_ffi_exception.SqfliteFfiException);
  dart.addTypeCaches(sqflite_ffi_exception.SqfliteFfiException);
  dart.setGetterSignature(sqflite_ffi_exception.SqfliteFfiException, () => ({
    __proto__: dart.getGetters(sqflite_ffi_exception.SqfliteFfiException.__proto__),
    [_resultCode$]: dart.nullable(core.int)
  }));
  dart.setLibraryUri(sqflite_ffi_exception.SqfliteFfiException, I[26]);
  dart.setFieldSignature(sqflite_ffi_exception.SqfliteFfiException, () => ({
    __proto__: dart.getFields(sqflite_ffi_exception.SqfliteFfiException.__proto__),
    database: dart.fieldType(dart.nullable(sqflite_ffi_impl.SqfliteFfiDatabase)),
    sql: dart.fieldType(dart.nullable(core.String)),
    sqlArguments: dart.fieldType(dart.nullable(core.List$(dart.nullable(core.Object)))),
    code: dart.finalFieldType(core.String),
    details: dart.fieldType(dart.nullable(core.Map$(core.String, dart.nullable(core.Object))))
  }));
  dart.defineExtensionMethods(sqflite_ffi_exception.SqfliteFfiException, ['toString']);
  sqflite_ffi_impl.SqfliteFfiHandler = class SqfliteFfiHandler extends core.Object {};
  (sqflite_ffi_impl.SqfliteFfiHandler.new = function() {
    ;
  }).prototype = sqflite_ffi_impl.SqfliteFfiHandler.prototype;
  dart.addTypeTests(sqflite_ffi_impl.SqfliteFfiHandler);
  dart.addTypeCaches(sqflite_ffi_impl.SqfliteFfiHandler);
  dart.setLibraryUri(sqflite_ffi_impl.SqfliteFfiHandler, I[27]);
  var method = dart.privateName(sqflite_ffi_impl, "SqfliteFfiOperation.method");
  var sql$2 = dart.privateName(sqflite_ffi_impl, "SqfliteFfiOperation.sql");
  var sqlArguments$ = dart.privateName(sqflite_ffi_impl, "SqfliteFfiOperation.sqlArguments");
  sqflite_ffi_impl.SqfliteFfiOperation = class SqfliteFfiOperation extends core.Object {
    get method() {
      return this[method];
    }
    set method(value) {
      this[method] = value;
    }
    get sql() {
      return this[sql$2];
    }
    set sql(value) {
      this[sql$2] = value;
    }
    get sqlArguments() {
      return this[sqlArguments$];
    }
    set sqlArguments(value) {
      this[sqlArguments$] = value;
    }
    toString() {
      return dart.str(this.method) + " " + sqflite_ffi_impl._sqlArgumentsToString(this.sql, this.sqlArguments);
    }
    static ['_#new#tearOff']() {
      return new sqflite_ffi_impl.SqfliteFfiOperation.new();
    }
  };
  (sqflite_ffi_impl.SqfliteFfiOperation.new = function() {
    this[method] = null;
    this[sql$2] = null;
    this[sqlArguments$] = null;
    ;
  }).prototype = sqflite_ffi_impl.SqfliteFfiOperation.prototype;
  dart.addTypeTests(sqflite_ffi_impl.SqfliteFfiOperation);
  dart.addTypeCaches(sqflite_ffi_impl.SqfliteFfiOperation);
  dart.setLibraryUri(sqflite_ffi_impl.SqfliteFfiOperation, I[27]);
  dart.setFieldSignature(sqflite_ffi_impl.SqfliteFfiOperation, () => ({
    __proto__: dart.getFields(sqflite_ffi_impl.SqfliteFfiOperation.__proto__),
    method: dart.fieldType(dart.nullable(core.String)),
    sql: dart.fieldType(dart.nullable(core.String)),
    sqlArguments: dart.fieldType(dart.nullable(core.List$(dart.nullable(core.Object))))
  }));
  dart.defineExtensionMethods(sqflite_ffi_impl.SqfliteFfiOperation, ['toString']);
  sqflite_ffi_impl._SqfliteFfiCursorInfo = class _SqfliteFfiCursorInfo extends core.Object {
    static ['_#new#tearOff'](id, statement, pageSize, cursor) {
      return new sqflite_ffi_impl._SqfliteFfiCursorInfo.new(id, statement, pageSize, cursor);
    }
  };
  (sqflite_ffi_impl._SqfliteFfiCursorInfo.new = function(id, statement, pageSize, cursor) {
    this.atEnd = false;
    this.id = id;
    this.statement = statement;
    this.pageSize = pageSize;
    this.cursor = cursor;
    ;
  }).prototype = sqflite_ffi_impl._SqfliteFfiCursorInfo.prototype;
  dart.addTypeTests(sqflite_ffi_impl._SqfliteFfiCursorInfo);
  dart.addTypeCaches(sqflite_ffi_impl._SqfliteFfiCursorInfo);
  dart.setLibraryUri(sqflite_ffi_impl._SqfliteFfiCursorInfo, I[27]);
  dart.setFieldSignature(sqflite_ffi_impl._SqfliteFfiCursorInfo, () => ({
    __proto__: dart.getFields(sqflite_ffi_impl._SqfliteFfiCursorInfo.__proto__),
    id: dart.finalFieldType(core.int),
    statement: dart.finalFieldType(statement.CommonPreparedStatement),
    pageSize: dart.finalFieldType(core.int),
    cursor: dart.finalFieldType(result_set.IteratingCursor),
    atEnd: dart.fieldType(core.bool)
  }));
  var _completer = dart.privateName(sqflite_ffi_impl, "_completer");
  sqflite_ffi_impl._QueuedHandler = class _QueuedHandler extends core.Object {
    static ['_#new#tearOff'](handler) {
      return new sqflite_ffi_impl._QueuedHandler.new(handler);
    }
    get future() {
      return this[_completer].future;
    }
    run() {
      return async.async(dart.void, (function* run() {
        try {
          let result = (yield this.handler());
          this[_completer].complete(result);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            this[_completer].completeError(e);
          } else
            throw e$;
        }
      }).bind(this));
    }
    cancel() {
      this[_completer].completeError(new core.StateError.new("Database has been closed"));
    }
  };
  (sqflite_ffi_impl._QueuedHandler.new = function(handler) {
    this[_completer] = T$.CompleterOfvoid().new();
    this.handler = handler;
    ;
  }).prototype = sqflite_ffi_impl._QueuedHandler.prototype;
  dart.addTypeTests(sqflite_ffi_impl._QueuedHandler);
  dart.addTypeCaches(sqflite_ffi_impl._QueuedHandler);
  dart.setMethodSignature(sqflite_ffi_impl._QueuedHandler, () => ({
    __proto__: dart.getMethods(sqflite_ffi_impl._QueuedHandler.__proto__),
    run: dart.fnType(async.Future$(dart.void), []),
    cancel: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(sqflite_ffi_impl._QueuedHandler, () => ({
    __proto__: dart.getGetters(sqflite_ffi_impl._QueuedHandler.__proto__),
    future: async.Future
  }));
  dart.setLibraryUri(sqflite_ffi_impl._QueuedHandler, I[27]);
  dart.setFieldSignature(sqflite_ffi_impl._QueuedHandler, () => ({
    __proto__: dart.getFields(sqflite_ffi_impl._QueuedHandler.__proto__),
    handler: dart.finalFieldType(dart.fnType(async.Future, [])),
    [_completer]: dart.finalFieldType(async.Completer$(dart.void))
  }));
  var id$0 = dart.privateName(sqflite_ffi_impl, "SqfliteFfiDatabase.id");
  var singleInstance$0 = dart.privateName(sqflite_ffi_impl, "SqfliteFfiDatabase.singleInstance");
  var path$1 = dart.privateName(sqflite_ffi_impl, "SqfliteFfiDatabase.path");
  var readOnly$0 = dart.privateName(sqflite_ffi_impl, "SqfliteFfiDatabase.readOnly");
  var logLevel$1 = dart.privateName(sqflite_ffi_impl, "SqfliteFfiDatabase.logLevel");
  var _lastTransactionId = dart.privateName(sqflite_ffi_impl, "_lastTransactionId");
  var _currentTransactionId = dart.privateName(sqflite_ffi_impl, "_currentTransactionId");
  var _noTransactionHandlerQueue = dart.privateName(sqflite_ffi_impl, "_noTransactionHandlerQueue");
  var _handlerLock = dart.privateName(sqflite_ffi_impl, "_handlerLock");
  var _cursors = dart.privateName(sqflite_ffi_impl, "_cursors");
  var _lastCursorId = dart.privateName(sqflite_ffi_impl, "_lastCursorId");
  var _queuedHandlerLock = dart.privateName(sqflite_ffi_impl, "_queuedHandlerLock");
  var _ffiDb$ = dart.privateName(sqflite_ffi_impl, "_ffiDb");
  var _prefix = dart.privateName(sqflite_ffi_impl, "_prefix");
  var _getUpdatedRows = dart.privateName(sqflite_ffi_impl, "_getUpdatedRows");
  var _getLastInsertId = dart.privateName(sqflite_ffi_impl, "_getLastInsertId");
  var _cancelQueuedHandlers = dart.privateName(sqflite_ffi_impl, "_cancelQueuedHandlers");
  var _ffiArguments = dart.privateName(sqflite_ffi_impl, "_ffiArguments");
  var _handleExecute = dart.privateName(sqflite_ffi_impl, "_handleExecute");
  var _runQueuedHandlers = dart.privateName(sqflite_ffi_impl, "_runQueuedHandlers");
  var _handleReadOnly = dart.privateName(sqflite_ffi_impl, "_handleReadOnly");
  var _handleInsert = dart.privateName(sqflite_ffi_impl, "_handleInsert");
  var _handleUpdate = dart.privateName(sqflite_ffi_impl, "_handleUpdate");
  var _handleQuery = dart.privateName(sqflite_ffi_impl, "_handleQuery");
  var _handleQueryByPage = dart.privateName(sqflite_ffi_impl, "_handleQueryByPage");
  var _closeCursor$ = dart.privateName(sqflite_ffi_impl, "_closeCursor");
  var _resultFromCursor = dart.privateName(sqflite_ffi_impl, "_resultFromCursor");
  var _handleQueryCursorNext = dart.privateName(sqflite_ffi_impl, "_handleQueryCursorNext");
  var _handleBatch = dart.privateName(sqflite_ffi_impl, "_handleBatch");
  sqflite_ffi_impl.SqfliteFfiDatabase = class SqfliteFfiDatabase extends core.Object {
    get id() {
      return this[id$0];
    }
    set id(value) {
      super.id = value;
    }
    get singleInstance() {
      return this[singleInstance$0];
    }
    set singleInstance(value) {
      super.singleInstance = value;
    }
    get path() {
      return this[path$1];
    }
    set path(value) {
      super.path = value;
    }
    get readOnly() {
      return this[readOnly$0];
    }
    set readOnly(value) {
      super.readOnly = value;
    }
    get logLevel() {
      return this[logLevel$1];
    }
    set logLevel(value) {
      super.logLevel = value;
    }
    static ['_#new#tearOff'](id, _ffiDb, opts) {
      let singleInstance = opts && 'singleInstance' in opts ? opts.singleInstance : null;
      let path = opts && 'path' in opts ? opts.path : null;
      let readOnly = opts && 'readOnly' in opts ? opts.readOnly : null;
      let logLevel = opts && 'logLevel' in opts ? opts.logLevel : null;
      return new sqflite_ffi_impl.SqfliteFfiDatabase.new(id, _ffiDb, {singleInstance: singleInstance, path: path, readOnly: readOnly, logLevel: logLevel});
    }
    get [_prefix]() {
      return "[sqflite-" + dart.str(this.id) + "]";
    }
    toDebugMap() {
      let map = new (T$.IdentityMapOfString$ObjectN()).from(["path", this.path, "id", this.id, "readOnly", this.readOnly, "singleInstance", this.singleInstance]);
      return map;
    }
    [_getLastInsertId]() {
      if (this[_getUpdatedRows]() === 0) {
        return null;
      }
      let id = this[_ffiDb$].lastInsertRowId;
      if (this.logLevel >= constant$.sqfliteLogLevelSql) {
        core.print(this[_prefix] + " Inserted " + dart.str(id));
      }
      return id;
    }
    toString() {
      return this.toDebugMap()[$toString]();
    }
    close() {
      this[_cancelQueuedHandlers]();
      this.logResult({result: "Closing database " + dart.str(this)});
      this[_ffiDb$].dispose();
    }
    [_ffiArguments](sqlArguments) {
      let t87, t87$;
      t87$ = (t87 = sqlArguments, t87 == null ? null : t87[$cast](T$.ObjectN()));
      return t87$ == null ? C[28] || CT.C28 : t87$;
    }
    handleExecute(opts) {
      let sql = opts && 'sql' in opts ? opts.sql : null;
      let sqlArguments = opts && 'sqlArguments' in opts ? opts.sqlArguments : null;
      return this[_handlerLock].synchronized(dart.void, dart.fn(() => this[_handleExecute]({sql: sql, sqlArguments: sqlArguments}), T$.VoidToFutureOfvoid()));
    }
    [_handleExecute](opts) {
      let sql = opts && 'sql' in opts ? opts.sql : null;
      let sqlArguments = opts && 'sqlArguments' in opts ? opts.sqlArguments : null;
      return async.async(dart.void, (function* _handleExecute() {
        let t87, t87$;
        this.logSql({sql: sql, sqlArguments: sqlArguments});
        if (dart.test((t87$ = (t87 = sqlArguments, t87 == null ? null : t87[$isNotEmpty]), t87$ == null ? false : t87$))) {
          let preparedStatement = this[_ffiDb$].prepare(sql);
          try {
            preparedStatement.execute(this[_ffiArguments](sqlArguments));
            return;
          } finally {
            preparedStatement.dispose();
          }
        } else {
          this[_ffiDb$].execute(sql);
        }
      }).bind(this));
    }
    logResult(opts) {
      let result = opts && 'result' in opts ? opts.result : null;
      if (result != null && this.logLevel >= constant$.sqfliteLogLevelSql) {
        core.print(this[_prefix] + " " + dart.str(result));
      }
    }
    logSql(opts) {
      let t87, t87$;
      let sql = opts && 'sql' in opts ? opts.sql : null;
      let sqlArguments = opts && 'sqlArguments' in opts ? opts.sqlArguments : null;
      let result = opts && 'result' in opts ? opts.result : null;
      if (this.logLevel >= constant$.sqfliteLogLevelSql) {
        core.print(this[_prefix] + " " + sql + (dart.test((t87$ = (t87 = sqlArguments, t87 == null ? null : t87[$isNotEmpty]), t87$ == null ? false : t87$)) ? " " + dart.str(sqlArguments) : ""));
        this.logResult({result: result});
      }
    }
    [_runQueuedHandlers]() {
      return async.async(dart.void, (function* _runQueuedHandlers() {
        if (this[_noTransactionHandlerQueue][$isNotEmpty]) {
          yield this[_queuedHandlerLock].synchronized(core.Null, dart.fn(() => async.async(core.Null, (function*() {
            while (true) {
              if (this[_noTransactionHandlerQueue][$isNotEmpty]) {
                let queuedHandler = this[_noTransactionHandlerQueue][$first];
                if (this[_currentTransactionId] != null) {
                  break;
                }
                yield queuedHandler.run();
                this[_noTransactionHandlerQueue][$removeAt](0);
              } else {
                break;
              }
            }
          }).bind(this)), T$.VoidToFutureOfNull()));
        }
      }).bind(this));
    }
    [_cancelQueuedHandlers]() {
      return async.async(dart.void, (function* _cancelQueuedHandlers() {
        if (this[_noTransactionHandlerQueue][$isNotEmpty]) {
          yield this[_queuedHandlerLock].synchronized(core.Null, dart.fn(() => async.async(core.Null, (function*() {
            for (let queuedHandler of this[_noTransactionHandlerQueue]) {
              queuedHandler.cancel();
            }
          }).bind(this)), T$.VoidToFutureOfNull()));
        }
      }).bind(this));
    }
    handleTransactionId(transactionId, handler) {
      return async.async(dart.dynamic, (function* handleTransactionId() {
        if (this[_currentTransactionId] == null) {
          return yield handler();
        } else if (transactionId == this[_currentTransactionId] || transactionId === -1) {
          try {
            return yield handler();
          } finally {
            if (this[_currentTransactionId] == null) {
              async.unawaited(this[_runQueuedHandlers]());
            }
          }
        } else {
          let queuedHandler = new sqflite_ffi_impl._QueuedHandler.new(handler);
          this[_noTransactionHandlerQueue][$add](queuedHandler);
          return queuedHandler.future;
        }
      }).bind(this));
    }
    [_handleReadOnly]() {
      if (this.readOnly) {
        dart.throw(new sqflite_ffi_exception.SqfliteFfiException.new({code: "sqlite_error", message: "Database readonly"}));
      }
    }
    handleInsert(opts) {
      let sql = opts && 'sql' in opts ? opts.sql : null;
      let sqlArguments = opts && 'sqlArguments' in opts ? opts.sqlArguments : null;
      return this[_handlerLock].synchronized(T$.intN(), dart.fn(() => this[_handleInsert]({sql: sql, sqlArguments: sqlArguments}), T$.VoidToFutureOfintN()));
    }
    [_handleInsert](opts) {
      let sql = opts && 'sql' in opts ? opts.sql : null;
      let sqlArguments = opts && 'sqlArguments' in opts ? opts.sqlArguments : null;
      return async.async(T$.intN(), (function* _handleInsert() {
        this[_handleReadOnly]();
        yield this[_handleExecute]({sql: sql, sqlArguments: sqlArguments});
        let id = this[_getLastInsertId]();
        if (this.logLevel >= constant$.sqfliteLogLevelSql) {
          core.print(this[_prefix] + " Inserted id " + dart.str(id));
        }
        return id;
      }).bind(this));
    }
    handleUpdate(opts) {
      let sql = opts && 'sql' in opts ? opts.sql : null;
      let sqlArguments = opts && 'sqlArguments' in opts ? opts.sqlArguments : null;
      return this[_handlerLock].synchronized(core.int, dart.fn(() => this[_handleUpdate]({sql: sql, sqlArguments: sqlArguments}), T$.VoidToFutureOfint()));
    }
    [_handleUpdate](opts) {
      let sql = opts && 'sql' in opts ? opts.sql : null;
      let sqlArguments = opts && 'sqlArguments' in opts ? opts.sqlArguments : null;
      return async.async(core.int, (function* _handleUpdate() {
        this[_handleReadOnly]();
        yield this[_handleExecute]({sql: sql, sqlArguments: sqlArguments});
        let rowCount = this[_getUpdatedRows]();
        return rowCount;
      }).bind(this));
    }
    handleQuery(opts) {
      let sql = opts && 'sql' in opts ? opts.sql : null;
      let sqlArguments = opts && 'sqlArguments' in opts ? opts.sqlArguments : null;
      let pageSize = opts && 'pageSize' in opts ? opts.pageSize : null;
      return this[_handlerLock].synchronized(dart.dynamic, dart.fn(() => {
        if (pageSize == null) {
          return this[_handleQuery]({sqlArguments: sqlArguments, sql: sql});
        } else {
          return this[_handleQueryByPage]({sqlArguments: sqlArguments, sql: sql, pageSize: pageSize});
        }
      }, T$.VoidToFutureOfObjectN()));
    }
    [_handleQuery](opts) {
      let sql = opts && 'sql' in opts ? opts.sql : null;
      let sqlArguments = opts && 'sqlArguments' in opts ? opts.sqlArguments : null;
      return async.async(dart.dynamic, (function* _handleQuery() {
        let preparedStatement = this[_ffiDb$].prepare(sql);
        try {
          this.logSql({sql: sql, sqlArguments: sqlArguments});
          let result = preparedStatement.select(this[_ffiArguments](sqlArguments));
          this.logResult({result: "Found " + dart.str(result.length) + " rows"});
          return sqflite_ffi_impl.packResult(result);
        } finally {
          preparedStatement.dispose();
        }
      }).bind(this));
    }
    [_resultFromCursor](cursorInfo) {
      let cursorId = cursorInfo.id;
      try {
        let cursor = cursorInfo.cursor;
        let columns = cursor.columnNames;
        let rows = T$.JSArrayOfListOfObjectN().of([]);
        while (true) {
          if (cursor.moveNext()) {
            let row = cursor.current;
            rows[$add](row.values);
          } else {
            cursorInfo.atEnd = true;
            break;
          }
          if (rows[$length] >= cursorInfo.pageSize) {
            break;
          }
        }
        let pack = sqflite_ffi_impl.packColumnsRowsResult(columns, rows);
        if (!cursorInfo.atEnd) {
          pack[$_set]("cursorId", cursorInfo.id);
        }
        return pack;
      } catch (e) {
        let _ = dart.getThrown(e);
        if (core.Object.is(_)) {
          this[_closeCursor$](cursorId);
          dart.rethrow(e);
        } else
          throw e;
      } finally {
        if (cursorInfo.atEnd) {
          this[_closeCursor$](cursorId);
        }
      }
    }
    [_handleQueryByPage](opts) {
      let sql = opts && 'sql' in opts ? opts.sql : null;
      let sqlArguments = opts && 'sqlArguments' in opts ? opts.sqlArguments : null;
      let pageSize = opts && 'pageSize' in opts ? opts.pageSize : null;
      return async.async(T$.ObjectN(), (function* _handleQueryByPage() {
        let preparedStatement = this[_ffiDb$].prepare(sql);
        this.logSql({sql: sql, sqlArguments: sqlArguments});
        let cursor = preparedStatement.selectCursor(this[_ffiArguments](sqlArguments));
        let cursorId = this[_lastCursorId] = this[_lastCursorId] + 1;
        let cursorInfo = new sqflite_ffi_impl._SqfliteFfiCursorInfo.new(cursorId, preparedStatement, pageSize, cursor);
        this[_cursors][$_set](cursorId, cursorInfo);
        return this[_resultFromCursor](cursorInfo);
      }).bind(this));
    }
    handleQueryCursorNext(opts) {
      let cursorId = opts && 'cursorId' in opts ? opts.cursorId : null;
      let cancel = opts && 'cancel' in opts ? opts.cancel : null;
      return this[_handlerLock].synchronized(dart.dynamic, dart.fn(() => this[_handleQueryCursorNext]({cursorId: cursorId, cancel: cancel}), T$.VoidToFutureOfObjectN()));
    }
    [_handleQueryCursorNext](opts) {
      let cursorId = opts && 'cursorId' in opts ? opts.cursorId : null;
      let cancel = opts && 'cancel' in opts ? opts.cancel : null;
      return async.async(T$.ObjectN(), (function* _handleQueryCursorNext() {
        if (this.logLevel >= constant$.sqfliteLogLevelVerbose) {
          this.logResult({result: "queryCursorNext " + dart.str(cursorId) + (cancel === true ? " (cancel)" : "")});
        }
        let cursorInfo = this[_cursors][$_get](cursorId);
        if (cancel === true) {
          this[_closeCursor$](cursorId);
          return null;
        }
        if (cursorInfo == null) {
          dart.throw(new core.StateError.new("Cursor " + dart.str(cursorId) + " not found"));
        }
        return this[_resultFromCursor](cursorInfo);
      }).bind(this));
    }
    [_closeCursor$](cursorId) {
      let info = this[_cursors][$remove](cursorId);
      if (info != null) {
        if (this.logLevel >= constant$.sqfliteLogLevelVerbose) {
          this.logResult({result: "Closing cursor " + dart.str(cursorId)});
        }
        info.statement.dispose();
      }
    }
    [_getUpdatedRows]() {
      let rowCount = this[_ffiDb$].getUpdatedRows();
      if (this.logLevel >= constant$.sqfliteLogLevelSql) {
        core.print(this[_prefix] + " Modified " + dart.str(rowCount) + " rows");
      }
      return rowCount;
    }
    handleBatch(opts) {
      let operations = opts && 'operations' in opts ? opts.operations : null;
      let noResult = opts && 'noResult' in opts ? opts.noResult : null;
      let continueOnError = opts && 'continueOnError' in opts ? opts.continueOnError : null;
      return this[_handlerLock].synchronized(dart.dynamic, dart.fn(() => this[_handleBatch]({operations: operations, noResult: noResult, continueOnError: continueOnError}), T$.VoidToFuture()));
    }
    [_handleBatch](opts) {
      let operations = opts && 'operations' in opts ? opts.operations : null;
      let noResult = opts && 'noResult' in opts ? opts.noResult : null;
      let continueOnError = opts && 'continueOnError' in opts ? opts.continueOnError : null;
      return async.async(dart.dynamic, (function* _handleBatch() {
        let results = null;
        if (!noResult) {
          results = T$.JSArrayOfMapOfString$ObjectN().of([]);
        }
        for (let operation of operations) {
          function getErrorMap(e) {
            return new (T$.IdentityMapOfString$ObjectN()).from(["error", (() => {
                let t88 = new (T$.IdentityMapOfString$ObjectN()).new();
                t88[$_set]("message", dart.str(e));
                if (e.sql != null || e.sqlArguments != null) t88[$_set]("data", (() => {
                  let t89 = new (T$.IdentityMapOfString$ObjectN()).new();
                  t89[$_set]("sql", e.sql);
                  if (e.sqlArguments != null) t89[$_set]("arguments", e.sqlArguments);
                  return t89;
                })());
                return t88;
              })()]);
          }
          dart.fn(getErrorMap, T$.SqfliteFfiExceptionToMapOfString$ObjectN());
          function addResult(result) {
            if (!noResult) {
              dart.nullCheck(results)[$add](new (T$.IdentityMapOfString$ObjectN()).from(["result", result]));
            }
          }
          dart.fn(addResult, T$.dynamicTovoid());
          const addError = (e, st = null) => {
            if (sqflite_ffi_impl._debug && st != null) {
              core.print("stack: " + dart.str(st));
            }
            const wrap = e => {
              return sqflite_ffi_impl._ffiWrapAnyException(e, {database: this, sql: operation.sql, sqlArguments: operation.sqlArguments});
            };
            dart.fn(wrap, T$.dynamicToSqfliteFfiException());
            if (continueOnError) {
              if (!noResult) {
                dart.nullCheck(results)[$add](getErrorMap(wrap(e)));
              }
            } else {
              dart.throw(wrap(e));
            }
          };
          dart.fn(addError, T$.dynamicAnddynamicTovoid());
          switch (operation.method) {
            case "insert":
              {
                {
                  try {
                    yield this[_handleExecute]({sql: dart.nullCheck(operation.sql), sqlArguments: operation.sqlArguments});
                    if (!noResult) {
                      addResult(this[_getLastInsertId]());
                    }
                  } catch (e$) {
                    let e = dart.getThrown(e$);
                    let st = dart.stackTrace(e$);
                    if (core.Object.is(e)) {
                      addError(e, st);
                    } else
                      throw e$;
                  }
                  break;
                }
              }
            case "execute":
              {
                {
                  try {
                    yield this[_handleExecute]({sql: dart.nullCheck(operation.sql), sqlArguments: operation.sqlArguments});
                    addResult(null);
                  } catch (e$0) {
                    let e = dart.getThrown(e$0);
                    if (core.Object.is(e)) {
                      addError(e);
                    } else
                      throw e$0;
                  }
                  break;
                }
              }
            case "query":
              {
                {
                  try {
                    let result = (yield this[_handleQuery]({sql: dart.nullCheck(operation.sql), sqlArguments: operation.sqlArguments}));
                    addResult(result);
                  } catch (e$1) {
                    let e = dart.getThrown(e$1);
                    if (core.Object.is(e)) {
                      addError(e);
                    } else
                      throw e$1;
                  }
                  break;
                }
              }
            case "update":
              {
                {
                  try {
                    yield this[_handleExecute]({sql: dart.nullCheck(operation.sql), sqlArguments: operation.sqlArguments});
                    if (!noResult) {
                      addResult(this[_getUpdatedRows]());
                    }
                  } catch (e$2) {
                    let e = dart.getThrown(e$2);
                    if (core.Object.is(e)) {
                      addError(e);
                    } else
                      throw e$2;
                  }
                  break;
                }
              }
            default:
              {
                dart.throw("batch operation " + dart.str(operation.method) + " not supported");
              }
          }
        }
        return results;
      }).bind(this));
    }
  };
  (sqflite_ffi_impl.SqfliteFfiDatabase.new = function(id, _ffiDb, opts) {
    let singleInstance = opts && 'singleInstance' in opts ? opts.singleInstance : null;
    let path = opts && 'path' in opts ? opts.path : null;
    let readOnly = opts && 'readOnly' in opts ? opts.readOnly : null;
    let logLevel = opts && 'logLevel' in opts ? opts.logLevel : null;
    this[_lastTransactionId] = 0;
    this[_currentTransactionId] = null;
    this[_noTransactionHandlerQueue] = T$.JSArrayOf_QueuedHandler().of([]);
    this[_handlerLock] = synchronized.Lock.new();
    this[_cursors] = new (T$.IdentityMapOfint$_SqfliteFfiCursorInfo()).new();
    this[_lastCursorId] = 0;
    this[_queuedHandlerLock] = synchronized.Lock.new();
    this[id$0] = id;
    this[_ffiDb$] = _ffiDb;
    this[singleInstance$0] = singleInstance;
    this[path$1] = path;
    this[readOnly$0] = readOnly;
    this[logLevel$1] = logLevel;
    sqflite_ffi_impl.ffiDbs[$_set](this.id, this);
  }).prototype = sqflite_ffi_impl.SqfliteFfiDatabase.prototype;
  dart.addTypeTests(sqflite_ffi_impl.SqfliteFfiDatabase);
  dart.addTypeCaches(sqflite_ffi_impl.SqfliteFfiDatabase);
  dart.setMethodSignature(sqflite_ffi_impl.SqfliteFfiDatabase, () => ({
    __proto__: dart.getMethods(sqflite_ffi_impl.SqfliteFfiDatabase.__proto__),
    toDebugMap: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), []),
    [_getLastInsertId]: dart.fnType(dart.nullable(core.int), []),
    close: dart.fnType(dart.void, []),
    [_ffiArguments]: dart.fnType(core.List$(dart.nullable(core.Object)), [dart.nullable(core.List)]),
    handleExecute: dart.fnType(async.Future$(dart.void), [], {sqlArguments: dart.nullable(core.List)}, {sql: core.String}),
    [_handleExecute]: dart.fnType(async.Future$(dart.void), [], {sqlArguments: dart.nullable(core.List)}, {sql: core.String}),
    logResult: dart.fnType(dart.void, [], {result: dart.nullable(core.String)}, {}),
    logSql: dart.fnType(dart.void, [], {result: dart.nullable(core.String), sqlArguments: dart.nullable(core.List)}, {sql: core.String}),
    [_runQueuedHandlers]: dart.fnType(async.Future$(dart.void), []),
    [_cancelQueuedHandlers]: dart.fnType(async.Future$(dart.void), []),
    handleTransactionId: dart.fnType(async.Future, [dart.nullable(core.int), dart.fnType(async.Future, [])]),
    [_handleReadOnly]: dart.fnType(dart.void, []),
    handleInsert: dart.fnType(async.Future$(dart.nullable(core.int)), [], {sqlArguments: dart.nullable(core.List)}, {sql: core.String}),
    [_handleInsert]: dart.fnType(async.Future$(dart.nullable(core.int)), [], {sqlArguments: dart.nullable(core.List)}, {sql: core.String}),
    handleUpdate: dart.fnType(async.Future$(core.int), [], {sqlArguments: dart.nullable(core.List)}, {sql: core.String}),
    [_handleUpdate]: dart.fnType(async.Future$(core.int), [], {sqlArguments: dart.nullable(core.List)}, {sql: core.String}),
    handleQuery: dart.fnType(async.Future, [], {pageSize: dart.nullable(core.int), sqlArguments: dart.nullable(core.List)}, {sql: core.String}),
    [_handleQuery]: dart.fnType(async.Future, [], {sqlArguments: dart.nullable(core.List)}, {sql: core.String}),
    [_resultFromCursor]: dart.fnType(core.Map, [sqflite_ffi_impl._SqfliteFfiCursorInfo]),
    [_handleQueryByPage]: dart.fnType(async.Future$(dart.nullable(core.Object)), [], {sqlArguments: dart.nullable(core.List)}, {pageSize: core.int, sql: core.String}),
    handleQueryCursorNext: dart.fnType(async.Future, [], {cancel: dart.nullable(core.bool)}, {cursorId: core.int}),
    [_handleQueryCursorNext]: dart.fnType(async.Future$(dart.nullable(core.Object)), [], {cancel: dart.nullable(core.bool)}, {cursorId: core.int}),
    [_closeCursor$]: dart.fnType(dart.void, [core.int]),
    [_getUpdatedRows]: dart.fnType(core.int, []),
    handleBatch: dart.fnType(async.Future, [], {}, {continueOnError: core.bool, noResult: core.bool, operations: core.List$(sqflite_ffi_impl.SqfliteFfiOperation)}),
    [_handleBatch]: dart.fnType(async.Future, [], {}, {continueOnError: core.bool, noResult: core.bool, operations: core.List$(sqflite_ffi_impl.SqfliteFfiOperation)})
  }));
  dart.setGetterSignature(sqflite_ffi_impl.SqfliteFfiDatabase, () => ({
    __proto__: dart.getGetters(sqflite_ffi_impl.SqfliteFfiDatabase.__proto__),
    [_prefix]: core.String
  }));
  dart.setLibraryUri(sqflite_ffi_impl.SqfliteFfiDatabase, I[27]);
  dart.setFieldSignature(sqflite_ffi_impl.SqfliteFfiDatabase, () => ({
    __proto__: dart.getFields(sqflite_ffi_impl.SqfliteFfiDatabase.__proto__),
    [_lastTransactionId]: dart.fieldType(core.int),
    [_currentTransactionId]: dart.fieldType(dart.nullable(core.int)),
    [_noTransactionHandlerQueue]: dart.finalFieldType(core.List$(sqflite_ffi_impl._QueuedHandler)),
    [_handlerLock]: dart.finalFieldType(synchronized.Lock),
    id: dart.finalFieldType(core.int),
    singleInstance: dart.finalFieldType(core.bool),
    path: dart.finalFieldType(dart.nullable(core.String)),
    readOnly: dart.finalFieldType(core.bool),
    [_ffiDb$]: dart.finalFieldType(database.CommonDatabase),
    logLevel: dart.finalFieldType(core.int),
    [_cursors]: dart.finalFieldType(core.Map$(core.int, sqflite_ffi_impl._SqfliteFfiCursorInfo)),
    [_lastCursorId]: dart.fieldType(core.int),
    [_queuedHandlerLock]: dart.finalFieldType(synchronized.Lock)
  }));
  dart.defineExtensionMethods(sqflite_ffi_impl.SqfliteFfiDatabase, ['toString']);
  sqflite_ffi_impl._sqlArgumentsToString = function _sqlArgumentsToString(sql, $arguments) {
    let t94, t94$;
    return dart.str(sql) + (dart.test((t94$ = (t94 = $arguments, t94 == null ? null : t94[$isNotEmpty]), t94$ == null ? false : t94$)) ? " " + arg_utils.argumentsToString(dart.nullCheck($arguments)) : "");
  };
  sqflite_ffi_impl._ffiWrapSqliteException = function _ffiWrapSqliteException(e, opts) {
    let code = opts && 'code' in opts ? opts.code : null;
    let details = opts && 'details' in opts ? opts.details : null;
    return new sqflite_ffi_exception.SqfliteFfiException.new({code: "sqlite_error", message: code == null ? dart.str(e) : dart.str(code) + ": " + dart.str(e), details: details, resultCode: e.extendedResultCode});
  };
  sqflite_ffi_impl._ffiWrapAnyException = function _ffiWrapAnyException(e, opts) {
    let t94, t94$, t94$0, t94$1;
    let database = opts && 'database' in opts ? opts.database : null;
    let sql = opts && 'sql' in opts ? opts.sql : null;
    let sqlArguments = opts && 'sqlArguments' in opts ? opts.sqlArguments : null;
    if (sqflite_ffi_exception.SqfliteFfiException.is(e)) {
      t94 = e;
      t94.database == null ? t94.database = database : null;
      t94$ = e;
      t94$.sql == null ? t94$.sql = sql : null;
      t94$0 = e;
      t94$0.sqlArguments == null ? t94$0.sqlArguments = sqlArguments : null;
      if (e.database != null || e.sql != null || e.sqlArguments != null) {
        t94$1 = e;
        t94$1.details == null ? t94$1.details = (() => {
          let t95 = new (T$.IdentityMapOfString$ObjectN()).new();
          if (e.database != null) t95[$_set]("database", dart.nullCheck(e.database).toDebugMap());
          if (e.sql != null) t95[$_set]("sql", e.sql);
          if (e.sqlArguments != null) t95[$_set]("arguments", e.sqlArguments);
          return t95;
        })() : null;
      }
      return e;
    } else if (exception$.SqliteException.is(e)) {
      return sqflite_ffi_impl._ffiWrapAnyException(sqflite_ffi_impl._ffiWrapSqliteException(e), {database: database, sql: sql, sqlArguments: sqlArguments});
    } else {
      return sqflite_ffi_impl._ffiWrapAnyException(new sqflite_ffi_exception.SqfliteFfiException.new({code: "error", message: dart.toString(e)}), {database: database, sql: sql, sqlArguments: sqlArguments});
    }
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|wrapAnyException'] = function SqfliteFfiMethodCallHandler$124wrapAnyException($this, e) {
    return sqflite_ffi_impl._ffiWrapAnyException(e, {database: sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getDatabase']($this), sql: sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getSql']($this), sqlArguments: sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getSqlArguments']($this)});
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#wrapAnyException'] = function SqfliteFfiMethodCallHandler$124get$35wrapAnyException($this) {
    return dart.fn(e => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|wrapAnyException']($this, e), T$.dynamicToSqfliteFfiException());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|wrapAnyExceptionNoIsolate'] = function SqfliteFfiMethodCallHandler$124wrapAnyExceptionNoIsolate($this, e) {
    return sqflite_ffi_impl['SqfliteFfiMethodCallHandler|wrapAnyException']($this, e);
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#wrapAnyExceptionNoIsolate'] = function SqfliteFfiMethodCallHandler$124get$35wrapAnyExceptionNoIsolate($this) {
    return dart.fn(e => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|wrapAnyExceptionNoIsolate']($this, e), T$.dynamicToSqfliteFfiException());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|handleImpl'] = function SqfliteFfiMethodCallHandler$124handleImpl($this) {
    return async.async(dart.dynamic, function* SqfliteFfiMethodCallHandler$124handleImpl() {
      try {
        if (sqflite_ffi_impl._debug) {
          core.print("handle " + dart.str($this));
        }
        let result = (yield sqflite_ffi_impl['SqfliteFfiMethodCallHandler|rawHandle']($this));
        if (sqflite_ffi_impl._debug) {
          core.print("result: " + dart.str(result));
        }
        return result;
      } catch (e$) {
        let e = dart.getThrown(e$);
        let st = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          if (sqflite_ffi_impl._debug) {
            core.print("error: " + dart.str(e));
            core.print("st " + dart.str(st));
          }
          let ffiException = sqflite_ffi_impl['SqfliteFfiMethodCallHandler|wrapAnyException']($this, e);
          dart.throw(ffiException);
        } else
          throw e$;
      }
    });
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#handleImpl'] = function SqfliteFfiMethodCallHandler$124get$35handleImpl($this) {
    return dart.fn(() => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|handleImpl']($this), T$.VoidToFuture());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|_wrapSqlHandler'] = function SqfliteFfiMethodCallHandler$124_wrapSqlHandler($this, handler) {
    let database = sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getDatabaseOrThrow']($this);
    let transactionId = T$.intN().as(sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#argumentsMap']($this)[$_get]("transactionId"));
    return database.handleTransactionId(transactionId, dart.fn(() => handler(database), T$.VoidToFuture()));
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#_wrapSqlHandler'] = function SqfliteFfiMethodCallHandler$124get$35_wrapSqlHandler($this) {
    return dart.fn(handler => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|_wrapSqlHandler']($this, handler), T$.FnToFuture());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|_wrapGlobalHandler'] = function SqfliteFfiMethodCallHandler$124_wrapGlobalHandler($this, handler) {
    return sqflite_ffi_impl._globalHandlerLock.synchronized(dart.dynamic, dart.fn(() => handler(), T$.VoidToFuture()));
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#_wrapGlobalHandler'] = function SqfliteFfiMethodCallHandler$124get$35_wrapGlobalHandler($this) {
    return dart.fn(handler => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|_wrapGlobalHandler']($this, handler), T$.FnToFuture$1());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|rawHandle'] = function SqfliteFfiMethodCallHandler$124rawHandle($this) {
    return async.async(dart.dynamic, function* SqfliteFfiMethodCallHandler$124rawHandle() {
      switch ($this.method) {
        case "openDatabase":
          {
            return yield sqflite_ffi_impl['SqfliteFfiMethodCallHandler|_wrapGlobalHandler']($this, sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#handleOpenDatabase']($this));
          }
        case "closeDatabase":
          {
            return yield sqflite_ffi_impl['SqfliteFfiMethodCallHandler|_wrapGlobalHandler']($this, sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#handleCloseDatabase']($this));
          }
        case "query":
          {
            return yield sqflite_ffi_impl['SqfliteFfiMethodCallHandler|_wrapSqlHandler']($this, sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#handleQuery']($this));
          }
        case "queryCursorNext":
          {
            return yield sqflite_ffi_impl['SqfliteFfiMethodCallHandler|_wrapSqlHandler']($this, sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#handleQueryCursorNext']($this));
          }
        case "execute":
          {
            return yield sqflite_ffi_impl['SqfliteFfiMethodCallHandler|_wrapSqlHandler']($this, sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#handleExecute']($this));
          }
        case "insert":
          {
            return yield sqflite_ffi_impl['SqfliteFfiMethodCallHandler|_wrapSqlHandler']($this, sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#handleInsert']($this));
          }
        case "update":
          {
            return yield sqflite_ffi_impl['SqfliteFfiMethodCallHandler|_wrapSqlHandler']($this, sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#handleUpdate']($this));
          }
        case "batch":
          {
            return yield sqflite_ffi_impl['SqfliteFfiMethodCallHandler|_wrapSqlHandler']($this, sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#handleBatch']($this));
          }
        case "getDatabasesPath":
          {
            return yield sqflite_ffi_impl['SqfliteFfiMethodCallHandler|_wrapGlobalHandler']($this, sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#handleGetDatabasesPath']($this));
          }
        case "deleteDatabase":
          {
            return yield sqflite_ffi_impl['SqfliteFfiMethodCallHandler|_wrapGlobalHandler']($this, sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#handleDeleteDatabase']($this));
          }
        case "databaseExists":
          {
            return yield sqflite_ffi_impl['SqfliteFfiMethodCallHandler|_wrapGlobalHandler']($this, sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#handleDatabaseExists']($this));
          }
        case "options":
          {
            return yield sqflite_ffi_impl['SqfliteFfiMethodCallHandler|_wrapGlobalHandler']($this, sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#handleOptions']($this));
          }
        case "debugMode":
          {
            return yield sqflite_ffi_impl['SqfliteFfiMethodCallHandler|handleDebugMode']($this);
          }
        default:
          {
            dart.throw(new core.ArgumentError.new("Invalid method " + $this.method + " " + dart.str($this)));
          }
      }
    });
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#rawHandle'] = function SqfliteFfiMethodCallHandler$124get$35rawHandle($this) {
    return dart.fn(() => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|rawHandle']($this), T$.VoidToFuture());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getDatabasesPath'] = function SqfliteFfiMethodCallHandler$124getDatabasesPath($this) {
    return sqflite_ffi_impl.sqfliteFfiHandler.getDatabasesPathPlatform();
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#getDatabasesPath'] = function SqfliteFfiMethodCallHandler$124get$35getDatabasesPath($this) {
    return dart.fn(() => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getDatabasesPath']($this), T$.VoidToString());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#argumentsMap'] = function SqfliteFfiMethodCallHandler$124get$35argumentsMap($this) {
    return core.Map.as($this.arguments);
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|handleOpenDatabase'] = function SqfliteFfiMethodCallHandler$124handleOpenDatabase($this) {
    return async.async(core.Map, function* SqfliteFfiMethodCallHandler$124handleOpenDatabase() {
      let t112, t112$;
      let path = core.String.as(sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#argumentsMap']($this)[$_get]("path"));
      function wrapDbId(id) {
        return new (T$.IdentityMapOfString$ObjectN()).from(["id", id]);
      }
      dart.fn(wrapDbId, T$.intToMap());
      let singleInstance = (t112 = T$.boolN().as(sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#argumentsMap']($this)[$_get]("singleInstance")), t112 == null ? false : t112);
      let readOnly = (t112$ = T$.boolN().as(sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#argumentsMap']($this)[$_get]("readOnly")), t112$ == null ? false : t112$);
      if (singleInstance) {
        let database = sqflite_ffi_impl.ffiSingleInstanceDbs[$_get](path);
        if (database != null) {
          if (sqflite_ffi_impl.logLevel >= constant$.sqfliteLogLevelVerbose) {
            database.logResult({result: "Reopening existing single database " + dart.str(database)});
          }
          return wrapDbId(database.id);
        }
      }
      let ffiDb = null;
      try {
        ffiDb = (yield sqflite_ffi_impl.sqfliteFfiHandler.openPlatform(sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#argumentsMap']($this)));
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (exception$.SqliteException.is(e)) {
          dart.throw(sqflite_ffi_impl['SqfliteFfiMethodCallHandler|wrapSqlException']($this, e, {code: "open_failed"}));
        } else
          throw e$;
      }
      let id = sqflite_ffi_impl._lastFfiId = sqflite_ffi_impl._lastFfiId + 1;
      let database = new sqflite_ffi_impl.SqfliteFfiDatabase.new(id, ffiDb, {singleInstance: singleInstance, path: path, readOnly: readOnly, logLevel: sqflite_ffi_impl.logLevel});
      database.logResult({result: "Opening database " + dart.str(database)});
      if (singleInstance) {
        sqflite_ffi_impl.ffiSingleInstanceDbs[$_set](path, database);
      }
      return wrapDbId(id);
    });
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#handleOpenDatabase'] = function SqfliteFfiMethodCallHandler$124get$35handleOpenDatabase($this) {
    return dart.fn(() => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|handleOpenDatabase']($this), T$.VoidToFutureOfMap());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|handleCloseDatabase'] = function SqfliteFfiMethodCallHandler$124handleCloseDatabase($this) {
    return async.async(dart.dynamic, function* SqfliteFfiMethodCallHandler$124handleCloseDatabase() {
      let database = sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getDatabaseOrThrow']($this);
      if (database.singleInstance) {
        sqflite_ffi_impl.ffiSingleInstanceDbs[$remove](database.path);
        database_tracker_web.tracker.markClosed(database[_ffiDb$]);
      }
      database.close();
    });
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#handleCloseDatabase'] = function SqfliteFfiMethodCallHandler$124get$35handleCloseDatabase($this) {
    return dart.fn(() => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|handleCloseDatabase']($this), T$.VoidToFuture());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getDatabaseOrThrow'] = function SqfliteFfiMethodCallHandler$124getDatabaseOrThrow($this) {
    let database = sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getDatabase']($this);
    if (database == null) {
      dart.throw(new core.StateError.new("Database " + dart.str(sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getDatabaseId']($this)) + " not found"));
    }
    return database;
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#getDatabaseOrThrow'] = function SqfliteFfiMethodCallHandler$124get$35getDatabaseOrThrow($this) {
    return dart.fn(() => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getDatabaseOrThrow']($this), T$.VoidToSqfliteFfiDatabase());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#getDatabase'] = function SqfliteFfiMethodCallHandler$124get$35getDatabase($this) {
    return dart.fn(() => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getDatabase']($this), T$.VoidToSqfliteFfiDatabaseN());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getDatabase'] = function SqfliteFfiMethodCallHandler$124getDatabase($this) {
    let id = sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getDatabaseId']($this);
    if (id != null) {
      let database = sqflite_ffi_impl.ffiDbs[$_get](id);
      return database;
    }
    return null;
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getDatabaseId'] = function SqfliteFfiMethodCallHandler$124getDatabaseId($this) {
    if (core.Map.is($this.arguments)) {
      return T$.intN().as(sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#argumentsMap']($this)[$_get]("id"));
    }
    return null;
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#getDatabaseId'] = function SqfliteFfiMethodCallHandler$124get$35getDatabaseId($this) {
    return dart.fn(() => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getDatabaseId']($this), T$.VoidTointN());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|_getParam'] = function SqfliteFfiMethodCallHandler$124_getParam(T, $this, key) {
    if (core.Map.is($this.arguments)) {
      return dart.nullable(T).as(sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#argumentsMap']($this)[$_get](key));
    }
    return null;
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#_getParam'] = function SqfliteFfiMethodCallHandler$124get$35_getParam($this) {
    return dart.fn((T, key) => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|_getParam'](T, $this, key), T$.StringToTN());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getTransactionId'] = function SqfliteFfiMethodCallHandler$124getTransactionId($this) {
    return sqflite_ffi_impl['SqfliteFfiMethodCallHandler|_getParam'](core.int, $this, "transactionId");
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#getTransactionId'] = function SqfliteFfiMethodCallHandler$124get$35getTransactionId($this) {
    return dart.fn(() => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getTransactionId']($this), T$.VoidTointN());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|hasNullTransactionId'] = function SqfliteFfiMethodCallHandler$124hasNullTransactionId($this) {
    if (core.Map.is($this.arguments)) {
      return sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#argumentsMap']($this)[$containsKey]("transactionId") && sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#argumentsMap']($this)[$_get]("transactionId") == null;
    }
    return false;
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#hasNullTransactionId'] = function SqfliteFfiMethodCallHandler$124get$35hasNullTransactionId($this) {
    return dart.fn(() => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|hasNullTransactionId']($this), T$.VoidTobool());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getInTransactionChange'] = function SqfliteFfiMethodCallHandler$124getInTransactionChange($this) {
    return sqflite_ffi_impl['SqfliteFfiMethodCallHandler|_getParam'](core.bool, $this, "inTransaction");
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#getInTransactionChange'] = function SqfliteFfiMethodCallHandler$124get$35getInTransactionChange($this) {
    return dart.fn(() => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getInTransactionChange']($this), T$.VoidToboolN());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getSql'] = function SqfliteFfiMethodCallHandler$124getSql($this) {
    return sqflite_ffi_impl['SqfliteFfiMethodCallHandler|_getParam'](core.String, $this, "sql");
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#getSql'] = function SqfliteFfiMethodCallHandler$124get$35getSql($this) {
    return dart.fn(() => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getSql']($this), T$.VoidToStringN());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|isInMemory'] = function SqfliteFfiMethodCallHandler$124isInMemory($this, path) {
    return path === ":memory:";
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#isInMemory'] = function SqfliteFfiMethodCallHandler$124get$35isInMemory($this) {
    return dart.fn(path => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|isInMemory']($this, path), T$.StringTobool());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getPath'] = function SqfliteFfiMethodCallHandler$124getPath($this) {
    let path = sqflite_ffi_impl['SqfliteFfiMethodCallHandler|_getParam'](core.String, $this, "path");
    if (path != null && !sqflite_ffi_impl['SqfliteFfiMethodCallHandler|isInMemory']($this, path) && path$.isRelative(path)) {
      path = path$.join(sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getDatabasesPath']($this), path);
    }
    return path;
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#getPath'] = function SqfliteFfiMethodCallHandler$124get$35getPath($this) {
    return dart.fn(() => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getPath']($this), T$.VoidToStringN());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getSqlArguments'] = function SqfliteFfiMethodCallHandler$124getSqlArguments($this) {
    let t137;
    let sqlArguments = sqflite_ffi_impl['SqfliteFfiMethodCallHandler|_getParam'](core.List, $this, "arguments");
    if (sqlArguments != null) {
      for (let argument of sqlArguments) {
        if (argument == null) {
        } else if (typeof argument == 'number') {
        } else if (typeof argument == 'string') {
        } else if (typed_data.Uint8List.is(argument)) {
        } else if (core.BigInt.is(argument)) {
        } else {
          dart.throw(new core.ArgumentError.new("Invalid sql argument type '" + dart.str(dart.runtimeType(argument)) + "': " + dart.str(argument)));
        }
      }
    }
    t137 = sqlArguments;
    return t137 == null ? null : t137[$cast](T$.ObjectN());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#getSqlArguments'] = function SqfliteFfiMethodCallHandler$124get$35getSqlArguments($this) {
    return dart.fn(() => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getSqlArguments']($this), T$.VoidToListNOfObjectN());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getNoResult'] = function SqfliteFfiMethodCallHandler$124getNoResult($this) {
    let t139;
    let noResult = T$.boolN().as(sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#argumentsMap']($this)[$_get]("noResult"));
    t139 = noResult;
    return t139 == null ? false : t139;
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#getNoResult'] = function SqfliteFfiMethodCallHandler$124get$35getNoResult($this) {
    return dart.fn(() => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getNoResult']($this), T$.VoidTobool());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getContinueOnError'] = function SqfliteFfiMethodCallHandler$124getContinueOnError($this) {
    let t141;
    let continueOnError = T$.boolN().as(sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#argumentsMap']($this)[$_get]("continueOnError"));
    t141 = continueOnError;
    return t141 == null ? false : t141;
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#getContinueOnError'] = function SqfliteFfiMethodCallHandler$124get$35getContinueOnError($this) {
    return dart.fn(() => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getContinueOnError']($this), T$.VoidTobool());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getOperations'] = function SqfliteFfiMethodCallHandler$124getOperations($this) {
    let operations = T$.JSArrayOfSqfliteFfiOperation().of([]);
    core.List.as(sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#argumentsMap']($this)[$_get]("operations"))[$cast](core.Map)[$forEach](dart.fn(operationArgument => {
      let t144, t143;
      operations[$add]((t143 = new sqflite_ffi_impl.SqfliteFfiOperation.new(), (() => {
        t143.sql = T$.StringN().as(operationArgument[$_get]("sql"));
        t143.sqlArguments = (t144 = T$.ListN().as(operationArgument[$_get]("arguments")), t144 == null ? null : t144[$cast](T$.ObjectN()));
        t143.method = core.String.as(operationArgument[$_get]("method"));
        return t143;
      })()));
    }, T$.MapTovoid()));
    return operations;
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#getOperations'] = function SqfliteFfiMethodCallHandler$124get$35getOperations($this) {
    return dart.fn(() => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getOperations']($this), T$.VoidToListOfSqfliteFfiOperation());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|handleQuery'] = function SqfliteFfiMethodCallHandler$124handleQuery($this, database) {
    return async.async(dart.dynamic, function* SqfliteFfiMethodCallHandler$124handleQuery() {
      let sql = dart.nullCheck(sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getSql']($this));
      let sqlArguments = sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getSqlArguments']($this);
      let pageSize = T$.intN().as(sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#argumentsMap']($this)[$_get]("cursorPageSize"));
      return database.handleQuery({sqlArguments: sqlArguments, sql: sql, pageSize: pageSize});
    });
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#handleQuery'] = function SqfliteFfiMethodCallHandler$124get$35handleQuery($this) {
    return dart.fn(database => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|handleQuery']($this, database), T$.SqfliteFfiDatabaseToFuture());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#handleQueryCursorNext'] = function SqfliteFfiMethodCallHandler$124get$35handleQueryCursorNext($this) {
    return dart.fn(database => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|handleQueryCursorNext']($this, database), T$.SqfliteFfiDatabaseToFuture());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|handleQueryCursorNext'] = function SqfliteFfiMethodCallHandler$124handleQueryCursorNext($this, database) {
    return async.async(dart.dynamic, function* SqfliteFfiMethodCallHandler$124handleQueryCursorNext() {
      {
        let database = sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getDatabaseOrThrow']($this);
        let cursorId = core.int.as(sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#argumentsMap']($this)[$_get]("cursorId"));
        let cancel = T$.boolN().as(sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#argumentsMap']($this)[$_get]("cancel"));
        return database.handleQueryCursorNext({cursorId: cursorId, cancel: cancel});
      }
    });
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|wrapSqlException'] = function SqfliteFfiMethodCallHandler$124wrapSqlException($this, e, opts) {
    let code = opts && 'code' in opts ? opts.code : null;
    let details = opts && 'details' in opts ? opts.details : null;
    return new sqflite_ffi_exception.SqfliteFfiException.new({code: "sqlite_error", message: code == null ? dart.str(e) : dart.str(code) + ": " + dart.str(e), details: details, resultCode: e.extendedResultCode});
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#wrapSqlException'] = function SqfliteFfiMethodCallHandler$124get$35wrapSqlException($this) {
    return dart.fn((e, opts) => {
      let code = opts && 'code' in opts ? opts.code : null;
      let details = opts && 'details' in opts ? opts.details : null;
      return sqflite_ffi_impl['SqfliteFfiMethodCallHandler|wrapSqlException']($this, e, {code: code, details: details});
    }, T$.SqliteException__ToSqfliteFfiException());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|_handleExecute'] = function SqfliteFfiMethodCallHandler$124_handleExecute($this, database) {
    return async.async(T$.ObjectN(), function* SqfliteFfiMethodCallHandler$124_handleExecute() {
      {
        let database = sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getDatabaseOrThrow']($this);
        let sql = dart.nullCheck(sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getSql']($this));
        let sqlArguments = sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getSqlArguments']($this);
        yield database.handleExecute({sql: sql, sqlArguments: sqlArguments});
        return null;
      }
    });
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#_handleExecute'] = function SqfliteFfiMethodCallHandler$124get$35_handleExecute($this) {
    return dart.fn(database => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|_handleExecute']($this, database), T$.SqfliteFfiDatabaseToFutureOfObjectN());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|handleExecute'] = function SqfliteFfiMethodCallHandler$124handleExecute($this, database) {
    return async.async(T$.ObjectN(), function* SqfliteFfiMethodCallHandler$124handleExecute() {
      let t153;
      let inTransactionChange = sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getInTransactionChange']($this);
      let enteringTransaction = inTransactionChange === true && sqflite_ffi_impl['SqfliteFfiMethodCallHandler|hasNullTransactionId']($this);
      if (enteringTransaction) {
        database[_currentTransactionId] = (t153 = database, t153[_lastTransactionId] = t153[_lastTransactionId] + 1);
      }
      try {
        yield sqflite_ffi_impl['SqfliteFfiMethodCallHandler|_handleExecute']($this, database);
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
          if (enteringTransaction) {
            database[_currentTransactionId] = null;
          }
          dart.rethrow(e$);
        } else
          throw e$;
      }
      if (enteringTransaction) {
        return new (T$.IdentityMapOfString$ObjectN()).from(["transactionId", database[_currentTransactionId]]);
      } else if (inTransactionChange === false) {
        database[_currentTransactionId] = null;
      }
      return null;
    });
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#handleExecute'] = function SqfliteFfiMethodCallHandler$124get$35handleExecute($this) {
    return dart.fn(database => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|handleExecute']($this, database), T$.SqfliteFfiDatabaseToFutureOfObjectN());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|handleOptions'] = function SqfliteFfiMethodCallHandler$124handleOptions($this) {
    return async.async(dart.dynamic, function* SqfliteFfiMethodCallHandler$124handleOptions() {
      let t156;
      if (core.Map.is($this.arguments)) {
        if (sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#argumentsMap']($this)[$containsKey]("logLevel")) {
          sqflite_ffi_impl.logLevel = (t156 = T$.intN().as(sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#argumentsMap']($this)[$_get]("logLevel")), t156 == null ? constant$.sqfliteLogLevelNone : t156);
        }
        yield sqflite_ffi_impl.sqfliteFfiHandler.handleOptionsPlatform(sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#argumentsMap']($this));
      }
      return null;
    });
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#handleOptions'] = function SqfliteFfiMethodCallHandler$124get$35handleOptions($this) {
    return dart.fn(() => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|handleOptions']($this), T$.VoidToFuture());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|handleDebugMode'] = function SqfliteFfiMethodCallHandler$124handleDebugMode($this) {
    return async.async(dart.dynamic, function* SqfliteFfiMethodCallHandler$124handleDebugMode() {
      if (dart.equals($this.arguments, true)) {
        sqflite_ffi_impl.logLevel = constant$.sqfliteLogLevelVerbose;
      }
      return null;
    });
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#handleDebugMode'] = function SqfliteFfiMethodCallHandler$124get$35handleDebugMode($this) {
    return dart.fn(() => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|handleDebugMode']($this), T$.VoidToFuture());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|handleInsert'] = function SqfliteFfiMethodCallHandler$124handleInsert($this, database) {
    return async.async(T$.intN(), function* SqfliteFfiMethodCallHandler$124handleInsert() {
      let sql = dart.nullCheck(sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getSql']($this));
      let sqlArguments = sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getSqlArguments']($this);
      return database.handleInsert({sql: sql, sqlArguments: sqlArguments});
    });
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#handleInsert'] = function SqfliteFfiMethodCallHandler$124get$35handleInsert($this) {
    return dart.fn(database => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|handleInsert']($this, database), T$.SqfliteFfiDatabaseToFutureOfintN());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|handleUpdate'] = function SqfliteFfiMethodCallHandler$124handleUpdate($this, database) {
    return async.async(core.int, function* SqfliteFfiMethodCallHandler$124handleUpdate() {
      let sql = dart.nullCheck(sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getSql']($this));
      let sqlArguments = sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getSqlArguments']($this);
      return database.handleUpdate({sql: sql, sqlArguments: sqlArguments});
    });
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#handleUpdate'] = function SqfliteFfiMethodCallHandler$124get$35handleUpdate($this) {
    return dart.fn(database => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|handleUpdate']($this, database), T$.SqfliteFfiDatabaseToFutureOfint());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|handleBatch'] = function SqfliteFfiMethodCallHandler$124handleBatch($this, database) {
    let operations = sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getOperations']($this);
    let noResult = sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getNoResult']($this);
    let continueOnError = sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getContinueOnError']($this);
    return database.handleBatch({operations: operations, noResult: noResult, continueOnError: continueOnError});
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#handleBatch'] = function SqfliteFfiMethodCallHandler$124get$35handleBatch($this) {
    return dart.fn(database => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|handleBatch']($this, database), T$.SqfliteFfiDatabaseToFuture());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|handleGetDatabasesPath'] = function SqfliteFfiMethodCallHandler$124handleGetDatabasesPath($this) {
    return async.async(dart.dynamic, function* SqfliteFfiMethodCallHandler$124handleGetDatabasesPath() {
      return sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getDatabasesPath']($this);
    });
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#handleGetDatabasesPath'] = function SqfliteFfiMethodCallHandler$124get$35handleGetDatabasesPath($this) {
    return dart.fn(() => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|handleGetDatabasesPath']($this), T$.VoidToFuture());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|handleDeleteDatabase'] = function SqfliteFfiMethodCallHandler$124handleDeleteDatabase($this) {
    return async.async(dart.void, function* SqfliteFfiMethodCallHandler$124handleDeleteDatabase() {
      let path = sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getPath']($this);
      let singleInstanceDatabase = sqflite_ffi_impl.ffiSingleInstanceDbs[$_get](path);
      if (singleInstanceDatabase != null) {
        singleInstanceDatabase.close();
        sqflite_ffi_impl.ffiSingleInstanceDbs[$remove](path);
      }
      try {
        yield sqflite_ffi_impl.sqfliteFfiHandler.deleteDatabasePlatform(dart.nullCheck(path));
      } catch (e) {
        let _ = dart.getThrown(e);
        if (core.Object.is(_)) {
        } else
          throw e;
      }
    });
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#handleDeleteDatabase'] = function SqfliteFfiMethodCallHandler$124get$35handleDeleteDatabase($this) {
    return dart.fn(() => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|handleDeleteDatabase']($this), T$.VoidToFutureOfvoid());
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|handleDatabaseExists'] = function SqfliteFfiMethodCallHandler$124handleDatabaseExists($this) {
    return async.async(core.bool, function* SqfliteFfiMethodCallHandler$124handleDatabaseExists() {
      let path = sqflite_ffi_impl['SqfliteFfiMethodCallHandler|getPath']($this);
      return sqflite_ffi_impl.sqfliteFfiHandler.handleDatabaseExistsPlatform(dart.nullCheck(path));
    });
  };
  sqflite_ffi_impl['SqfliteFfiMethodCallHandler|get#handleDatabaseExists'] = function SqfliteFfiMethodCallHandler$124get$35handleDatabaseExists($this) {
    return dart.fn(() => sqflite_ffi_impl['SqfliteFfiMethodCallHandler|handleDatabaseExists']($this), T$.VoidToFutureOfbool());
  };
  sqflite_ffi_impl.packResult = function packResult(result) {
    let columns = result.columnNames;
    let rows = result.rows;
    return sqflite_ffi_impl.packColumnsRowsResult(columns, rows);
  };
  sqflite_ffi_impl.packColumnsRowsResult = function packColumnsRowsResult(columns, rows) {
    return new (T$.IdentityMapOfString$ObjectN()).from(["columns", columns, "rows", rows]);
  };
  dart.copyProperties(sqflite_ffi_impl, {
    get sqfliteFfiHandler() {
      let t172;
      t172 = sqflite_ffi_impl._sqfliteFfiHandler;
      return t172 == null ? sqflite_ffi_impl._sqfliteFfiHandler = sqflite_ffi_impl_web.sqfliteFfiHandlerIo : t172;
    },
    set sqfliteFfiHandler(handler) {
      return sqflite_ffi_impl._sqfliteFfiHandler = handler;
    }
  });
  dart.defineLazy(sqflite_ffi_impl, {
    /*sqflite_ffi_impl._debug*/get _debug() {
      return false;
    },
    /*sqflite_ffi_impl._globalHandlerLock*/get _globalHandlerLock() {
      return synchronized.Lock.new();
    },
    /*sqflite_ffi_impl.ffiDbs*/get ffiDbs() {
      return new (T$.IdentityMapOfint$SqfliteFfiDatabase()).new();
    },
    set ffiDbs(value) {},
    /*sqflite_ffi_impl.ffiSingleInstanceDbs*/get ffiSingleInstanceDbs() {
      return new (T$.IdentityMapOfStringN$SqfliteFfiDatabase()).new();
    },
    set ffiSingleInstanceDbs(value) {},
    /*sqflite_ffi_impl._lastFfiId*/get _lastFfiId() {
      return 0;
    },
    set _lastFfiId(value) {},
    /*sqflite_ffi_impl.logLevel*/get logLevel() {
      return constant$.sqfliteLogLevelNone;
    },
    set logLevel(value) {},
    /*sqflite_ffi_impl._sqfliteFfiHandler*/get _sqfliteFfiHandler() {
      return null;
    },
    set _sqfliteFfiHandler(value) {}
  }, false);
  database_tracker_web.DatabaseTracker = class DatabaseTracker extends core.Object {
    markOpened(_) {
    }
    markClosed(_) {
    }
    static ['_#new#tearOff']() {
      return new database_tracker_web.DatabaseTracker.new();
    }
  };
  (database_tracker_web.DatabaseTracker.new = function() {
    ;
  }).prototype = database_tracker_web.DatabaseTracker.prototype;
  dart.addTypeTests(database_tracker_web.DatabaseTracker);
  dart.addTypeCaches(database_tracker_web.DatabaseTracker);
  dart.setMethodSignature(database_tracker_web.DatabaseTracker, () => ({
    __proto__: dart.getMethods(database_tracker_web.DatabaseTracker.__proto__),
    markOpened: dart.fnType(dart.void, [database.CommonDatabase]),
    markClosed: dart.fnType(dart.void, [database.CommonDatabase])
  }));
  dart.setLibraryUri(database_tracker_web.DatabaseTracker, I[28]);
  dart.copyProperties(database_tracker_web, {
    get tracker() {
      let t172;
      t172 = database_tracker_web._tracker;
      return t172 == null ? database_tracker_web._tracker = new database_tracker_web.DatabaseTracker.new() : t172;
    }
  });
  dart.defineLazy(database_tracker_web, {
    /*database_tracker_web._tracker*/get _tracker() {
      return null;
    },
    set _tracker(value) {}
  }, false);
  dart.copyProperties(sqflite_ffi_impl_web, {
    get sqfliteFfiHandlerIo() {
      return dart.throw(new core.UnsupportedError.new("sqfliteFfiHandlerIo Web not supported"));
    }
  });
  constants.SqlError = class SqlError extends core.Object {
    static ['_#new#tearOff']() {
      return new constants.SqlError.new();
    }
  };
  (constants.SqlError.new = function() {
    ;
  }).prototype = constants.SqlError.prototype;
  dart.addTypeTests(constants.SqlError);
  dart.addTypeCaches(constants.SqlError);
  dart.setLibraryUri(constants.SqlError, I[29]);
  dart.setStaticFieldSignature(constants.SqlError, () => ['SQLITE_OK', 'SQLITE_ERROR', 'SQLITE_INTERNAL', 'SQLITE_PERM', 'SQLITE_ABORT', 'SQLITE_BUSY', 'SQLITE_LOCKED', 'SQLITE_NOMEM', 'SQLITE_READONLY', 'SQLITE_INTERRUPT', 'SQLITE_IOERR', 'SQLITE_CORRUPT', 'SQLITE_NOTFOUND', 'SQLITE_FULL', 'SQLITE_CANTOPEN', 'SQLITE_PROTOCOL', 'SQLITE_EMPTY', 'SQLITE_SCHEMA', 'SQLITE_TOOBIG', 'SQLITE_CONSTRAINT', 'SQLITE_MISMATCH', 'SQLITE_MISUSE', 'SQLITE_NOLFS', 'SQLITE_AUTH', 'SQLITE_FORMAT', 'SQLITE_RANGE', 'SQLITE_NOTADB', 'SQLITE_NOTICE', 'SQLITE_WARNING', 'SQLITE_ROW', 'SQLITE_DONE']);
  dart.defineLazy(constants.SqlError, {
    /*constants.SqlError.SQLITE_OK*/get SQLITE_OK() {
      return 0;
    },
    /*constants.SqlError.SQLITE_ERROR*/get SQLITE_ERROR() {
      return 1;
    },
    /*constants.SqlError.SQLITE_INTERNAL*/get SQLITE_INTERNAL() {
      return 2;
    },
    /*constants.SqlError.SQLITE_PERM*/get SQLITE_PERM() {
      return 3;
    },
    /*constants.SqlError.SQLITE_ABORT*/get SQLITE_ABORT() {
      return 4;
    },
    /*constants.SqlError.SQLITE_BUSY*/get SQLITE_BUSY() {
      return 5;
    },
    /*constants.SqlError.SQLITE_LOCKED*/get SQLITE_LOCKED() {
      return 6;
    },
    /*constants.SqlError.SQLITE_NOMEM*/get SQLITE_NOMEM() {
      return 7;
    },
    /*constants.SqlError.SQLITE_READONLY*/get SQLITE_READONLY() {
      return 8;
    },
    /*constants.SqlError.SQLITE_INTERRUPT*/get SQLITE_INTERRUPT() {
      return 9;
    },
    /*constants.SqlError.SQLITE_IOERR*/get SQLITE_IOERR() {
      return 10;
    },
    /*constants.SqlError.SQLITE_CORRUPT*/get SQLITE_CORRUPT() {
      return 11;
    },
    /*constants.SqlError.SQLITE_NOTFOUND*/get SQLITE_NOTFOUND() {
      return 12;
    },
    /*constants.SqlError.SQLITE_FULL*/get SQLITE_FULL() {
      return 13;
    },
    /*constants.SqlError.SQLITE_CANTOPEN*/get SQLITE_CANTOPEN() {
      return 14;
    },
    /*constants.SqlError.SQLITE_PROTOCOL*/get SQLITE_PROTOCOL() {
      return 15;
    },
    /*constants.SqlError.SQLITE_EMPTY*/get SQLITE_EMPTY() {
      return 16;
    },
    /*constants.SqlError.SQLITE_SCHEMA*/get SQLITE_SCHEMA() {
      return 17;
    },
    /*constants.SqlError.SQLITE_TOOBIG*/get SQLITE_TOOBIG() {
      return 18;
    },
    /*constants.SqlError.SQLITE_CONSTRAINT*/get SQLITE_CONSTRAINT() {
      return 19;
    },
    /*constants.SqlError.SQLITE_MISMATCH*/get SQLITE_MISMATCH() {
      return 20;
    },
    /*constants.SqlError.SQLITE_MISUSE*/get SQLITE_MISUSE() {
      return 21;
    },
    /*constants.SqlError.SQLITE_NOLFS*/get SQLITE_NOLFS() {
      return 22;
    },
    /*constants.SqlError.SQLITE_AUTH*/get SQLITE_AUTH() {
      return 23;
    },
    /*constants.SqlError.SQLITE_FORMAT*/get SQLITE_FORMAT() {
      return 24;
    },
    /*constants.SqlError.SQLITE_RANGE*/get SQLITE_RANGE() {
      return 25;
    },
    /*constants.SqlError.SQLITE_NOTADB*/get SQLITE_NOTADB() {
      return 26;
    },
    /*constants.SqlError.SQLITE_NOTICE*/get SQLITE_NOTICE() {
      return 27;
    },
    /*constants.SqlError.SQLITE_WARNING*/get SQLITE_WARNING() {
      return 28;
    },
    /*constants.SqlError.SQLITE_ROW*/get SQLITE_ROW() {
      return 100;
    },
    /*constants.SqlError.SQLITE_DONE*/get SQLITE_DONE() {
      return 101;
    }
  }, false);
  constants.SqlExtendedError = class SqlExtendedError extends core.Object {
    static ['_#new#tearOff']() {
      return new constants.SqlExtendedError.new();
    }
  };
  (constants.SqlExtendedError.new = function() {
    ;
  }).prototype = constants.SqlExtendedError.prototype;
  dart.addTypeTests(constants.SqlExtendedError);
  dart.addTypeCaches(constants.SqlExtendedError);
  dart.setLibraryUri(constants.SqlExtendedError, I[29]);
  dart.setStaticFieldSignature(constants.SqlExtendedError, () => ['SQLITE_OK_LOAD_PERMANENTLY', 'SQLITE_ERROR_MISSING_COLLSEQ', 'SQLITE_BUSY_RECOVERY', 'SQLITE_LOCKED_SHAREDCACHE', 'SQLITE_READONLY_RECOVERY', 'SQLITE_IOERR_READ', 'SQLITE_CORRUPT_VTAB', 'SQLITE_CANTOPEN_NOTEMPDIR', 'SQLITE_CONSTRAINT_CHECK', 'SQLITE_NOTICE_RECOVER_WAL', 'SQLITE_WARNING_AUTOINDEX', 'SQLITE_ERROR_RETRY', 'SQLITE_ABORT_ROLLBACK', 'SQLITE_BUSY_SNAPSHOT', 'SQLITE_LOCKED_VTAB', 'SQLITE_READONLY_CANTLOCK', 'SQLITE_IOERR_SHORT_READ', 'SQLITE_CORRUPT_SEQUENCE', 'SQLITE_CANTOPEN_ISDIR', 'SQLITE_CONSTRAINT_COMMITHOOK', 'SQLITE_NOTICE_RECOVER_ROLLBACK', 'SQLITE_ERROR_SNAPSHOT', 'SQLITE_BUSY_TIMEOUT', 'SQLITE_READONLY_ROLLBACK', 'SQLITE_IOERR_WRITE', 'SQLITE_CORRUPT_INDEX', 'SQLITE_CANTOPEN_FULLPATH', 'SQLITE_CONSTRAINT_FOREIGNKEY', 'SQLITE_READONLY_DBMOVED', 'SQLITE_IOERR_FSYNC', 'SQLITE_CANTOPEN_CONVPATH', 'SQLITE_CONSTRAINT_FUNCTION', 'SQLITE_READONLY_CANTINIT', 'SQLITE_IOERR_DIR_FSYNC', 'SQLITE_CANTOPEN_DIRTYWAL', 'SQLITE_CONSTRAINT_NOTNULL', 'SQLITE_READONLY_DIRECTORY', 'SQLITE_IOERR_TRUNCATE', 'SQLITE_CANTOPEN_SYMLINK', 'SQLITE_CONSTRAINT_PRIMARYKEY', 'SQLITE_IOERR_FSTAT', 'SQLITE_CONSTRAINT_TRIGGER', 'SQLITE_IOERR_UNLOCK', 'SQLITE_CONSTRAINT_UNIQUE', 'SQLITE_IOERR_RDLOCK', 'SQLITE_CONSTRAINT_VTAB', 'SQLITE_IOERR_DELETE', 'SQLITE_CONSTRAINT_ROWID', 'SQLITE_IOERR_BLOCKED', 'SQLITE_CONSTRAINT_PINNED', 'SQLITE_IOERR_NOMEM', 'SQLITE_IOERR_ACCESS', 'SQLITE_IOERR_CHECKRESERVEDLOCK', 'SQLITE_IOERR_LOCK', 'SQLITE_IOERR_CLOSE', 'SQLITE_IOERR_DIR_CLOSE', 'SQLITE_IOERR_SHMOPEN', 'SQLITE_IOERR_SHMSIZE', 'SQLITE_IOERR_SHMLOCK', 'SQLITE_IOERR_SHMMAP', 'SQLITE_IOERR_SEEK', 'SQLITE_IOERR_DELETE_NOENT', 'SQLITE_IOERR_MMAP', 'SQLITE_IOERR_GETTEMPPATH', 'SQLITE_IOERR_CONVPATH', 'SQLITE_IOERR_VNODE', 'SQLITE_IOERR_AUTH', 'SQLITE_IOERR_BEGIN_ATOMIC', 'SQLITE_IOERR_COMMIT_ATOMIC', 'SQLITE_IOERR_ROLLBACK_ATOMIC', 'SQLITE_IOERR_DATA']);
  dart.defineLazy(constants.SqlExtendedError, {
    /*constants.SqlExtendedError.SQLITE_OK_LOAD_PERMANENTLY*/get SQLITE_OK_LOAD_PERMANENTLY() {
      return 256;
    },
    /*constants.SqlExtendedError.SQLITE_ERROR_MISSING_COLLSEQ*/get SQLITE_ERROR_MISSING_COLLSEQ() {
      return 257;
    },
    /*constants.SqlExtendedError.SQLITE_BUSY_RECOVERY*/get SQLITE_BUSY_RECOVERY() {
      return 261;
    },
    /*constants.SqlExtendedError.SQLITE_LOCKED_SHAREDCACHE*/get SQLITE_LOCKED_SHAREDCACHE() {
      return 262;
    },
    /*constants.SqlExtendedError.SQLITE_READONLY_RECOVERY*/get SQLITE_READONLY_RECOVERY() {
      return 264;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_READ*/get SQLITE_IOERR_READ() {
      return 266;
    },
    /*constants.SqlExtendedError.SQLITE_CORRUPT_VTAB*/get SQLITE_CORRUPT_VTAB() {
      return 267;
    },
    /*constants.SqlExtendedError.SQLITE_CANTOPEN_NOTEMPDIR*/get SQLITE_CANTOPEN_NOTEMPDIR() {
      return 270;
    },
    /*constants.SqlExtendedError.SQLITE_CONSTRAINT_CHECK*/get SQLITE_CONSTRAINT_CHECK() {
      return 275;
    },
    /*constants.SqlExtendedError.SQLITE_NOTICE_RECOVER_WAL*/get SQLITE_NOTICE_RECOVER_WAL() {
      return 283;
    },
    /*constants.SqlExtendedError.SQLITE_WARNING_AUTOINDEX*/get SQLITE_WARNING_AUTOINDEX() {
      return 284;
    },
    /*constants.SqlExtendedError.SQLITE_ERROR_RETRY*/get SQLITE_ERROR_RETRY() {
      return 513;
    },
    /*constants.SqlExtendedError.SQLITE_ABORT_ROLLBACK*/get SQLITE_ABORT_ROLLBACK() {
      return 516;
    },
    /*constants.SqlExtendedError.SQLITE_BUSY_SNAPSHOT*/get SQLITE_BUSY_SNAPSHOT() {
      return 517;
    },
    /*constants.SqlExtendedError.SQLITE_LOCKED_VTAB*/get SQLITE_LOCKED_VTAB() {
      return 518;
    },
    /*constants.SqlExtendedError.SQLITE_READONLY_CANTLOCK*/get SQLITE_READONLY_CANTLOCK() {
      return 520;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_SHORT_READ*/get SQLITE_IOERR_SHORT_READ() {
      return 522;
    },
    /*constants.SqlExtendedError.SQLITE_CORRUPT_SEQUENCE*/get SQLITE_CORRUPT_SEQUENCE() {
      return 523;
    },
    /*constants.SqlExtendedError.SQLITE_CANTOPEN_ISDIR*/get SQLITE_CANTOPEN_ISDIR() {
      return 526;
    },
    /*constants.SqlExtendedError.SQLITE_CONSTRAINT_COMMITHOOK*/get SQLITE_CONSTRAINT_COMMITHOOK() {
      return 531;
    },
    /*constants.SqlExtendedError.SQLITE_NOTICE_RECOVER_ROLLBACK*/get SQLITE_NOTICE_RECOVER_ROLLBACK() {
      return 539;
    },
    /*constants.SqlExtendedError.SQLITE_ERROR_SNAPSHOT*/get SQLITE_ERROR_SNAPSHOT() {
      return 769;
    },
    /*constants.SqlExtendedError.SQLITE_BUSY_TIMEOUT*/get SQLITE_BUSY_TIMEOUT() {
      return 773;
    },
    /*constants.SqlExtendedError.SQLITE_READONLY_ROLLBACK*/get SQLITE_READONLY_ROLLBACK() {
      return 776;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_WRITE*/get SQLITE_IOERR_WRITE() {
      return 778;
    },
    /*constants.SqlExtendedError.SQLITE_CORRUPT_INDEX*/get SQLITE_CORRUPT_INDEX() {
      return 779;
    },
    /*constants.SqlExtendedError.SQLITE_CANTOPEN_FULLPATH*/get SQLITE_CANTOPEN_FULLPATH() {
      return 782;
    },
    /*constants.SqlExtendedError.SQLITE_CONSTRAINT_FOREIGNKEY*/get SQLITE_CONSTRAINT_FOREIGNKEY() {
      return 787;
    },
    /*constants.SqlExtendedError.SQLITE_READONLY_DBMOVED*/get SQLITE_READONLY_DBMOVED() {
      return 1032;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_FSYNC*/get SQLITE_IOERR_FSYNC() {
      return 1034;
    },
    /*constants.SqlExtendedError.SQLITE_CANTOPEN_CONVPATH*/get SQLITE_CANTOPEN_CONVPATH() {
      return 1038;
    },
    /*constants.SqlExtendedError.SQLITE_CONSTRAINT_FUNCTION*/get SQLITE_CONSTRAINT_FUNCTION() {
      return 1043;
    },
    /*constants.SqlExtendedError.SQLITE_READONLY_CANTINIT*/get SQLITE_READONLY_CANTINIT() {
      return 1288;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_DIR_FSYNC*/get SQLITE_IOERR_DIR_FSYNC() {
      return 1290;
    },
    /*constants.SqlExtendedError.SQLITE_CANTOPEN_DIRTYWAL*/get SQLITE_CANTOPEN_DIRTYWAL() {
      return 1294;
    },
    /*constants.SqlExtendedError.SQLITE_CONSTRAINT_NOTNULL*/get SQLITE_CONSTRAINT_NOTNULL() {
      return 1299;
    },
    /*constants.SqlExtendedError.SQLITE_READONLY_DIRECTORY*/get SQLITE_READONLY_DIRECTORY() {
      return 1544;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_TRUNCATE*/get SQLITE_IOERR_TRUNCATE() {
      return 1546;
    },
    /*constants.SqlExtendedError.SQLITE_CANTOPEN_SYMLINK*/get SQLITE_CANTOPEN_SYMLINK() {
      return 1550;
    },
    /*constants.SqlExtendedError.SQLITE_CONSTRAINT_PRIMARYKEY*/get SQLITE_CONSTRAINT_PRIMARYKEY() {
      return 1555;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_FSTAT*/get SQLITE_IOERR_FSTAT() {
      return 1802;
    },
    /*constants.SqlExtendedError.SQLITE_CONSTRAINT_TRIGGER*/get SQLITE_CONSTRAINT_TRIGGER() {
      return 1811;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_UNLOCK*/get SQLITE_IOERR_UNLOCK() {
      return 2058;
    },
    /*constants.SqlExtendedError.SQLITE_CONSTRAINT_UNIQUE*/get SQLITE_CONSTRAINT_UNIQUE() {
      return 2067;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_RDLOCK*/get SQLITE_IOERR_RDLOCK() {
      return 2314;
    },
    /*constants.SqlExtendedError.SQLITE_CONSTRAINT_VTAB*/get SQLITE_CONSTRAINT_VTAB() {
      return 2323;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_DELETE*/get SQLITE_IOERR_DELETE() {
      return 2570;
    },
    /*constants.SqlExtendedError.SQLITE_CONSTRAINT_ROWID*/get SQLITE_CONSTRAINT_ROWID() {
      return 2579;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_BLOCKED*/get SQLITE_IOERR_BLOCKED() {
      return 2826;
    },
    /*constants.SqlExtendedError.SQLITE_CONSTRAINT_PINNED*/get SQLITE_CONSTRAINT_PINNED() {
      return 2835;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_NOMEM*/get SQLITE_IOERR_NOMEM() {
      return 3082;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_ACCESS*/get SQLITE_IOERR_ACCESS() {
      return 3338;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_CHECKRESERVEDLOCK*/get SQLITE_IOERR_CHECKRESERVEDLOCK() {
      return 3594;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_LOCK*/get SQLITE_IOERR_LOCK() {
      return 3850;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_CLOSE*/get SQLITE_IOERR_CLOSE() {
      return 4106;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_DIR_CLOSE*/get SQLITE_IOERR_DIR_CLOSE() {
      return 4362;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_SHMOPEN*/get SQLITE_IOERR_SHMOPEN() {
      return 4618;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_SHMSIZE*/get SQLITE_IOERR_SHMSIZE() {
      return 4874;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_SHMLOCK*/get SQLITE_IOERR_SHMLOCK() {
      return 5310;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_SHMMAP*/get SQLITE_IOERR_SHMMAP() {
      return 5386;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_SEEK*/get SQLITE_IOERR_SEEK() {
      return 5642;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_DELETE_NOENT*/get SQLITE_IOERR_DELETE_NOENT() {
      return 5898;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_MMAP*/get SQLITE_IOERR_MMAP() {
      return 6154;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_GETTEMPPATH*/get SQLITE_IOERR_GETTEMPPATH() {
      return 6410;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_CONVPATH*/get SQLITE_IOERR_CONVPATH() {
      return 6666;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_VNODE*/get SQLITE_IOERR_VNODE() {
      return 6922;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_AUTH*/get SQLITE_IOERR_AUTH() {
      return 7178;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_BEGIN_ATOMIC*/get SQLITE_IOERR_BEGIN_ATOMIC() {
      return 7434;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_COMMIT_ATOMIC*/get SQLITE_IOERR_COMMIT_ATOMIC() {
      return 7690;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_ROLLBACK_ATOMIC*/get SQLITE_IOERR_ROLLBACK_ATOMIC() {
      return 7946;
    },
    /*constants.SqlExtendedError.SQLITE_IOERR_DATA*/get SQLITE_IOERR_DATA() {
      return 8202;
    }
  }, false);
  constants.SqlFlag = class SqlFlag extends core.Object {
    static ['_#new#tearOff']() {
      return new constants.SqlFlag.new();
    }
  };
  (constants.SqlFlag.new = function() {
    ;
  }).prototype = constants.SqlFlag.prototype;
  dart.addTypeTests(constants.SqlFlag);
  dart.addTypeCaches(constants.SqlFlag);
  dart.setLibraryUri(constants.SqlFlag, I[29]);
  dart.setStaticFieldSignature(constants.SqlFlag, () => ['SQLITE_OPEN_READONLY', 'SQLITE_OPEN_READWRITE', 'SQLITE_OPEN_CREATE', 'SQLITE_OPEN_DELETEONCLOSE', 'SQLITE_OPEN_EXCLUSIVE', 'SQLITE_OPEN_AUTOPROXY', 'SQLITE_OPEN_URI', 'SQLITE_OPEN_MEMORY', 'SQLITE_OPEN_MAIN_DB', 'SQLITE_OPEN_TEMP_DB', 'SQLITE_OPEN_TRANSIENT_DB', 'SQLITE_OPEN_MAIN_JOURNAL', 'SQLITE_OPEN_TEMP_JOURNAL', 'SQLITE_OPEN_SUBJOURNAL', 'SQLITE_OPEN_MASTER_JOURNAL', 'SQLITE_OPEN_NOMUTEX', 'SQLITE_OPEN_FULLMUTEX', 'SQLITE_OPEN_SHAREDCACHE', 'SQLITE_OPEN_PRIVATECACHE', 'SQLITE_OPEN_WAL']);
  dart.defineLazy(constants.SqlFlag, {
    /*constants.SqlFlag.SQLITE_OPEN_READONLY*/get SQLITE_OPEN_READONLY() {
      return 1;
    },
    /*constants.SqlFlag.SQLITE_OPEN_READWRITE*/get SQLITE_OPEN_READWRITE() {
      return 2;
    },
    /*constants.SqlFlag.SQLITE_OPEN_CREATE*/get SQLITE_OPEN_CREATE() {
      return 4;
    },
    /*constants.SqlFlag.SQLITE_OPEN_DELETEONCLOSE*/get SQLITE_OPEN_DELETEONCLOSE() {
      return 8;
    },
    /*constants.SqlFlag.SQLITE_OPEN_EXCLUSIVE*/get SQLITE_OPEN_EXCLUSIVE() {
      return 16;
    },
    /*constants.SqlFlag.SQLITE_OPEN_AUTOPROXY*/get SQLITE_OPEN_AUTOPROXY() {
      return 32;
    },
    /*constants.SqlFlag.SQLITE_OPEN_URI*/get SQLITE_OPEN_URI() {
      return 64;
    },
    /*constants.SqlFlag.SQLITE_OPEN_MEMORY*/get SQLITE_OPEN_MEMORY() {
      return 128;
    },
    /*constants.SqlFlag.SQLITE_OPEN_MAIN_DB*/get SQLITE_OPEN_MAIN_DB() {
      return 256;
    },
    /*constants.SqlFlag.SQLITE_OPEN_TEMP_DB*/get SQLITE_OPEN_TEMP_DB() {
      return 512;
    },
    /*constants.SqlFlag.SQLITE_OPEN_TRANSIENT_DB*/get SQLITE_OPEN_TRANSIENT_DB() {
      return 1024;
    },
    /*constants.SqlFlag.SQLITE_OPEN_MAIN_JOURNAL*/get SQLITE_OPEN_MAIN_JOURNAL() {
      return 2048;
    },
    /*constants.SqlFlag.SQLITE_OPEN_TEMP_JOURNAL*/get SQLITE_OPEN_TEMP_JOURNAL() {
      return 4096;
    },
    /*constants.SqlFlag.SQLITE_OPEN_SUBJOURNAL*/get SQLITE_OPEN_SUBJOURNAL() {
      return 8192;
    },
    /*constants.SqlFlag.SQLITE_OPEN_MASTER_JOURNAL*/get SQLITE_OPEN_MASTER_JOURNAL() {
      return 16384;
    },
    /*constants.SqlFlag.SQLITE_OPEN_NOMUTEX*/get SQLITE_OPEN_NOMUTEX() {
      return 32768;
    },
    /*constants.SqlFlag.SQLITE_OPEN_FULLMUTEX*/get SQLITE_OPEN_FULLMUTEX() {
      return 65536;
    },
    /*constants.SqlFlag.SQLITE_OPEN_SHAREDCACHE*/get SQLITE_OPEN_SHAREDCACHE() {
      return 131072;
    },
    /*constants.SqlFlag.SQLITE_OPEN_PRIVATECACHE*/get SQLITE_OPEN_PRIVATECACHE() {
      return 262144;
    },
    /*constants.SqlFlag.SQLITE_OPEN_WAL*/get SQLITE_OPEN_WAL() {
      return 524288;
    }
  }, false);
  constants.SqlPrepareFlag = class SqlPrepareFlag extends core.Object {
    static ['_#new#tearOff']() {
      return new constants.SqlPrepareFlag.new();
    }
  };
  (constants.SqlPrepareFlag.new = function() {
    ;
  }).prototype = constants.SqlPrepareFlag.prototype;
  dart.addTypeTests(constants.SqlPrepareFlag);
  dart.addTypeCaches(constants.SqlPrepareFlag);
  dart.setLibraryUri(constants.SqlPrepareFlag, I[29]);
  dart.setStaticFieldSignature(constants.SqlPrepareFlag, () => ['SQLITE_PREPARE_PERSISTENT', 'SQLITE_PREPARE_NORMALIZE', 'SQLITE_PREPARE_NO_VTAB']);
  dart.defineLazy(constants.SqlPrepareFlag, {
    /*constants.SqlPrepareFlag.SQLITE_PREPARE_PERSISTENT*/get SQLITE_PREPARE_PERSISTENT() {
      return 1;
    },
    /*constants.SqlPrepareFlag.SQLITE_PREPARE_NORMALIZE*/get SQLITE_PREPARE_NORMALIZE() {
      return 2;
    },
    /*constants.SqlPrepareFlag.SQLITE_PREPARE_NO_VTAB*/get SQLITE_PREPARE_NO_VTAB() {
      return 4;
    }
  }, false);
  constants.SqlType = class SqlType extends core.Object {
    static ['_#new#tearOff']() {
      return new constants.SqlType.new();
    }
  };
  (constants.SqlType.new = function() {
    ;
  }).prototype = constants.SqlType.prototype;
  dart.addTypeTests(constants.SqlType);
  dart.addTypeCaches(constants.SqlType);
  dart.setLibraryUri(constants.SqlType, I[29]);
  dart.setStaticFieldSignature(constants.SqlType, () => ['SQLITE_INTEGER', 'SQLITE_FLOAT', 'SQLITE_TEXT', 'SQLITE_BLOB', 'SQLITE_NULL']);
  dart.defineLazy(constants.SqlType, {
    /*constants.SqlType.SQLITE_INTEGER*/get SQLITE_INTEGER() {
      return 1;
    },
    /*constants.SqlType.SQLITE_FLOAT*/get SQLITE_FLOAT() {
      return 2;
    },
    /*constants.SqlType.SQLITE_TEXT*/get SQLITE_TEXT() {
      return 3;
    },
    /*constants.SqlType.SQLITE_BLOB*/get SQLITE_BLOB() {
      return 4;
    },
    /*constants.SqlType.SQLITE_NULL*/get SQLITE_NULL() {
      return 5;
    }
  }, false);
  constants.SqlTextEncoding = class SqlTextEncoding extends core.Object {
    static ['_#new#tearOff']() {
      return new constants.SqlTextEncoding.new();
    }
  };
  (constants.SqlTextEncoding.new = function() {
    ;
  }).prototype = constants.SqlTextEncoding.prototype;
  dart.addTypeTests(constants.SqlTextEncoding);
  dart.addTypeCaches(constants.SqlTextEncoding);
  dart.setLibraryUri(constants.SqlTextEncoding, I[29]);
  dart.setStaticFieldSignature(constants.SqlTextEncoding, () => ['SQLITE_UTF8', 'SQLITE_UTF16LE', 'SQLITE_UTF16BE', 'SQLITE_UTF16', 'SQLITE_ANY', 'SQLITE_UTF16_ALIGNED']);
  dart.defineLazy(constants.SqlTextEncoding, {
    /*constants.SqlTextEncoding.SQLITE_UTF8*/get SQLITE_UTF8() {
      return 1;
    },
    /*constants.SqlTextEncoding.SQLITE_UTF16LE*/get SQLITE_UTF16LE() {
      return 2;
    },
    /*constants.SqlTextEncoding.SQLITE_UTF16BE*/get SQLITE_UTF16BE() {
      return 3;
    },
    /*constants.SqlTextEncoding.SQLITE_UTF16*/get SQLITE_UTF16() {
      return 4;
    },
    /*constants.SqlTextEncoding.SQLITE_ANY*/get SQLITE_ANY() {
      return 5;
    },
    /*constants.SqlTextEncoding.SQLITE_UTF16_ALIGNED*/get SQLITE_UTF16_ALIGNED() {
      return 8;
    }
  }, false);
  constants.SqlSpecialDestructor = class SqlSpecialDestructor extends core.Object {
    static ['_#new#tearOff']() {
      return new constants.SqlSpecialDestructor.new();
    }
  };
  (constants.SqlSpecialDestructor.new = function() {
    ;
  }).prototype = constants.SqlSpecialDestructor.prototype;
  dart.addTypeTests(constants.SqlSpecialDestructor);
  dart.addTypeCaches(constants.SqlSpecialDestructor);
  dart.setLibraryUri(constants.SqlSpecialDestructor, I[29]);
  dart.setStaticFieldSignature(constants.SqlSpecialDestructor, () => ['SQLITE_STATIC', 'SQLITE_TRANSIENT']);
  dart.defineLazy(constants.SqlSpecialDestructor, {
    /*constants.SqlSpecialDestructor.SQLITE_STATIC*/get SQLITE_STATIC() {
      return 0;
    },
    /*constants.SqlSpecialDestructor.SQLITE_TRANSIENT*/get SQLITE_TRANSIENT() {
      return -1;
    }
  }, false);
  constants.SqlFunctionFlag = class SqlFunctionFlag extends core.Object {
    static ['_#new#tearOff']() {
      return new constants.SqlFunctionFlag.new();
    }
  };
  (constants.SqlFunctionFlag.new = function() {
    ;
  }).prototype = constants.SqlFunctionFlag.prototype;
  dart.addTypeTests(constants.SqlFunctionFlag);
  dart.addTypeCaches(constants.SqlFunctionFlag);
  dart.setLibraryUri(constants.SqlFunctionFlag, I[29]);
  dart.setStaticFieldSignature(constants.SqlFunctionFlag, () => ['SQLITE_DETERMINISTIC', 'SQLITE_DIRECTONLY', 'SQLITE_SUBTYPE', 'SQLITE_INNOCUOUS']);
  dart.defineLazy(constants.SqlFunctionFlag, {
    /*constants.SqlFunctionFlag.SQLITE_DETERMINISTIC*/get SQLITE_DETERMINISTIC() {
      return 2048;
    },
    /*constants.SqlFunctionFlag.SQLITE_DIRECTONLY*/get SQLITE_DIRECTONLY() {
      return 524288;
    },
    /*constants.SqlFunctionFlag.SQLITE_SUBTYPE*/get SQLITE_SUBTYPE() {
      return 1048576;
    },
    /*constants.SqlFunctionFlag.SQLITE_INNOCUOUS*/get SQLITE_INNOCUOUS() {
      return 2097152;
    }
  }, false);
  dart.defineLazy(constants, {
    /*constants.SQLITE_DELETE*/get SQLITE_DELETE() {
      return 9;
    },
    /*constants.SQLITE_INSERT*/get SQLITE_INSERT() {
      return 18;
    },
    /*constants.SQLITE_UPDATE*/get SQLITE_UPDATE() {
      return 23;
    },
    /*constants.bigIntMinValue64*/get bigIntMinValue64() {
      return core.BigInt.parse("-9223372036854775808");
    },
    /*constants.bigIntMaxValue64*/get bigIntMaxValue64() {
      return core.BigInt.parse("9223372036854775807");
    }
  }, false);
  database.CommonDatabase = class CommonDatabase extends core.Object {};
  (database.CommonDatabase.new = function() {
    ;
  }).prototype = database.CommonDatabase.prototype;
  dart.addTypeTests(database.CommonDatabase);
  dart.addTypeCaches(database.CommonDatabase);
  dart.setLibraryUri(database.CommonDatabase, I[30]);
  database.SqliteUpdateKind = class SqliteUpdateKind extends core._Enum {
    [_enumToString]() {
      return "SqliteUpdateKind." + this[_name];
    }
  };
  (database.SqliteUpdateKind.new = function(index, name) {
    database.SqliteUpdateKind.__proto__.new.call(this, index, name);
    ;
  }).prototype = database.SqliteUpdateKind.prototype;
  dart.addTypeTests(database.SqliteUpdateKind);
  dart.addTypeCaches(database.SqliteUpdateKind);
  dart.setMethodSignature(database.SqliteUpdateKind, () => ({
    __proto__: dart.getMethods(database.SqliteUpdateKind.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(database.SqliteUpdateKind, I[30]);
  dart.setStaticFieldSignature(database.SqliteUpdateKind, () => ['values', 'insert', 'update', 'delete']);
  dart.defineLazy(database.SqliteUpdateKind, {
    /*database.SqliteUpdateKind.values*/get values() {
      return C[29] || CT.C29;
    },
    /*database.SqliteUpdateKind.insert*/get insert() {
      return C[30] || CT.C30;
    },
    /*database.SqliteUpdateKind.update*/get update() {
      return C[31] || CT.C31;
    },
    /*database.SqliteUpdateKind.delete*/get delete() {
      return C[32] || CT.C32;
    }
  }, false);
  var kind$ = dart.privateName(database, "SqliteUpdate.kind");
  var tableName$ = dart.privateName(database, "SqliteUpdate.tableName");
  var rowId$ = dart.privateName(database, "SqliteUpdate.rowId");
  database.SqliteUpdate = class SqliteUpdate extends core.Object {
    get kind() {
      return this[kind$];
    }
    set kind(value) {
      super.kind = value;
    }
    get tableName() {
      return this[tableName$];
    }
    set tableName(value) {
      super.tableName = value;
    }
    get rowId() {
      return this[rowId$];
    }
    set rowId(value) {
      super.rowId = value;
    }
    static ['_#new#tearOff'](kind, tableName, rowId) {
      return new database.SqliteUpdate.new(kind, tableName, rowId);
    }
    get hashCode() {
      return core.Object.hash(this.kind, this.tableName, this.rowId);
    }
    _equals(other) {
      if (other == null) return false;
      return database.SqliteUpdate.is(other) && other.kind === this.kind && other.tableName === this.tableName && other.rowId === this.rowId;
    }
    toString() {
      return "SqliteUpdate: " + dart.str(this.kind) + " on " + this.tableName + ", rowid = " + dart.str(this.rowId);
    }
  };
  (database.SqliteUpdate.new = function(kind, tableName, rowId) {
    this[kind$] = kind;
    this[tableName$] = tableName;
    this[rowId$] = rowId;
    ;
  }).prototype = database.SqliteUpdate.prototype;
  dart.addTypeTests(database.SqliteUpdate);
  dart.addTypeCaches(database.SqliteUpdate);
  dart.setLibraryUri(database.SqliteUpdate, I[30]);
  dart.setFieldSignature(database.SqliteUpdate, () => ({
    __proto__: dart.getFields(database.SqliteUpdate.__proto__),
    kind: dart.finalFieldType(database.SqliteUpdateKind),
    tableName: dart.finalFieldType(core.String),
    rowId: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(database.SqliteUpdate, ['_equals', 'toString']);
  dart.defineExtensionAccessors(database.SqliteUpdate, ['hashCode']);
  var message$ = dart.privateName(exception$, "SqliteException.message");
  var explanation$ = dart.privateName(exception$, "SqliteException.explanation");
  var extendedResultCode$ = dart.privateName(exception$, "SqliteException.extendedResultCode");
  var operation$ = dart.privateName(exception$, "SqliteException.operation");
  var causingStatement$ = dart.privateName(exception$, "SqliteException.causingStatement");
  var parametersToStatement$ = dart.privateName(exception$, "SqliteException.parametersToStatement");
  exception$.SqliteException = class SqliteException extends core.Object {
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    get explanation() {
      return this[explanation$];
    }
    set explanation(value) {
      super.explanation = value;
    }
    get extendedResultCode() {
      return this[extendedResultCode$];
    }
    set extendedResultCode(value) {
      super.extendedResultCode = value;
    }
    get operation() {
      return this[operation$];
    }
    set operation(value) {
      super.operation = value;
    }
    get causingStatement() {
      return this[causingStatement$];
    }
    set causingStatement(value) {
      super.causingStatement = value;
    }
    get parametersToStatement() {
      return this[parametersToStatement$];
    }
    set parametersToStatement(value) {
      super.parametersToStatement = value;
    }
    get resultCode() {
      return this.extendedResultCode & 255;
    }
    static ['_#new#tearOff'](extendedResultCode, message, explanation = null, causingStatement = null, parametersToStatement = null, operation = null) {
      return new exception$.SqliteException.new(extendedResultCode, message, explanation, causingStatement, parametersToStatement, operation);
    }
    toString() {
      let t174, t174$, t174$0;
      let buffer = (t174 = new core.StringBuffer.new("SqliteException("), (() => {
        t174.write(this.extendedResultCode);
        t174.write("): ");
        t174.write(this.operation == null ? "" : "while " + dart.str(this.operation) + ", ");
        t174.write(this.message);
        return t174;
      })());
      if (this.explanation != null) {
        t174$ = buffer;
        (() => {
          t174$.write(", ");
          t174$.write(this.explanation);
          return t174$;
        })();
      }
      if (this.causingStatement != null) {
        t174$0 = buffer;
        (() => {
          t174$0.writeln();
          t174$0.write("  Causing statement: ");
          t174$0.write(this.causingStatement);
          return t174$0;
        })();
        if (this.parametersToStatement != null) {
          let params = dart.nullCheck(this.parametersToStatement)[$map](core.String, dart.fn(e => {
            if (typed_data.Uint8List.is(e)) {
              return "blob (" + dart.str(e[$length]) + " bytes)";
            } else {
              return dart.toString(e);
            }
          }, T$.ObjectNToString()))[$join](", ");
          buffer.write(", parameters: " + params);
        }
      }
      return buffer.toString();
    }
  };
  (exception$.SqliteException.new = function(extendedResultCode, message, explanation = null, causingStatement = null, parametersToStatement = null, operation = null) {
    this[extendedResultCode$] = extendedResultCode;
    this[message$] = message;
    this[explanation$] = explanation;
    this[causingStatement$] = causingStatement;
    this[parametersToStatement$] = parametersToStatement;
    this[operation$] = operation;
    ;
  }).prototype = exception$.SqliteException.prototype;
  dart.addTypeTests(exception$.SqliteException);
  dart.addTypeCaches(exception$.SqliteException);
  exception$.SqliteException[dart.implements] = () => [core.Exception];
  dart.setGetterSignature(exception$.SqliteException, () => ({
    __proto__: dart.getGetters(exception$.SqliteException.__proto__),
    resultCode: core.int
  }));
  dart.setLibraryUri(exception$.SqliteException, I[31]);
  dart.setFieldSignature(exception$.SqliteException, () => ({
    __proto__: dart.getFields(exception$.SqliteException.__proto__),
    message: dart.finalFieldType(core.String),
    explanation: dart.finalFieldType(dart.nullable(core.String)),
    extendedResultCode: dart.finalFieldType(core.int),
    operation: dart.finalFieldType(dart.nullable(core.String)),
    causingStatement: dart.finalFieldType(dart.nullable(core.String)),
    parametersToStatement: dart.finalFieldType(dart.nullable(core.List$(dart.nullable(core.Object))))
  }));
  dart.defineExtensionMethods(exception$.SqliteException, ['toString']);
  const _is_AggregateFunction_default = Symbol('_is_AggregateFunction_default');
  functions.AggregateFunction$ = dart.generic(V => {
    class AggregateFunction extends core.Object {}
    (AggregateFunction.new = function() {
      ;
    }).prototype = AggregateFunction.prototype;
    dart.addTypeTests(AggregateFunction);
    AggregateFunction.prototype[_is_AggregateFunction_default] = true;
    dart.addTypeCaches(AggregateFunction);
    dart.setLibraryUri(AggregateFunction, I[32]);
    return AggregateFunction;
  });
  functions.AggregateFunction = functions.AggregateFunction$();
  dart.addTypeTests(functions.AggregateFunction, _is_AggregateFunction_default);
  const _is_WindowFunction_default = Symbol('_is_WindowFunction_default');
  functions.WindowFunction$ = dart.generic(V => {
    class WindowFunction extends core.Object {}
    (WindowFunction.new = function() {
      ;
    }).prototype = WindowFunction.prototype;
    dart.addTypeTests(WindowFunction);
    WindowFunction.prototype[_is_WindowFunction_default] = true;
    dart.addTypeCaches(WindowFunction);
    WindowFunction[dart.implements] = () => [functions.AggregateFunction$(V)];
    dart.setLibraryUri(WindowFunction, I[32]);
    return WindowFunction;
  });
  functions.WindowFunction = functions.WindowFunction$();
  dart.addTypeTests(functions.WindowFunction, _is_WindowFunction_default);
  var value$ = dart.privateName(functions, "AggregateContext.value");
  const _is_AggregateContext_default = Symbol('_is_AggregateContext_default');
  functions.AggregateContext$ = dart.generic(V => {
    class AggregateContext extends core.Object {
      get value() {
        return this[value$];
      }
      set value(value) {
        this[value$] = V.as(value);
      }
      static ['_#new#tearOff'](V, value) {
        return new (functions.AggregateContext$(V)).new(value);
      }
    }
    (AggregateContext.new = function(value) {
      this[value$] = value;
      ;
    }).prototype = AggregateContext.prototype;
    dart.addTypeTests(AggregateContext);
    AggregateContext.prototype[_is_AggregateContext_default] = true;
    dart.addTypeCaches(AggregateContext);
    dart.setLibraryUri(AggregateContext, I[32]);
    dart.setFieldSignature(AggregateContext, () => ({
      __proto__: dart.getFields(AggregateContext.__proto__),
      value: dart.fieldType(V)
    }));
    return AggregateContext;
  });
  functions.AggregateContext = functions.AggregateContext$();
  dart.addTypeTests(functions.AggregateContext, _is_AggregateContext_default);
  var allowedArgs$ = dart.privateName(functions, "AllowedArgumentCount.allowedArgs");
  functions.AllowedArgumentCount = class AllowedArgumentCount extends core.Object {
    get allowedArgs() {
      return this[allowedArgs$];
    }
    set allowedArgs(value) {
      super.allowedArgs = value;
    }
    static ['_#new#tearOff'](allowedArgs) {
      return new functions.AllowedArgumentCount.new(allowedArgs);
    }
    static ['_#any#tearOff']() {
      return new functions.AllowedArgumentCount.any();
    }
  };
  (functions.AllowedArgumentCount.new = function(allowedArgs) {
    this[allowedArgs$] = allowedArgs;
    ;
  }).prototype = functions.AllowedArgumentCount.prototype;
  (functions.AllowedArgumentCount.any = function() {
    this[allowedArgs$] = -1;
    ;
  }).prototype = functions.AllowedArgumentCount.prototype;
  dart.addTypeTests(functions.AllowedArgumentCount);
  dart.addTypeCaches(functions.AllowedArgumentCount);
  dart.setLibraryUri(functions.AllowedArgumentCount, I[32]);
  dart.setFieldSignature(functions.AllowedArgumentCount, () => ({
    __proto__: dart.getFields(functions.AllowedArgumentCount.__proto__),
    allowedArgs: dart.finalFieldType(core.int)
  }));
  var tableNames$ = dart.privateName(result_set, "Cursor.tableNames");
  var _calculatedIndexes = dart.privateName(result_set, "_calculatedIndexes");
  var _columnNames$ = dart.privateName(result_set, "_columnNames");
  var _calculateIndexes = dart.privateName(result_set, "_calculateIndexes");
  result_set.Cursor = class Cursor extends core.Object {
    get tableNames() {
      return this[tableNames$];
    }
    set tableNames(value) {
      super.tableNames = value;
    }
    get columnNames() {
      return this[_columnNames$];
    }
    set columnNames(names) {
      this[_columnNames$] = names;
      this[_calculateIndexes]();
    }
    [_calculateIndexes]() {
      this[_calculatedIndexes] = (() => {
        let t174 = new (T$.IdentityMapOfString$int()).new();
        for (let column of this[_columnNames$])
          t174[$_set](column, this[_columnNames$][$lastIndexOf](column));
        return t174;
      })();
    }
  };
  (result_set.Cursor.new = function(_columnNames, tableNames) {
    this[_calculatedIndexes] = C[33] || CT.C33;
    this[_columnNames$] = _columnNames;
    this[tableNames$] = tableNames;
    this[_calculateIndexes]();
  }).prototype = result_set.Cursor.prototype;
  dart.addTypeTests(result_set.Cursor);
  dart.addTypeCaches(result_set.Cursor);
  dart.setMethodSignature(result_set.Cursor, () => ({
    __proto__: dart.getMethods(result_set.Cursor.__proto__),
    [_calculateIndexes]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(result_set.Cursor, () => ({
    __proto__: dart.getGetters(result_set.Cursor.__proto__),
    columnNames: core.List$(core.String)
  }));
  dart.setSetterSignature(result_set.Cursor, () => ({
    __proto__: dart.getSetters(result_set.Cursor.__proto__),
    columnNames: core.List$(core.String)
  }));
  dart.setLibraryUri(result_set.Cursor, I[33]);
  dart.setFieldSignature(result_set.Cursor, () => ({
    __proto__: dart.getFields(result_set.Cursor.__proto__),
    [_columnNames$]: dart.fieldType(core.List$(core.String)),
    tableNames: dart.finalFieldType(dart.nullable(core.List$(dart.nullable(core.String)))),
    [_calculatedIndexes]: dart.fieldType(core.Map$(core.String, core.int))
  }));
  result_set.IteratingCursor = class IteratingCursor extends result_set.Cursor {};
  (result_set.IteratingCursor.new = function(columnNames, tableNames) {
    result_set.IteratingCursor.__proto__.new.call(this, columnNames, tableNames);
    ;
  }).prototype = result_set.IteratingCursor.prototype;
  dart.addTypeTests(result_set.IteratingCursor);
  dart.addTypeCaches(result_set.IteratingCursor);
  result_set.IteratingCursor[dart.implements] = () => [core.Iterator$(result_set.Row)];
  dart.setLibraryUri(result_set.IteratingCursor, I[33]);
  var rows$ = dart.privateName(result_set, "ResultSet.rows");
  var _result$ = dart.privateName(result_set, "_result");
  var _data = dart.privateName(result_set, "_data");
  const Object_UnmodifiableMapMixin$36 = class Object_UnmodifiableMapMixin extends core.Object {};
  (Object_UnmodifiableMapMixin$36.new = function() {
  }).prototype = Object_UnmodifiableMapMixin$36.prototype;
  dart.applyMixin(Object_UnmodifiableMapMixin$36, unmodifiable_wrappers.UnmodifiableMapMixin$(core.String, dart.dynamic));
  const Object_MapMixin$36 = class Object_MapMixin extends Object_UnmodifiableMapMixin$36 {};
  (Object_MapMixin$36.new = function() {
  }).prototype = Object_MapMixin$36.prototype;
  dart.applyMixin(Object_MapMixin$36, collection.MapMixin$(core.String, dart.dynamic));
  result_set.Row = class Row extends Object_MapMixin$36 {
    static ['_#new#tearOff'](_result, data) {
      return new result_set.Row.new(_result, data);
    }
    columnAt(i) {
      return this[_data][$_get](i);
    }
    _get(key) {
      if (!(typeof key == 'string')) {
        if (core.int.is(key)) {
          return this[_data][$_get](key);
        }
        return null;
      }
      let index = this[_result$][_calculatedIndexes][$_get](key);
      if (index == null) return null;
      return this.columnAt(index);
    }
    get keys() {
      return this[_result$].columnNames;
    }
    get values() {
      return this[_data];
    }
    toTableColumnMap() {
      if (this[_result$].tableNames == null) {
        return null;
      }
      let map = new (T$.IdentityMapOfStringN$MapOfString$dynamic()).new();
      for (let i = 0; i < this[_data][$length]; i = i + 1) {
        let tableName = dart.nullCheck(this[_result$].tableNames)[$_get](i);
        let columnName = this[_result$].columnNames[$_get](i);
        let value = this[_data][$_get](i);
        let columnsMap = map[$putIfAbsent](tableName, dart.fn(() => new (T$.IdentityMapOfString$dynamic()).new(), T$.VoidToMapOfString$dynamic()));
        columnsMap[$_set](columnName, value);
      }
      return map;
    }
  };
  (result_set.Row.new = function(_result, data) {
    this[_result$] = _result;
    this[_data] = T$.ListOfObjectN().unmodifiable(data);
    ;
  }).prototype = result_set.Row.prototype;
  result_set.Row.prototype[dart.isMap] = true;
  dart.addTypeTests(result_set.Row);
  dart.addTypeCaches(result_set.Row);
  result_set.Row[dart.implements] = () => [core.Map$(core.String, dart.dynamic)];
  dart.setMethodSignature(result_set.Row, () => ({
    __proto__: dart.getMethods(result_set.Row.__proto__),
    columnAt: dart.fnType(dart.dynamic, [core.int]),
    _get: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
    [$_get]: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
    toTableColumnMap: dart.fnType(dart.nullable(core.Map$(dart.nullable(core.String), core.Map$(core.String, dart.dynamic))), [])
  }));
  dart.setGetterSignature(result_set.Row, () => ({
    __proto__: dart.getGetters(result_set.Row.__proto__),
    keys: core.List$(core.String),
    [$keys]: core.List$(core.String),
    values: core.List$(dart.nullable(core.Object)),
    [$values]: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(result_set.Row, I[33]);
  dart.setFieldSignature(result_set.Row, () => ({
    __proto__: dart.getFields(result_set.Row.__proto__),
    [_result$]: dart.finalFieldType(result_set.Cursor),
    [_data]: dart.finalFieldType(core.List$(dart.nullable(core.Object)))
  }));
  dart.defineExtensionMethods(result_set.Row, ['_get']);
  dart.defineExtensionAccessors(result_set.Row, ['keys', 'values']);
  const Cursor_ListMixin$36 = class Cursor_ListMixin extends result_set.Cursor {};
  (Cursor_ListMixin$36.new = function(_columnNames, tableNames) {
    Cursor_ListMixin$36.__proto__.new.call(this, _columnNames, tableNames);
  }).prototype = Cursor_ListMixin$36.prototype;
  dart.applyMixin(Cursor_ListMixin$36, collection.ListMixin$(result_set.Row));
  const Cursor_NonGrowableListMixin$36 = class Cursor_NonGrowableListMixin extends Cursor_ListMixin$36 {};
  (Cursor_NonGrowableListMixin$36.new = function(_columnNames, tableNames) {
    Cursor_NonGrowableListMixin$36.__proto__.new.call(this, _columnNames, tableNames);
  }).prototype = Cursor_NonGrowableListMixin$36.prototype;
  dart.applyMixin(Cursor_NonGrowableListMixin$36, unmodifiable_wrappers.NonGrowableListMixin$(result_set.Row));
  result_set.ResultSet = class ResultSet extends Cursor_NonGrowableListMixin$36 {
    get rows() {
      return this[rows$];
    }
    set rows(value) {
      super.rows = value;
    }
    static ['_#new#tearOff'](columnNames, tableNames, rows) {
      return new result_set.ResultSet.new(columnNames, tableNames, rows);
    }
    get iterator() {
      return new result_set._ResultIterator.new(this);
    }
    _get(index) {
      return new result_set.Row.new(this, this.rows[$_get](index));
    }
    _set(index, value$) {
      let value = value$;
      result_set.Row.as(value);
      dart.throw(new core.UnsupportedError.new("Can't change rows from a result set"));
      return value$;
    }
    get length() {
      return this.rows[$length];
    }
    set length(value) {
      super.length = value;
    }
  };
  (result_set.ResultSet.new = function(columnNames, tableNames, rows) {
    this[rows$] = rows;
    result_set.ResultSet.__proto__.new.call(this, columnNames, tableNames);
    ;
  }).prototype = result_set.ResultSet.prototype;
  result_set.ResultSet.prototype[dart.isIterable] = true;
  dart.addTypeTests(result_set.ResultSet);
  dart.addTypeCaches(result_set.ResultSet);
  result_set.ResultSet[dart.implements] = () => [core.Iterable$(result_set.Row)];
  dart.setMethodSignature(result_set.ResultSet, () => ({
    __proto__: dart.getMethods(result_set.ResultSet.__proto__),
    _get: dart.fnType(result_set.Row, [core.int]),
    [$_get]: dart.fnType(result_set.Row, [core.int]),
    _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(result_set.ResultSet, () => ({
    __proto__: dart.getGetters(result_set.ResultSet.__proto__),
    length: core.int,
    [$length]: core.int
  }));
  dart.setLibraryUri(result_set.ResultSet, I[33]);
  dart.setFieldSignature(result_set.ResultSet, () => ({
    __proto__: dart.getFields(result_set.ResultSet.__proto__),
    rows: dart.finalFieldType(core.List$(core.List$(dart.nullable(core.Object))))
  }));
  dart.defineExtensionMethods(result_set.ResultSet, ['_get', '_set']);
  dart.defineExtensionAccessors(result_set.ResultSet, ['iterator', 'length']);
  result_set._ResultIterator = class _ResultIterator extends core.Iterator$(result_set.Row) {
    static ['_#new#tearOff'](result) {
      return new result_set._ResultIterator.new(result);
    }
    get current() {
      return new result_set.Row.new(this.result, this.result.rows[$_get](this.index));
    }
    moveNext() {
      this.index = this.index + 1;
      return this.index < this.result.rows[$length];
    }
  };
  (result_set._ResultIterator.new = function(result) {
    this.index = -1;
    this.result = result;
    ;
  }).prototype = result_set._ResultIterator.prototype;
  dart.addTypeTests(result_set._ResultIterator);
  dart.addTypeCaches(result_set._ResultIterator);
  dart.setMethodSignature(result_set._ResultIterator, () => ({
    __proto__: dart.getMethods(result_set._ResultIterator.__proto__),
    moveNext: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(result_set._ResultIterator, () => ({
    __proto__: dart.getGetters(result_set._ResultIterator.__proto__),
    current: result_set.Row
  }));
  dart.setLibraryUri(result_set._ResultIterator, I[33]);
  dart.setFieldSignature(result_set._ResultIterator, () => ({
    __proto__: dart.getFields(result_set._ResultIterator.__proto__),
    result: dart.finalFieldType(result_set.ResultSet),
    index: dart.fieldType(core.int)
  }));
  var tempDirectory = dart.privateName(sqlite3, "CommonSqlite3.tempDirectory");
  sqlite3.CommonSqlite3 = class CommonSqlite3 extends core.Object {
    get tempDirectory() {
      return this[tempDirectory];
    }
    set tempDirectory(value) {
      this[tempDirectory] = value;
    }
  };
  (sqlite3.CommonSqlite3.new = function() {
    this[tempDirectory] = null;
    ;
  }).prototype = sqlite3.CommonSqlite3.prototype;
  dart.addTypeTests(sqlite3.CommonSqlite3);
  dart.addTypeCaches(sqlite3.CommonSqlite3);
  dart.setLibraryUri(sqlite3.CommonSqlite3, I[34]);
  dart.setFieldSignature(sqlite3.CommonSqlite3, () => ({
    __proto__: dart.getFields(sqlite3.CommonSqlite3.__proto__),
    tempDirectory: dart.fieldType(dart.nullable(core.String))
  }));
  var libVersion$ = dart.privateName(sqlite3, "Version.libVersion");
  var sourceId$ = dart.privateName(sqlite3, "Version.sourceId");
  var versionNumber$ = dart.privateName(sqlite3, "Version.versionNumber");
  sqlite3.Version = class Version extends core.Object {
    get libVersion() {
      return this[libVersion$];
    }
    set libVersion(value) {
      super.libVersion = value;
    }
    get sourceId() {
      return this[sourceId$];
    }
    set sourceId(value) {
      super.sourceId = value;
    }
    get versionNumber() {
      return this[versionNumber$];
    }
    set versionNumber(value) {
      super.versionNumber = value;
    }
    static ['_#new#tearOff'](libVersion, sourceId, versionNumber) {
      return new sqlite3.Version.new(libVersion, sourceId, versionNumber);
    }
    toString() {
      return "Version(libVersion: " + this.libVersion + ", sourceId: " + this.sourceId + ", " + "number: " + dart.str(this.versionNumber) + ")";
    }
  };
  (sqlite3.Version.new = function(libVersion, sourceId, versionNumber) {
    this[libVersion$] = libVersion;
    this[sourceId$] = sourceId;
    this[versionNumber$] = versionNumber;
    ;
  }).prototype = sqlite3.Version.prototype;
  dart.addTypeTests(sqlite3.Version);
  dart.addTypeCaches(sqlite3.Version);
  dart.setLibraryUri(sqlite3.Version, I[34]);
  dart.setFieldSignature(sqlite3.Version, () => ({
    __proto__: dart.getFields(sqlite3.Version.__proto__),
    libVersion: dart.finalFieldType(core.String),
    sourceId: dart.finalFieldType(core.String),
    versionNumber: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(sqlite3.Version, ['toString']);
  sqlite3.OpenMode = class OpenMode extends core._Enum {
    [_enumToString]() {
      return "OpenMode." + this[_name];
    }
  };
  (sqlite3.OpenMode.new = function(index, name) {
    sqlite3.OpenMode.__proto__.new.call(this, index, name);
    ;
  }).prototype = sqlite3.OpenMode.prototype;
  dart.addTypeTests(sqlite3.OpenMode);
  dart.addTypeCaches(sqlite3.OpenMode);
  dart.setMethodSignature(sqlite3.OpenMode, () => ({
    __proto__: dart.getMethods(sqlite3.OpenMode.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(sqlite3.OpenMode, I[34]);
  dart.setStaticFieldSignature(sqlite3.OpenMode, () => ['values', 'readOnly', 'readWrite', 'readWriteCreate']);
  dart.defineLazy(sqlite3.OpenMode, {
    /*sqlite3.OpenMode.values*/get values() {
      return C[34] || CT.C34;
    },
    /*sqlite3.OpenMode.readOnly*/get readOnly() {
      return C[35] || CT.C35;
    },
    /*sqlite3.OpenMode.readWrite*/get readWrite() {
      return C[36] || CT.C36;
    },
    /*sqlite3.OpenMode.readWriteCreate*/get readWriteCreate() {
      return C[37] || CT.C37;
    }
  }, false);
  statement.CommonPreparedStatement = class CommonPreparedStatement extends core.Object {};
  (statement.CommonPreparedStatement.new = function() {
    ;
  }).prototype = statement.CommonPreparedStatement.prototype;
  dart.addTypeTests(statement.CommonPreparedStatement);
  dart.addTypeCaches(statement.CommonPreparedStatement);
  dart.setLibraryUri(statement.CommonPreparedStatement, I[35]);
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "file:///zapp/project/lib/CardTest.dart": CardTest,
    "file:///zapp/project/lib/DBTest.dart": DBTest,
    "package:sqflite/sqflite.dart": sqflite,
    "package:sqflite_common_ffi/sqflite_ffi.dart": sqflite_ffi,
    "package:sqflite/src/compat.dart": compat,
    "package:sqflite/src/constant.dart": constant,
    "package:sqflite/src/sqflite_android.dart": sqflite_android,
    "package:sqflite/src/sqflite_impl.dart": sqflite_impl,
    "package:sqflite/src/utils.dart": utils,
    "package:sqflite/utils/utils.dart": utils$,
    "package:sqflite/sqlite_api.dart": sqlite_api,
    "package:sqflite/sql.dart": sql,
    "package:sqflite_common/sqflite.dart": sqflite$,
    "package:sqflite/src/factory_impl.dart": factory_impl,
    "package:sqflite/src/sqflite_plugin.dart": sqflite_plugin,
    "package:sqflite_common_ffi/src/sqflite_ffi.dart": sqflite_ffi$,
    "package:sqflite_common/src/compat.dart": compat$,
    "package:sqflite_common/src/constant.dart": constant$,
    "package:sqflite/src/sqflite_import.dart": sqflite_import,
    "package:sqflite_common/sqlite_api.dart": sqlite_api$,
    "package:sqflite/src/services_impl.dart": services_impl,
    "package:sqflite_common/src/utils.dart": utils$0,
    "package:sqflite_common/utils/utils.dart": utils$1,
    "package:sqflite/src/sql_builder.dart": sql_builder,
    "package:sqflite_common/src/sqflite_database_factory.dart": sqflite_database_factory,
    "package:sqflite/src/exception_impl.dart": exception_impl,
    "package:sqflite/src/dev_utils.dart": dev_utils,
    "package:sqflite_common_ffi/src/sqflite_ffi_web.dart": sqflite_ffi_web,
    "package:sqflite_common/src/factory_mixin.dart": factory_mixin,
    "package:sqflite_common/src/database.dart": database$,
    "package:sqflite_common/src/database_mixin.dart": database_mixin,
    "package:sqflite_common/src/exception.dart": exception,
    "package:sqflite_common/src/factory.dart": factory$,
    "package:sqflite_common/src/mixin/constant.dart": constant$0,
    "package:sqflite_common/src/mixin/factory.dart": factory,
    "package:sqflite_common/sql.dart": sql$,
    "package:sqflite_common/src/open_options.dart": open_options,
    "package:sqflite_common/src/transaction.dart": transaction,
    "package:sqflite_common/src/sqflite_debug.dart": sqflite_debug,
    "package:sqflite_common/src/sql_builder.dart": sql_builder$,
    "package:sqflite_common/src/dev_utils.dart": dev_utils$,
    "package:sqflite_common_ffi/src/database_factory_ffi_web.dart": database_factory_ffi_web,
    "package:synchronized/synchronized.dart": synchronized,
    "package:sqflite_common/src/path_utils.dart": path_utils,
    "package:sqflite_common/src/batch.dart": batch,
    "package:sqflite_common/src/cursor.dart": cursor,
    "package:sqflite_common/src/collection_utils.dart": collection_utils,
    "package:sqflite_common/src/value_utils.dart": value_utils,
    "package:sqflite_common/src/arg_utils.dart": arg_utils,
    "package:sqflite_common/src/mixin/import_mixin.dart": import_mixin,
    "package:sqflite_common/src/logger/sqflite_logger.dart": sqflite_logger,
    "package:sqflite_common_ffi/src/method_call.dart": method_call,
    "package:synchronized/src/basic_lock.dart": basic_lock,
    "package:synchronized/src/reentrant_lock.dart": reentrant_lock,
    "package:sqflite_common/src/sql_command.dart": sql_command,
    "package:sqflite_common/src/env_utils.dart": env_utils,
    "package:sqflite_common/sqflite_logger.dart": sqflite_logger$,
    "package:sqflite_common_ffi/src/constant.dart": constant$1,
    "package:sqflite_common_ffi/src/env_utils.dart": env_utils$,
    "package:sqflite_common_ffi/src/mixin/handler_mixin.dart": handler_mixin,
    "package:synchronized/src/utils.dart": utils$2,
    "package:sqflite_common_ffi/src/database_factory_ffi.dart": database_factory_ffi,
    "package:sqflite_common_ffi/src/sqflite_ffi_exception.dart": sqflite_ffi_exception,
    "package:sqflite_common_ffi/src/sqflite_ffi_impl.dart": sqflite_ffi_impl,
    "package:sqflite_common_ffi/src/sqflite_import.dart": sqflite_import$,
    "package:sqlite3/common.dart": common,
    "package:sqflite_common_ffi/src/database_tracker_web.dart": database_tracker_web,
    "package:sqflite_common_ffi/src/import.dart": $import,
    "package:sqflite_common_ffi/src/sqflite_ffi_impl_web.dart": sqflite_ffi_impl_web,
    "package:sqlite3/src/constants.dart": constants,
    "package:sqlite3/src/database.dart": database,
    "package:sqlite3/src/exception.dart": exception$,
    "package:sqlite3/src/functions.dart": functions,
    "package:sqlite3/src/result_set.dart": result_set,
    "package:sqlite3/src/sqlite3.dart": sqlite3,
    "package:sqlite3/src/statement.dart": statement
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/project/lib/CardTest.dart","/zapp/project/lib/DBTest.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite-2.2.8+4/lib/sqflite.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite-2.2.8+4/lib/src/sqflite_android.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite-2.2.8+4/lib/src/sqflite_impl.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common-2.4.5+1/lib/sqflite.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common-2.4.5+1/lib/src/factory_mixin.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite-2.2.8+4/lib/src/factory_impl.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite-2.2.8+4/lib/src/sqflite_plugin.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common-2.4.5+1/lib/src/compat.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common-2.4.5+1/lib/src/constant.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common-2.4.5+1/lib/sqlite_api.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common-2.4.5+1/lib/src/utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common-2.4.5+1/lib/utils/utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common-2.4.5+1/lib/src/sqflite_database_factory.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite-2.2.8+4/lib/src/exception_impl.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common_ffi-2.2.5/lib/src/sqflite_ffi_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common-2.4.5+1/lib/src/database.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common-2.4.5+1/lib/src/database_mixin.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common-2.4.5+1/lib/src/exception.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common-2.4.5+1/lib/src/factory.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common-2.4.5+1/lib/src/mixin/factory.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common-2.4.5+1/lib/src/open_options.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common-2.4.5+1/lib/src/transaction.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common-2.4.5+1/lib/src/sqflite_debug.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common-2.4.5+1/lib/src/sql_builder.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common-2.4.5+1/lib/src/dev_utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common_ffi-2.2.5/lib/src/database_factory_ffi_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/synchronized-3.1.0/lib/synchronized.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common-2.4.5+1/lib/src/path_utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common-2.4.5+1/lib/src/batch.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common-2.4.5+1/lib/src/sql_command.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common-2.4.5+1/lib/src/cursor.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common-2.4.5+1/lib/src/collection_utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common-2.4.5+1/lib/src/value_utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common-2.4.5+1/lib/src/arg_utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common-2.4.5+1/lib/src/logger/sqflite_logger.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common_ffi-2.2.5/lib/src/method_call.dart","/zapp/pub/.pub_cache/hosted/pub.dev/synchronized-3.1.0/lib/src/basic_lock.dart","/zapp/pub/.pub_cache/hosted/pub.dev/synchronized-3.1.0/lib/src/reentrant_lock.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common-2.4.5+1/lib/src/env_utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common_ffi-2.2.5/lib/src/constant.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common_ffi-2.2.5/lib/src/env_utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/synchronized-3.1.0/lib/src/utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common_ffi-2.2.5/lib/src/sqflite_ffi_exception.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common_ffi-2.2.5/lib/src/sqflite_ffi_impl.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common_ffi-2.2.5/lib/src/database_tracker_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqflite_common_ffi-2.2.5/lib/src/sqflite_ffi_impl_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqlite3-1.11.2/lib/src/constants.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqlite3-1.11.2/lib/src/database.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqlite3-1.11.2/lib/src/exception.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqlite3-1.11.2/lib/src/functions.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqlite3-1.11.2/lib/src/result_set.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqlite3-1.11.2/lib/src/sqlite3.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sqlite3-1.11.2/lib/src/statement.dart"],"names":[],"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","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    zapp__project__lib__CardTest: CardTest,
    zapp__project__lib__DBTest: DBTest,
    sqflite: sqflite,
    sqflite_ffi: sqflite_ffi,
    src__compat: compat,
    src__constant: constant,
    src__sqflite_android: sqflite_android,
    src__sqflite_impl: sqflite_impl,
    src__utils: utils,
    utils__utils: utils$,
    sqlite_api: sqlite_api,
    sql: sql,
    sqflite: sqflite$,
    src__factory_impl: factory_impl,
    src__sqflite_plugin: sqflite_plugin,
    src__sqflite_ffi: sqflite_ffi$,
    src__compat: compat$,
    src__constant: constant$,
    src__sqflite_import: sqflite_import,
    sqlite_api: sqlite_api$,
    src__services_impl: services_impl,
    src__utils: utils$0,
    utils__utils: utils$1,
    src__sql_builder: sql_builder,
    src__sqflite_database_factory: sqflite_database_factory,
    src__exception_impl: exception_impl,
    src__dev_utils: dev_utils,
    src__sqflite_ffi_web: sqflite_ffi_web,
    src__factory_mixin: factory_mixin,
    src__database: database$,
    src__database_mixin: database_mixin,
    src__exception: exception,
    src__factory: factory$,
    src__mixin__constant: constant$0,
    src__mixin__factory: factory,
    sql: sql$,
    src__open_options: open_options,
    src__transaction: transaction,
    src__sqflite_debug: sqflite_debug,
    src__sql_builder: sql_builder$,
    src__dev_utils: dev_utils$,
    src__database_factory_ffi_web: database_factory_ffi_web,
    synchronized: synchronized,
    src__path_utils: path_utils,
    src__batch: batch,
    src__cursor: cursor,
    src__collection_utils: collection_utils,
    src__value_utils: value_utils,
    src__arg_utils: arg_utils,
    src__mixin__import_mixin: import_mixin,
    src__logger__sqflite_logger: sqflite_logger,
    src__method_call: method_call,
    src__basic_lock: basic_lock,
    src__reentrant_lock: reentrant_lock,
    src__sql_command: sql_command,
    src__env_utils: env_utils,
    sqflite_logger: sqflite_logger$,
    src__constant: constant$1,
    src__env_utils: env_utils$,
    src__mixin__handler_mixin: handler_mixin,
    src__utils: utils$2,
    src__database_factory_ffi: database_factory_ffi,
    src__sqflite_ffi_exception: sqflite_ffi_exception,
    src__sqflite_ffi_impl: sqflite_ffi_impl,
    src__sqflite_import: sqflite_import$,
    common: common,
    src__database_tracker_web: database_tracker_web,
    src__import: $import,
    src__sqflite_ffi_impl_web: sqflite_ffi_impl_web,
    src__constants: constants,
    src__database: database,
    src__exception: exception$,
    src__functions: functions,
    src__result_set: result_set,
    src__sqlite3: sqlite3,
    src__statement: statement
  };
}));

//# sourceMappingURL=main.js.map
